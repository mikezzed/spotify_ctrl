
spotify_ctrl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008918  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08008a24  08008a24  00018a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aac  08008aac  00020164  2**0
                  CONTENTS
  4 .ARM          00000000  08008aac  08008aac  00020164  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008aac  08008aac  00020164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab0  08008ab0  00018ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000164  20000000  08008ab4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000918  20000164  08008c18  00020164  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a7c  08008c18  00020a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016aa9  00000000  00000000  0002018d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000325d  00000000  00000000  00036c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001340  00000000  00000000  00039e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011e8  00000000  00000000  0003b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ad29  00000000  00000000  0003c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011687  00000000  00000000  000570e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091567  00000000  00000000  00068770  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9cd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff0  00000000  00000000  000f9d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000164 	.word	0x20000164
 8000128:	00000000 	.word	0x00000000
 800012c:	08008a0c 	.word	0x08008a0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000168 	.word	0x20000168
 8000148:	08008a0c 	.word	0x08008a0c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fc91 	bl	8000a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f891 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 faa5 	bl	80006a8 <MX_GPIO_Init>
  MX_RTC_Init();
 800015e:	f000 f8ed 	bl	800033c <MX_RTC_Init>
  MX_TIM1_Init();
 8000162:	f000 f935 	bl	80003d0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000166:	f000 f983 	bl	8000470 <MX_TIM2_Init>
  MX_TIM3_Init();
 800016a:	f000 fa19 	bl	80005a0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800016e:	f000 fa71 	bl	8000654 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000172:	f008 f865 	bl	8008240 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // PA0
 8000176:	2100      	movs	r1, #0
 8000178:	483d      	ldr	r0, [pc, #244]	; (8000270 <main+0x124>)
 800017a:	f003 fddb 	bl	8003d34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // PA1
 800017e:	2104      	movs	r1, #4
 8000180:	483b      	ldr	r0, [pc, #236]	; (8000270 <main+0x124>)
 8000182:	f003 fdd7 	bl	8003d34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3); // PA2
 8000186:	2108      	movs	r1, #8
 8000188:	4839      	ldr	r0, [pc, #228]	; (8000270 <main+0x124>)
 800018a:	f003 fdd3 	bl	8003d34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4); // PA3
 800018e:	210c      	movs	r1, #12
 8000190:	4837      	ldr	r0, [pc, #220]	; (8000270 <main+0x124>)
 8000192:	f003 fdcf 	bl	8003d34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // PA6
 8000196:	2100      	movs	r1, #0
 8000198:	4836      	ldr	r0, [pc, #216]	; (8000274 <main+0x128>)
 800019a:	f003 fdcb 	bl	8003d34 <HAL_TIM_PWM_Start>

  uint16_t fade_counter = 0;
 800019e:	2300      	movs	r3, #0
 80001a0:	81fb      	strh	r3, [r7, #14]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (int i = 0; i < NUM_LEDS; i++)
 80001a2:	2300      	movs	r3, #0
 80001a4:	60bb      	str	r3, [r7, #8]
 80001a6:	e04b      	b.n	8000240 <main+0xf4>
	      {
	          // Calculate LED's individual phase-shifted fade step
	          uint16_t phase = (fade_counter + i * PHASE_SHIFT) % (2 * MAX_DUTY);
 80001a8:	89fa      	ldrh	r2, [r7, #14]
 80001aa:	68bb      	ldr	r3, [r7, #8]
 80001ac:	21c8      	movs	r1, #200	; 0xc8
 80001ae:	fb01 f303 	mul.w	r3, r1, r3
 80001b2:	4413      	add	r3, r2
 80001b4:	4a30      	ldr	r2, [pc, #192]	; (8000278 <main+0x12c>)
 80001b6:	fb82 1203 	smull	r1, r2, r2, r3
 80001ba:	441a      	add	r2, r3
 80001bc:	1291      	asrs	r1, r2, #10
 80001be:	17da      	asrs	r2, r3, #31
 80001c0:	1a8a      	subs	r2, r1, r2
 80001c2:	f240 71ce 	movw	r1, #1998	; 0x7ce
 80001c6:	fb01 f202 	mul.w	r2, r1, r2
 80001ca:	1a9a      	subs	r2, r3, r2
 80001cc:	4613      	mov	r3, r2
 80001ce:	80bb      	strh	r3, [r7, #4]
	          uint16_t duty;

	          if (phase <= MAX_DUTY)
 80001d0:	88bb      	ldrh	r3, [r7, #4]
 80001d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001d6:	d202      	bcs.n	80001de <main+0x92>
	              duty = phase;
 80001d8:	88bb      	ldrh	r3, [r7, #4]
 80001da:	80fb      	strh	r3, [r7, #6]
 80001dc:	e004      	b.n	80001e8 <main+0x9c>
	          else
	              duty = 2 * MAX_DUTY - phase;
 80001de:	88bb      	ldrh	r3, [r7, #4]
 80001e0:	f5c3 63f9 	rsb	r3, r3, #1992	; 0x7c8
 80001e4:	3306      	adds	r3, #6
 80001e6:	80fb      	strh	r3, [r7, #6]

	          // Apply to corresponding PWM channel
	          switch (i)
 80001e8:	68bb      	ldr	r3, [r7, #8]
 80001ea:	2b04      	cmp	r3, #4
 80001ec:	d825      	bhi.n	800023a <main+0xee>
 80001ee:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <main+0xa8>)
 80001f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f4:	08000209 	.word	0x08000209
 80001f8:	08000213 	.word	0x08000213
 80001fc:	0800021d 	.word	0x0800021d
 8000200:	08000227 	.word	0x08000227
 8000204:	08000231 	.word	0x08000231
	          {
	              case 0: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, duty); break; // PA0
 8000208:	4b19      	ldr	r3, [pc, #100]	; (8000270 <main+0x124>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	88fa      	ldrh	r2, [r7, #6]
 800020e:	635a      	str	r2, [r3, #52]	; 0x34
 8000210:	e013      	b.n	800023a <main+0xee>
	              case 1: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, duty); break; // PA1
 8000212:	4b17      	ldr	r3, [pc, #92]	; (8000270 <main+0x124>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	88fa      	ldrh	r2, [r7, #6]
 8000218:	639a      	str	r2, [r3, #56]	; 0x38
 800021a:	e00e      	b.n	800023a <main+0xee>
	              case 2: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, duty); break; // PA2
 800021c:	4b14      	ldr	r3, [pc, #80]	; (8000270 <main+0x124>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	88fa      	ldrh	r2, [r7, #6]
 8000222:	63da      	str	r2, [r3, #60]	; 0x3c
 8000224:	e009      	b.n	800023a <main+0xee>
	              case 3: __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, duty); break; // PA3
 8000226:	4b12      	ldr	r3, [pc, #72]	; (8000270 <main+0x124>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	88fa      	ldrh	r2, [r7, #6]
 800022c:	641a      	str	r2, [r3, #64]	; 0x40
 800022e:	e004      	b.n	800023a <main+0xee>
	              case 4: __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty); break; // PA6
 8000230:	4b10      	ldr	r3, [pc, #64]	; (8000274 <main+0x128>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	88fa      	ldrh	r2, [r7, #6]
 8000236:	635a      	str	r2, [r3, #52]	; 0x34
 8000238:	bf00      	nop
	  for (int i = 0; i < NUM_LEDS; i++)
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	3301      	adds	r3, #1
 800023e:	60bb      	str	r3, [r7, #8]
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	2b04      	cmp	r3, #4
 8000244:	ddb0      	ble.n	80001a8 <main+0x5c>
	          }
	      }

	      fade_counter = (fade_counter + 1) % (2 * MAX_DUTY); // Loop the counter
 8000246:	89fb      	ldrh	r3, [r7, #14]
 8000248:	3301      	adds	r3, #1
 800024a:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <main+0x12c>)
 800024c:	fb82 1203 	smull	r1, r2, r2, r3
 8000250:	441a      	add	r2, r3
 8000252:	1291      	asrs	r1, r2, #10
 8000254:	17da      	asrs	r2, r3, #31
 8000256:	1a8a      	subs	r2, r1, r2
 8000258:	f240 71ce 	movw	r1, #1998	; 0x7ce
 800025c:	fb01 f202 	mul.w	r2, r1, r2
 8000260:	1a9a      	subs	r2, r3, r2
 8000262:	4613      	mov	r3, r2
 8000264:	81fb      	strh	r3, [r7, #14]
	      HAL_Delay(STEP_DELAY_MS); // Controls wave speed
 8000266:	2002      	movs	r0, #2
 8000268:	f000 fc68 	bl	8000b3c <HAL_Delay>
	  for (int i = 0; i < NUM_LEDS; i++)
 800026c:	e799      	b.n	80001a2 <main+0x56>
 800026e:	bf00      	nop
 8000270:	20000280 	.word	0x20000280
 8000274:	20000198 	.word	0x20000198
 8000278:	83340521 	.word	0x83340521

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b094      	sub	sp, #80	; 0x50
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f008 fbb6 	bl	80089fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	f107 0314 	add.w	r3, r7, #20
 8000294:	2200      	movs	r2, #0
 8000296:	601a      	str	r2, [r3, #0]
 8000298:	605a      	str	r2, [r3, #4]
 800029a:	609a      	str	r2, [r3, #8]
 800029c:	60da      	str	r2, [r3, #12]
 800029e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a0:	1d3b      	adds	r3, r7, #4
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
 80002a6:	605a      	str	r2, [r3, #4]
 80002a8:	609a      	str	r2, [r3, #8]
 80002aa:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80002ac:	2309      	movs	r3, #9
 80002ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	2302      	movs	r3, #2
 80002c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 fb72 	bl	80029c0 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002e2:	f000 fa23 	bl	800072c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ea:	2302      	movs	r3, #2
 80002ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	2101      	movs	r1, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fddc 	bl	8002ec0 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800030e:	f000 fa0d 	bl	800072c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USB;
 8000312:	2311      	movs	r3, #17
 8000314:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800031a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800031c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000320:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4618      	mov	r0, r3
 8000326:	f002 ff67 	bl	80031f8 <HAL_RCCEx_PeriphCLKConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000330:	f000 f9fc 	bl	800072c <Error_Handler>
  }
}
 8000334:	bf00      	nop
 8000336:	3750      	adds	r7, #80	; 0x50
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}

0800033c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2100      	movs	r1, #0
 8000346:	460a      	mov	r2, r1
 8000348:	801a      	strh	r2, [r3, #0]
 800034a:	460a      	mov	r2, r1
 800034c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800034e:	2300      	movs	r3, #0
 8000350:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000352:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <MX_RTC_Init+0x8c>)
 8000354:	4a1d      	ldr	r2, [pc, #116]	; (80003cc <MX_RTC_Init+0x90>)
 8000356:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000358:	4b1b      	ldr	r3, [pc, #108]	; (80003c8 <MX_RTC_Init+0x8c>)
 800035a:	f04f 32ff 	mov.w	r2, #4294967295
 800035e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000360:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <MX_RTC_Init+0x8c>)
 8000362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000366:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000368:	4817      	ldr	r0, [pc, #92]	; (80003c8 <MX_RTC_Init+0x8c>)
 800036a:	f003 f8b7 	bl	80034dc <HAL_RTC_Init>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000374:	f000 f9da 	bl	800072c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000378:	2300      	movs	r3, #0
 800037a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800037c:	2300      	movs	r3, #0
 800037e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000380:	2300      	movs	r3, #0
 8000382:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000384:	1d3b      	adds	r3, r7, #4
 8000386:	2201      	movs	r2, #1
 8000388:	4619      	mov	r1, r3
 800038a:	480f      	ldr	r0, [pc, #60]	; (80003c8 <MX_RTC_Init+0x8c>)
 800038c:	f003 f93c 	bl	8003608 <HAL_RTC_SetTime>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000396:	f000 f9c9 	bl	800072c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800039a:	2301      	movs	r3, #1
 800039c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800039e:	2301      	movs	r3, #1
 80003a0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80003aa:	463b      	mov	r3, r7
 80003ac:	2201      	movs	r2, #1
 80003ae:	4619      	mov	r1, r3
 80003b0:	4805      	ldr	r0, [pc, #20]	; (80003c8 <MX_RTC_Init+0x8c>)
 80003b2:	f003 f9c1 	bl	8003738 <HAL_RTC_SetDate>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80003bc:	f000 f9b6 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80003c0:	bf00      	nop
 80003c2:	3708      	adds	r7, #8
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000224 	.word	0x20000224
 80003cc:	40002800 	.word	0x40002800

080003d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b086      	sub	sp, #24
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d6:	f107 0308 	add.w	r3, r7, #8
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]
 80003e0:	609a      	str	r2, [r3, #8]
 80003e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e4:	463b      	mov	r3, r7
 80003e6:	2200      	movs	r2, #0
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003ec:	4b1e      	ldr	r3, [pc, #120]	; (8000468 <MX_TIM1_Init+0x98>)
 80003ee:	4a1f      	ldr	r2, [pc, #124]	; (800046c <MX_TIM1_Init+0x9c>)
 80003f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003f2:	4b1d      	ldr	r3, [pc, #116]	; (8000468 <MX_TIM1_Init+0x98>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003f8:	4b1b      	ldr	r3, [pc, #108]	; (8000468 <MX_TIM1_Init+0x98>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80003fe:	4b1a      	ldr	r3, [pc, #104]	; (8000468 <MX_TIM1_Init+0x98>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000404:	4b18      	ldr	r3, [pc, #96]	; (8000468 <MX_TIM1_Init+0x98>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800040a:	4b17      	ldr	r3, [pc, #92]	; (8000468 <MX_TIM1_Init+0x98>)
 800040c:	2200      	movs	r2, #0
 800040e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000410:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_TIM1_Init+0x98>)
 8000412:	2200      	movs	r2, #0
 8000414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000416:	4814      	ldr	r0, [pc, #80]	; (8000468 <MX_TIM1_Init+0x98>)
 8000418:	f003 fbee 	bl	8003bf8 <HAL_TIM_Base_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 8000422:	f000 f983 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000426:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800042a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800042c:	f107 0308 	add.w	r3, r7, #8
 8000430:	4619      	mov	r1, r3
 8000432:	480d      	ldr	r0, [pc, #52]	; (8000468 <MX_TIM1_Init+0x98>)
 8000434:	f003 fdde 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 800043e:	f000 f975 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000442:	2300      	movs	r3, #0
 8000444:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044a:	463b      	mov	r3, r7
 800044c:	4619      	mov	r1, r3
 800044e:	4806      	ldr	r0, [pc, #24]	; (8000468 <MX_TIM1_Init+0x98>)
 8000450:	f004 f92c 	bl	80046ac <HAL_TIMEx_MasterConfigSynchronization>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800045a:	f000 f967 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	3718      	adds	r7, #24
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	20000238 	.word	0x20000238
 800046c:	40012c00 	.word	0x40012c00

08000470 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08e      	sub	sp, #56	; 0x38
 8000474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800047a:	2200      	movs	r2, #0
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	605a      	str	r2, [r3, #4]
 8000480:	609a      	str	r2, [r3, #8]
 8000482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000484:	f107 0320 	add.w	r3, r7, #32
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
 800049c:	615a      	str	r2, [r3, #20]
 800049e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004a0:	4b3e      	ldr	r3, [pc, #248]	; (800059c <MX_TIM2_Init+0x12c>)
 80004a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 80004a8:	4b3c      	ldr	r3, [pc, #240]	; (800059c <MX_TIM2_Init+0x12c>)
 80004aa:	222f      	movs	r2, #47	; 0x2f
 80004ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ae:	4b3b      	ldr	r3, [pc, #236]	; (800059c <MX_TIM2_Init+0x12c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80004b4:	4b39      	ldr	r3, [pc, #228]	; (800059c <MX_TIM2_Init+0x12c>)
 80004b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004bc:	4b37      	ldr	r3, [pc, #220]	; (800059c <MX_TIM2_Init+0x12c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004c2:	4b36      	ldr	r3, [pc, #216]	; (800059c <MX_TIM2_Init+0x12c>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004c8:	4834      	ldr	r0, [pc, #208]	; (800059c <MX_TIM2_Init+0x12c>)
 80004ca:	f003 fb95 	bl	8003bf8 <HAL_TIM_Base_Init>
 80004ce:	4603      	mov	r3, r0
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80004d4:	f000 f92a 	bl	800072c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80004de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e2:	4619      	mov	r1, r3
 80004e4:	482d      	ldr	r0, [pc, #180]	; (800059c <MX_TIM2_Init+0x12c>)
 80004e6:	f003 fd85 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80004f0:	f000 f91c 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80004f4:	4829      	ldr	r0, [pc, #164]	; (800059c <MX_TIM2_Init+0x12c>)
 80004f6:	f003 fbce 	bl	8003c96 <HAL_TIM_PWM_Init>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000500:	f000 f914 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000504:	2300      	movs	r3, #0
 8000506:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000508:	2300      	movs	r3, #0
 800050a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800050c:	f107 0320 	add.w	r3, r7, #32
 8000510:	4619      	mov	r1, r3
 8000512:	4822      	ldr	r0, [pc, #136]	; (800059c <MX_TIM2_Init+0x12c>)
 8000514:	f004 f8ca 	bl	80046ac <HAL_TIMEx_MasterConfigSynchronization>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800051e:	f000 f905 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000522:	2360      	movs	r3, #96	; 0x60
 8000524:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000526:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800052a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	4619      	mov	r1, r3
 800053a:	4818      	ldr	r0, [pc, #96]	; (800059c <MX_TIM2_Init+0x12c>)
 800053c:	f003 fc9c 	bl	8003e78 <HAL_TIM_PWM_ConfigChannel>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000546:	f000 f8f1 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	2204      	movs	r2, #4
 800054e:	4619      	mov	r1, r3
 8000550:	4812      	ldr	r0, [pc, #72]	; (800059c <MX_TIM2_Init+0x12c>)
 8000552:	f003 fc91 	bl	8003e78 <HAL_TIM_PWM_ConfigChannel>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800055c:	f000 f8e6 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2208      	movs	r2, #8
 8000564:	4619      	mov	r1, r3
 8000566:	480d      	ldr	r0, [pc, #52]	; (800059c <MX_TIM2_Init+0x12c>)
 8000568:	f003 fc86 	bl	8003e78 <HAL_TIM_PWM_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000572:	f000 f8db 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	220c      	movs	r2, #12
 800057a:	4619      	mov	r1, r3
 800057c:	4807      	ldr	r0, [pc, #28]	; (800059c <MX_TIM2_Init+0x12c>)
 800057e:	f003 fc7b 	bl	8003e78 <HAL_TIM_PWM_ConfigChannel>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 8000588:	f000 f8d0 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <MX_TIM2_Init+0x12c>)
 800058e:	f000 f977 	bl	8000880 <HAL_TIM_MspPostInit>

}
 8000592:	bf00      	nop
 8000594:	3738      	adds	r7, #56	; 0x38
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000280 	.word	0x20000280

080005a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a6:	f107 0320 	add.w	r3, r7, #32
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b0:	1d3b      	adds	r3, r7, #4
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c2:	4b22      	ldr	r3, [pc, #136]	; (800064c <MX_TIM3_Init+0xac>)
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <MX_TIM3_Init+0xb0>)
 80005c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 80005c8:	4b20      	ldr	r3, [pc, #128]	; (800064c <MX_TIM3_Init+0xac>)
 80005ca:	222f      	movs	r2, #47	; 0x2f
 80005cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_TIM3_Init+0xac>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <MX_TIM3_Init+0xac>)
 80005d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_TIM3_Init+0xac>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <MX_TIM3_Init+0xac>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005e8:	4818      	ldr	r0, [pc, #96]	; (800064c <MX_TIM3_Init+0xac>)
 80005ea:	f003 fb54 	bl	8003c96 <HAL_TIM_PWM_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80005f4:	f000 f89a 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f8:	2300      	movs	r3, #0
 80005fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005fc:	2300      	movs	r3, #0
 80005fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4619      	mov	r1, r3
 8000606:	4811      	ldr	r0, [pc, #68]	; (800064c <MX_TIM3_Init+0xac>)
 8000608:	f004 f850 	bl	80046ac <HAL_TIMEx_MasterConfigSynchronization>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000612:	f000 f88b 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000616:	2360      	movs	r3, #96	; 0x60
 8000618:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800061a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800061e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	4619      	mov	r1, r3
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <MX_TIM3_Init+0xac>)
 8000630:	f003 fc22 	bl	8003e78 <HAL_TIM_PWM_ConfigChannel>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800063a:	f000 f877 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800063e:	4803      	ldr	r0, [pc, #12]	; (800064c <MX_TIM3_Init+0xac>)
 8000640:	f000 f91e 	bl	8000880 <HAL_TIM_MspPostInit>

}
 8000644:	bf00      	nop
 8000646:	3728      	adds	r7, #40	; 0x28
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000198 	.word	0x20000198
 8000650:	40000400 	.word	0x40000400

08000654 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800065a:	4a12      	ldr	r2, [pc, #72]	; (80006a4 <MX_USART1_UART_Init+0x50>)
 800065c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b08      	ldr	r3, [pc, #32]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000684:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800068a:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_USART1_UART_Init+0x4c>)
 800068c:	f004 f86c 	bl	8004768 <HAL_UART_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000696:	f000 f849 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200001e0 	.word	0x200001e0
 80006a4:	40013800 	.word	0x40013800

080006a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b089      	sub	sp, #36	; 0x24
 80006ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ae:	f107 0310 	add.w	r3, r7, #16
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006bc:	4b1a      	ldr	r3, [pc, #104]	; (8000728 <MX_GPIO_Init+0x80>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <MX_GPIO_Init+0x80>)
 80006c2:	f043 0310 	orr.w	r3, r3, #16
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <MX_GPIO_Init+0x80>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f003 0310 	and.w	r3, r3, #16
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d4:	4b14      	ldr	r3, [pc, #80]	; (8000728 <MX_GPIO_Init+0x80>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a13      	ldr	r2, [pc, #76]	; (8000728 <MX_GPIO_Init+0x80>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_GPIO_Init+0x80>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0320 	and.w	r3, r3, #32
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_GPIO_Init+0x80>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <MX_GPIO_Init+0x80>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6193      	str	r3, [r2, #24]
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_GPIO_Init+0x80>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_GPIO_Init+0x80>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <MX_GPIO_Init+0x80>)
 800070a:	f043 0308 	orr.w	r3, r3, #8
 800070e:	6193      	str	r3, [r2, #24]
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <MX_GPIO_Init+0x80>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	f003 0308 	and.w	r3, r3, #8
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	683b      	ldr	r3, [r7, #0]
  //                       |GPIO_PIN_7;
  //GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  //GPIO_InitStruct.Pull = GPIO_NOPULL;
  //HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}
 800071c:	bf00      	nop
 800071e:	3724      	adds	r7, #36	; 0x24
 8000720:	46bd      	mov	sp, r7
 8000722:	bc80      	pop	{r7}
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr

08000738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <HAL_MspInit+0x5c>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	4a14      	ldr	r2, [pc, #80]	; (8000794 <HAL_MspInit+0x5c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6193      	str	r3, [r2, #24]
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <HAL_MspInit+0x5c>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x5c>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_MspInit+0x5c>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x5c>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_MspInit+0x60>)
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	4a04      	ldr	r2, [pc, #16]	; (8000798 <HAL_MspInit+0x60>)
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000
 8000798:	40010000 	.word	0x40010000

0800079c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0b      	ldr	r2, [pc, #44]	; (80007d8 <HAL_RTC_MspInit+0x3c>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d110      	bne.n	80007d0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007ae:	f002 f8fb 	bl	80029a8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80007b2:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <HAL_RTC_MspInit+0x40>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	4a09      	ldr	r2, [pc, #36]	; (80007dc <HAL_RTC_MspInit+0x40>)
 80007b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80007bc:	61d3      	str	r3, [r2, #28]
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <HAL_RTC_MspInit+0x40>)
 80007c0:	69db      	ldr	r3, [r3, #28]
 80007c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <HAL_RTC_MspInit+0x44>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40002800 	.word	0x40002800
 80007dc:	40021000 	.word	0x40021000
 80007e0:	4242043c 	.word	0x4242043c

080007e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a12      	ldr	r2, [pc, #72]	; (800083c <HAL_TIM_Base_MspInit+0x58>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d10c      	bne.n	8000810 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007f6:	4b12      	ldr	r3, [pc, #72]	; (8000840 <HAL_TIM_Base_MspInit+0x5c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <HAL_TIM_Base_MspInit+0x5c>)
 80007fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000800:	6193      	str	r3, [r2, #24]
 8000802:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <HAL_TIM_Base_MspInit+0x5c>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800080e:	e010      	b.n	8000832 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000818:	d10b      	bne.n	8000832 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	; (8000840 <HAL_TIM_Base_MspInit+0x5c>)
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <HAL_TIM_Base_MspInit+0x5c>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	61d3      	str	r3, [r2, #28]
 8000826:	4b06      	ldr	r3, [pc, #24]	; (8000840 <HAL_TIM_Base_MspInit+0x5c>)
 8000828:	69db      	ldr	r3, [r3, #28]
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40012c00 	.word	0x40012c00
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a09      	ldr	r2, [pc, #36]	; (8000878 <HAL_TIM_PWM_MspInit+0x34>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d10b      	bne.n	800086e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <HAL_TIM_PWM_MspInit+0x38>)
 8000858:	69db      	ldr	r3, [r3, #28]
 800085a:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_TIM_PWM_MspInit+0x38>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	61d3      	str	r3, [r2, #28]
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <HAL_TIM_PWM_MspInit+0x38>)
 8000864:	69db      	ldr	r3, [r3, #28]
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40000400 	.word	0x40000400
 800087c:	40021000 	.word	0x40021000

08000880 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800089e:	d118      	bne.n	80008d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_TIM_MspPostInit+0x94>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <HAL_TIM_MspPostInit+0x94>)
 80008a6:	f043 0304 	orr.w	r3, r3, #4
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_TIM_MspPostInit+0x94>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80008b8:	230f      	movs	r3, #15
 80008ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	4619      	mov	r1, r3
 80008ca:	4813      	ldr	r0, [pc, #76]	; (8000918 <HAL_TIM_MspPostInit+0x98>)
 80008cc:	f000 fa66 	bl	8000d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008d0:	e01c      	b.n	800090c <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a11      	ldr	r2, [pc, #68]	; (800091c <HAL_TIM_MspPostInit+0x9c>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d117      	bne.n	800090c <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <HAL_TIM_MspPostInit+0x94>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a0c      	ldr	r2, [pc, #48]	; (8000914 <HAL_TIM_MspPostInit+0x94>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b0a      	ldr	r3, [pc, #40]	; (8000914 <HAL_TIM_MspPostInit+0x94>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80008f4:	2340      	movs	r3, #64	; 0x40
 80008f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	f107 0310 	add.w	r3, r7, #16
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <HAL_TIM_MspPostInit+0x98>)
 8000908:	f000 fa48 	bl	8000d9c <HAL_GPIO_Init>
}
 800090c:	bf00      	nop
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800
 800091c:	40000400 	.word	0x40000400

08000920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b088      	sub	sp, #32
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <HAL_UART_MspInit+0x8c>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d131      	bne.n	80009a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000940:	4b1b      	ldr	r3, [pc, #108]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a1a      	ldr	r2, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000958:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	4a14      	ldr	r2, [pc, #80]	; (80009b0 <HAL_UART_MspInit+0x90>)
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6193      	str	r3, [r2, #24]
 8000964:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <HAL_UART_MspInit+0x90>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f003 0304 	and.w	r3, r3, #4
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <HAL_UART_MspInit+0x94>)
 8000986:	f000 fa09 	bl	8000d9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800098a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800098e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000998:	f107 0310 	add.w	r3, r7, #16
 800099c:	4619      	mov	r1, r3
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_UART_MspInit+0x94>)
 80009a0:	f000 f9fc 	bl	8000d9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009a4:	bf00      	nop
 80009a6:	3720      	adds	r7, #32
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40010800 	.word	0x40010800

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <HardFault_Handler+0x4>

080009ca <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <BusFault_Handler+0x4>

080009d6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <UsageFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f87e 	bl	8000b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000a10:	4802      	ldr	r0, [pc, #8]	; (8000a1c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000a12:	f000 fc4e 	bl	80012b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000790 	.word	0x20000790

08000a20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a52:	f7ff ffe5 	bl	8000a20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a56:	f007 ffad 	bl	80089b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a5a:	f7ff fb77 	bl	800014c <main>
  bx lr
 8000a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 8000a68:	08008ab4 	.word	0x08008ab4
  ldr r2, =_sbss
 8000a6c:	20000164 	.word	0x20000164
  ldr r4, =_ebss
 8000a70:	20000a7c 	.word	0x20000a7c

08000a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC1_2_IRQHandler>
	...

08000a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a7c:	4b08      	ldr	r3, [pc, #32]	; (8000aa0 <HAL_Init+0x28>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a07      	ldr	r2, [pc, #28]	; (8000aa0 <HAL_Init+0x28>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a88:	2003      	movs	r0, #3
 8000a8a:	f000 f945 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f000 f808 	bl	8000aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a94:	f7ff fe50 	bl	8000738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40022000 	.word	0x40022000

08000aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x54>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_InitTick+0x58>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f95d 	bl	8000d82 <HAL_SYSTICK_Config>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00e      	b.n	8000af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2b0f      	cmp	r3, #15
 8000ad6:	d80a      	bhi.n	8000aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f000 f925 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae4:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <HAL_InitTick+0x5c>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
 8000aec:	e000      	b.n	8000af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000000 	.word	0x20000000
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20000004 	.word	0x20000004

08000b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_IncTick+0x1c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_IncTick+0x20>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a03      	ldr	r2, [pc, #12]	; (8000b24 <HAL_IncTick+0x20>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	20000008 	.word	0x20000008
 8000b24:	200002c8 	.word	0x200002c8

08000b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <HAL_GetTick+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	200002c8 	.word	0x200002c8

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff fff0 	bl	8000b28 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_Delay+0x40>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffe0 	bl	8000b28 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000008 	.word	0x20000008

08000b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b96:	68ba      	ldr	r2, [r7, #8]
 8000b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	60d3      	str	r3, [r2, #12]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <__NVIC_GetPriorityGrouping+0x18>)
 8000bce:	68db      	ldr	r3, [r3, #12]
 8000bd0:	0a1b      	lsrs	r3, r3, #8
 8000bd2:	f003 0307 	and.w	r3, r3, #7
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	db0b      	blt.n	8000c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 021f 	and.w	r2, r3, #31
 8000bfc:	4906      	ldr	r1, [pc, #24]	; (8000c18 <__NVIC_EnableIRQ+0x34>)
 8000bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c02:	095b      	lsrs	r3, r3, #5
 8000c04:	2001      	movs	r0, #1
 8000c06:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c0e:	bf00      	nop
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	; (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	; (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	; 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	; 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf8:	f7ff ff90 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff2d 	bl	8000b80 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff42 	bl	8000bc8 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff90 	bl	8000c70 <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5f 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff35 	bl	8000be4 <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa2 	bl	8000cd4 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b08b      	sub	sp, #44	; 0x2c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000daa:	2300      	movs	r3, #0
 8000dac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dae:	e127      	b.n	8001000 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000db0:	2201      	movs	r2, #1
 8000db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	69fa      	ldr	r2, [r7, #28]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	f040 8116 	bne.w	8000ffa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b12      	cmp	r3, #18
 8000dd4:	d034      	beq.n	8000e40 <HAL_GPIO_Init+0xa4>
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d80d      	bhi.n	8000df6 <HAL_GPIO_Init+0x5a>
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d02b      	beq.n	8000e36 <HAL_GPIO_Init+0x9a>
 8000dde:	2b02      	cmp	r3, #2
 8000de0:	d804      	bhi.n	8000dec <HAL_GPIO_Init+0x50>
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d031      	beq.n	8000e4a <HAL_GPIO_Init+0xae>
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d01c      	beq.n	8000e24 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dea:	e048      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d043      	beq.n	8000e78 <HAL_GPIO_Init+0xdc>
 8000df0:	2b11      	cmp	r3, #17
 8000df2:	d01b      	beq.n	8000e2c <HAL_GPIO_Init+0x90>
          break;
 8000df4:	e043      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000df6:	4a89      	ldr	r2, [pc, #548]	; (800101c <HAL_GPIO_Init+0x280>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d026      	beq.n	8000e4a <HAL_GPIO_Init+0xae>
 8000dfc:	4a87      	ldr	r2, [pc, #540]	; (800101c <HAL_GPIO_Init+0x280>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d806      	bhi.n	8000e10 <HAL_GPIO_Init+0x74>
 8000e02:	4a87      	ldr	r2, [pc, #540]	; (8001020 <HAL_GPIO_Init+0x284>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d020      	beq.n	8000e4a <HAL_GPIO_Init+0xae>
 8000e08:	4a86      	ldr	r2, [pc, #536]	; (8001024 <HAL_GPIO_Init+0x288>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d01d      	beq.n	8000e4a <HAL_GPIO_Init+0xae>
          break;
 8000e0e:	e036      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e10:	4a85      	ldr	r2, [pc, #532]	; (8001028 <HAL_GPIO_Init+0x28c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d019      	beq.n	8000e4a <HAL_GPIO_Init+0xae>
 8000e16:	4a85      	ldr	r2, [pc, #532]	; (800102c <HAL_GPIO_Init+0x290>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d016      	beq.n	8000e4a <HAL_GPIO_Init+0xae>
 8000e1c:	4a84      	ldr	r2, [pc, #528]	; (8001030 <HAL_GPIO_Init+0x294>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d013      	beq.n	8000e4a <HAL_GPIO_Init+0xae>
          break;
 8000e22:	e02c      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	623b      	str	r3, [r7, #32]
          break;
 8000e2a:	e028      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	3304      	adds	r3, #4
 8000e32:	623b      	str	r3, [r7, #32]
          break;
 8000e34:	e023      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e01e      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	330c      	adds	r3, #12
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	e019      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e52:	2304      	movs	r3, #4
 8000e54:	623b      	str	r3, [r7, #32]
          break;
 8000e56:	e012      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d105      	bne.n	8000e6c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e60:	2308      	movs	r3, #8
 8000e62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	611a      	str	r2, [r3, #16]
          break;
 8000e6a:	e008      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69fa      	ldr	r2, [r7, #28]
 8000e74:	615a      	str	r2, [r3, #20]
          break;
 8000e76:	e002      	b.n	8000e7e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	623b      	str	r3, [r7, #32]
          break;
 8000e7c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	2bff      	cmp	r3, #255	; 0xff
 8000e82:	d801      	bhi.n	8000e88 <HAL_GPIO_Init+0xec>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	e001      	b.n	8000e8c <HAL_GPIO_Init+0xf0>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3304      	adds	r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e8e:	69bb      	ldr	r3, [r7, #24]
 8000e90:	2bff      	cmp	r3, #255	; 0xff
 8000e92:	d802      	bhi.n	8000e9a <HAL_GPIO_Init+0xfe>
 8000e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	e002      	b.n	8000ea0 <HAL_GPIO_Init+0x104>
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e9c:	3b08      	subs	r3, #8
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	210f      	movs	r1, #15
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43db      	mvns	r3, r3
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	6a39      	ldr	r1, [r7, #32]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 8096 	beq.w	8000ffa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ece:	4b59      	ldr	r3, [pc, #356]	; (8001034 <HAL_GPIO_Init+0x298>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	4a58      	ldr	r2, [pc, #352]	; (8001034 <HAL_GPIO_Init+0x298>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6193      	str	r3, [r2, #24]
 8000eda:	4b56      	ldr	r3, [pc, #344]	; (8001034 <HAL_GPIO_Init+0x298>)
 8000edc:	699b      	ldr	r3, [r3, #24]
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ee6:	4a54      	ldr	r2, [pc, #336]	; (8001038 <HAL_GPIO_Init+0x29c>)
 8000ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	3302      	adds	r3, #2
 8000eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef6:	f003 0303 	and.w	r3, r3, #3
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	220f      	movs	r2, #15
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4013      	ands	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <HAL_GPIO_Init+0x2a0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d013      	beq.n	8000f3a <HAL_GPIO_Init+0x19e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4a      	ldr	r2, [pc, #296]	; (8001040 <HAL_GPIO_Init+0x2a4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d00d      	beq.n	8000f36 <HAL_GPIO_Init+0x19a>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a49      	ldr	r2, [pc, #292]	; (8001044 <HAL_GPIO_Init+0x2a8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x196>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a48      	ldr	r2, [pc, #288]	; (8001048 <HAL_GPIO_Init+0x2ac>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d101      	bne.n	8000f2e <HAL_GPIO_Init+0x192>
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x1a0>
 8000f2e:	2304      	movs	r3, #4
 8000f30:	e004      	b.n	8000f3c <HAL_GPIO_Init+0x1a0>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_Init+0x1a0>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x1a0>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f3e:	f002 0203 	and.w	r2, r2, #3
 8000f42:	0092      	lsls	r2, r2, #2
 8000f44:	4093      	lsls	r3, r2
 8000f46:	68fa      	ldr	r2, [r7, #12]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f4c:	493a      	ldr	r1, [pc, #232]	; (8001038 <HAL_GPIO_Init+0x29c>)
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f66:	4b39      	ldr	r3, [pc, #228]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4938      	ldr	r1, [pc, #224]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
 8000f72:	e006      	b.n	8000f82 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	4933      	ldr	r1, [pc, #204]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d006      	beq.n	8000f9c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f8e:	4b2f      	ldr	r3, [pc, #188]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000f90:	685a      	ldr	r2, [r3, #4]
 8000f92:	492e      	ldr	r1, [pc, #184]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	604b      	str	r3, [r1, #4]
 8000f9a:	e006      	b.n	8000faa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	4929      	ldr	r1, [pc, #164]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d006      	beq.n	8000fc4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fb6:	4b25      	ldr	r3, [pc, #148]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000fb8:	689a      	ldr	r2, [r3, #8]
 8000fba:	4924      	ldr	r1, [pc, #144]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	608b      	str	r3, [r1, #8]
 8000fc2:	e006      	b.n	8000fd2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fc4:	4b21      	ldr	r3, [pc, #132]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	491f      	ldr	r1, [pc, #124]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d006      	beq.n	8000fec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000fe0:	68da      	ldr	r2, [r3, #12]
 8000fe2:	491a      	ldr	r1, [pc, #104]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60cb      	str	r3, [r1, #12]
 8000fea:	e006      	b.n	8000ffa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fec:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	4915      	ldr	r1, [pc, #84]	; (800104c <HAL_GPIO_Init+0x2b0>)
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	fa22 f303 	lsr.w	r3, r2, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	f47f aed0 	bne.w	8000db0 <HAL_GPIO_Init+0x14>
  }
}
 8001010:	bf00      	nop
 8001012:	372c      	adds	r7, #44	; 0x2c
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	10210000 	.word	0x10210000
 8001020:	10110000 	.word	0x10110000
 8001024:	10120000 	.word	0x10120000
 8001028:	10310000 	.word	0x10310000
 800102c:	10320000 	.word	0x10320000
 8001030:	10220000 	.word	0x10220000
 8001034:	40021000 	.word	0x40021000
 8001038:	40010000 	.word	0x40010000
 800103c:	40010800 	.word	0x40010800
 8001040:	40010c00 	.word	0x40010c00
 8001044:	40011000 	.word	0x40011000
 8001048:	40011400 	.word	0x40011400
 800104c:	40010400 	.word	0x40010400

08001050 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001052:	b08b      	sub	sp, #44	; 0x2c
 8001054:	af06      	add	r7, sp, #24
 8001056:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e0fd      	b.n	800125e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d106      	bne.n	800107c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f007 fa16 	bl	80084a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f003 fc6f 	bl	800496c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	603b      	str	r3, [r7, #0]
 8001094:	687e      	ldr	r6, [r7, #4]
 8001096:	466d      	mov	r5, sp
 8001098:	f106 0410 	add.w	r4, r6, #16
 800109c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	602b      	str	r3, [r5, #0]
 80010a4:	1d33      	adds	r3, r6, #4
 80010a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a8:	6838      	ldr	r0, [r7, #0]
 80010aa:	f003 fc39 	bl	8004920 <USB_CoreInit>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d005      	beq.n	80010c0 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2202      	movs	r2, #2
 80010b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0ce      	b.n	800125e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f003 fc6a 	bl	80049a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	73fb      	strb	r3, [r7, #15]
 80010d0:	e04c      	b.n	800116c <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	6879      	ldr	r1, [r7, #4]
 80010d6:	1c5a      	adds	r2, r3, #1
 80010d8:	4613      	mov	r3, r2
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	4413      	add	r3, r2
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	440b      	add	r3, r1
 80010e2:	3301      	adds	r3, #1
 80010e4:	2201      	movs	r2, #1
 80010e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	1c5a      	adds	r2, r3, #1
 80010ee:	4613      	mov	r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	4413      	add	r3, r2
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	440b      	add	r3, r1
 80010f8:	7bfa      	ldrb	r2, [r7, #15]
 80010fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	b298      	uxth	r0, r3
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	4613      	mov	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	440b      	add	r3, r1
 800110e:	3336      	adds	r3, #54	; 0x36
 8001110:	4602      	mov	r2, r0
 8001112:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	440b      	add	r3, r1
 8001124:	3303      	adds	r3, #3
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	440b      	add	r3, r1
 8001138:	3338      	adds	r3, #56	; 0x38
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	440b      	add	r3, r1
 800114c:	333c      	adds	r3, #60	; 0x3c
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	440b      	add	r3, r1
 8001160:	3340      	adds	r3, #64	; 0x40
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001166:	7bfb      	ldrb	r3, [r7, #15]
 8001168:	3301      	adds	r3, #1
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	d3ad      	bcc.n	80010d2 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001176:	2300      	movs	r3, #0
 8001178:	73fb      	strb	r3, [r7, #15]
 800117a:	e044      	b.n	8001206 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800117c:	7bfa      	ldrb	r2, [r7, #15]
 800117e:	6879      	ldr	r1, [r7, #4]
 8001180:	4613      	mov	r3, r2
 8001182:	009b      	lsls	r3, r3, #2
 8001184:	4413      	add	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	440b      	add	r3, r1
 800118a:	f203 1369 	addw	r3, r3, #361	; 0x169
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	6879      	ldr	r1, [r7, #4]
 8001196:	4613      	mov	r3, r2
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	4413      	add	r3, r2
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	440b      	add	r3, r1
 80011a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80011a4:	7bfa      	ldrb	r2, [r7, #15]
 80011a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	440b      	add	r3, r1
 80011b6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	6879      	ldr	r1, [r7, #4]
 80011c2:	4613      	mov	r3, r2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	4413      	add	r3, r2
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	440b      	add	r3, r1
 80011cc:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011d4:	7bfa      	ldrb	r2, [r7, #15]
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	4613      	mov	r3, r2
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	4413      	add	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	440b      	add	r3, r1
 80011e2:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	440b      	add	r3, r1
 80011f8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	3301      	adds	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
 8001206:	7bfa      	ldrb	r2, [r7, #15]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	d3b5      	bcc.n	800117c <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	603b      	str	r3, [r7, #0]
 8001216:	687e      	ldr	r6, [r7, #4]
 8001218:	466d      	mov	r5, sp
 800121a:	f106 0410 	add.w	r4, r6, #16
 800121e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001220:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	602b      	str	r3, [r5, #0]
 8001226:	1d33      	adds	r3, r6, #4
 8001228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f003 fbc4 	bl	80049b8 <USB_DevInit>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2202      	movs	r2, #2
 800123a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e00d      	b.n	800125e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f005 fd35 	bl	8006cc6 <USB_DevDisconnect>

  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001266 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <HAL_PCD_Start+0x16>
 8001278:	2302      	movs	r3, #2
 800127a:	e016      	b.n	80012aa <HAL_PCD_Start+0x44>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2201      	movs	r2, #1
 8001280:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fb59 	bl	8004940 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800128e:	2101      	movs	r1, #1
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f007 fb58 	bl	8008946 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f005 fd09 	bl	8006cb2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b088      	sub	sp, #32
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f005 fd0b 	bl	8006cda <USB_ReadInterrupts>
 80012c4:	4603      	mov	r3, r0
 80012c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012ce:	d102      	bne.n	80012d6 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fb4a 	bl	800196a <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f005 fcfd 	bl	8006cda <USB_ReadInterrupts>
 80012e0:	4603      	mov	r3, r0
 80012e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ea:	d112      	bne.n	8001312 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80012fe:	b292      	uxth	r2, r2
 8001300:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f007 f94a 	bl	800859e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800130a:	2100      	movs	r1, #0
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f000 f925 	bl	800155c <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f005 fcdf 	bl	8006cda <USB_ReadInterrupts>
 800131c:	4603      	mov	r3, r0
 800131e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001326:	d10b      	bne.n	8001340 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001330:	b29a      	uxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800133a:	b292      	uxth	r2, r2
 800133c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f005 fcc8 	bl	8006cda <USB_ReadInterrupts>
 800134a:	4603      	mov	r3, r0
 800134c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001354:	d10b      	bne.n	800136e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800135e:	b29a      	uxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001368:	b292      	uxth	r2, r2
 800136a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f005 fcb1 	bl	8006cda <USB_ReadInterrupts>
 8001378:	4603      	mov	r3, r0
 800137a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001382:	d126      	bne.n	80013d2 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800138c:	b29a      	uxth	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0204 	bic.w	r2, r2, #4
 8001396:	b292      	uxth	r2, r2
 8001398:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0208 	bic.w	r2, r2, #8
 80013ae:	b292      	uxth	r2, r2
 80013b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f007 f92b 	bl	8008610 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013cc:	b292      	uxth	r2, r2
 80013ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f005 fc7f 	bl	8006cda <USB_ReadInterrupts>
 80013dc:	4603      	mov	r3, r0
 80013de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013e6:	f040 8084 	bne.w	80014f2 <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	77fb      	strb	r3, [r7, #31]
 80013ee:	e011      	b.n	8001414 <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	461a      	mov	r2, r3
 80013f6:	7ffb      	ldrb	r3, [r7, #31]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	441a      	add	r2, r3
 80013fc:	7ffb      	ldrb	r3, [r7, #31]
 80013fe:	8812      	ldrh	r2, [r2, #0]
 8001400:	b292      	uxth	r2, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	f107 0120 	add.w	r1, r7, #32
 8001408:	440b      	add	r3, r1
 800140a:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800140e:	7ffb      	ldrb	r3, [r7, #31]
 8001410:	3301      	adds	r3, #1
 8001412:	77fb      	strb	r3, [r7, #31]
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	2b07      	cmp	r3, #7
 8001418:	d9ea      	bls.n	80013f0 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001422:	b29a      	uxth	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f042 0201 	orr.w	r2, r2, #1
 800142c:	b292      	uxth	r2, r2
 800142e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800143a:	b29a      	uxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 0201 	bic.w	r2, r2, #1
 8001444:	b292      	uxth	r2, r2
 8001446:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800144a:	bf00      	nop
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001454:	b29b      	uxth	r3, r3
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f6      	beq.n	800144c <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001466:	b29a      	uxth	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001470:	b292      	uxth	r2, r2
 8001472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	77fb      	strb	r3, [r7, #31]
 800147a:	e010      	b.n	800149e <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800147c:	7ffb      	ldrb	r3, [r7, #31]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6812      	ldr	r2, [r2, #0]
 8001482:	4611      	mov	r1, r2
 8001484:	7ffa      	ldrb	r2, [r7, #31]
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	440a      	add	r2, r1
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	f107 0120 	add.w	r1, r7, #32
 8001490:	440b      	add	r3, r1
 8001492:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001496:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001498:	7ffb      	ldrb	r3, [r7, #31]
 800149a:	3301      	adds	r3, #1
 800149c:	77fb      	strb	r3, [r7, #31]
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b07      	cmp	r3, #7
 80014a2:	d9eb      	bls.n	800147c <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0208 	orr.w	r2, r2, #8
 80014b6:	b292      	uxth	r2, r2
 80014b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ce:	b292      	uxth	r2, r2
 80014d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014dc:	b29a      	uxth	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0204 	orr.w	r2, r2, #4
 80014e6:	b292      	uxth	r2, r2
 80014e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f007 f875 	bl	80085dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f005 fbef 	bl	8006cda <USB_ReadInterrupts>
 80014fc:	4603      	mov	r3, r0
 80014fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001502:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001506:	d10e      	bne.n	8001526 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001510:	b29a      	uxth	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800151a:	b292      	uxth	r2, r2
 800151c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f007 f82e 	bl	8008582 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f005 fbd5 	bl	8006cda <USB_ReadInterrupts>
 8001530:	4603      	mov	r3, r0
 8001532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800153a:	d10b      	bne.n	8001554 <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001544:	b29a      	uxth	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800154e:	b292      	uxth	r2, r2
 8001550:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001554:	bf00      	nop
 8001556:	3720      	adds	r7, #32
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	460b      	mov	r3, r1
 8001566:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_PCD_SetAddress+0x1a>
 8001572:	2302      	movs	r3, #2
 8001574:	e013      	b.n	800159e <HAL_PCD_SetAddress+0x42>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	78fa      	ldrb	r2, [r7, #3]
 8001582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	78fa      	ldrb	r2, [r7, #3]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f005 fb7c 	bl	8006c8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b084      	sub	sp, #16
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
 80015ae:	4608      	mov	r0, r1
 80015b0:	4611      	mov	r1, r2
 80015b2:	461a      	mov	r2, r3
 80015b4:	4603      	mov	r3, r0
 80015b6:	70fb      	strb	r3, [r7, #3]
 80015b8:	460b      	mov	r3, r1
 80015ba:	803b      	strh	r3, [r7, #0]
 80015bc:	4613      	mov	r3, r2
 80015be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	da0e      	bge.n	80015ea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015cc:	78fb      	ldrb	r3, [r7, #3]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	705a      	strb	r2, [r3, #1]
 80015e8:	e00e      	b.n	8001608 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015ea:	78fb      	ldrb	r3, [r7, #3]
 80015ec:	f003 0207 	and.w	r2, r3, #7
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	4413      	add	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	b2da      	uxtb	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001614:	883a      	ldrh	r2, [r7, #0]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	78ba      	ldrb	r2, [r7, #2]
 800161e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	785b      	ldrb	r3, [r3, #1]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d004      	beq.n	8001632 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	b29a      	uxth	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001632:	78bb      	ldrb	r3, [r7, #2]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d102      	bne.n	800163e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2200      	movs	r2, #0
 800163c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_PCD_EP_Open+0xa6>
 8001648:	2302      	movs	r3, #2
 800164a:	e00e      	b.n	800166a <HAL_PCD_EP_Open+0xc4>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68f9      	ldr	r1, [r7, #12]
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f9cc 	bl	80049f8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001668:	7afb      	ldrb	r3, [r7, #11]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	460b      	mov	r3, r1
 800167c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800167e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001682:	2b00      	cmp	r3, #0
 8001684:	da0e      	bge.n	80016a4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	f003 0307 	and.w	r3, r3, #7
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	4413      	add	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2201      	movs	r2, #1
 80016a0:	705a      	strb	r2, [r3, #1]
 80016a2:	e00e      	b.n	80016c2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016a4:	78fb      	ldrb	r3, [r7, #3]
 80016a6:	f003 0207 	and.w	r2, r3, #7
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <HAL_PCD_EP_Close+0x6a>
 80016d8:	2302      	movs	r3, #2
 80016da:	e00e      	b.n	80016fa <HAL_PCD_EP_Close+0x88>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	68f9      	ldr	r1, [r7, #12]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f003 fcee 	bl	80050cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	60f8      	str	r0, [r7, #12]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
 800170e:	460b      	mov	r3, r1
 8001710:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001712:	7afb      	ldrb	r3, [r7, #11]
 8001714:	f003 0207 	and.w	r2, r3, #7
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	00db      	lsls	r3, r3, #3
 8001720:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	2200      	movs	r2, #0
 800173a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2200      	movs	r2, #0
 8001740:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001742:	7afb      	ldrb	r3, [r7, #11]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	b2da      	uxtb	r2, r3
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800174e:	7afb      	ldrb	r3, [r7, #11]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	2b00      	cmp	r3, #0
 8001756:	d106      	bne.n	8001766 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6979      	ldr	r1, [r7, #20]
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fea0 	bl	80054a4 <USB_EPStartXfer>
 8001764:	e005      	b.n	8001772 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	6979      	ldr	r1, [r7, #20]
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fe99 	bl	80054a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	603b      	str	r3, [r7, #0]
 8001788:	460b      	mov	r3, r1
 800178a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	4613      	mov	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4413      	add	r3, r2
 800179a:	00db      	lsls	r3, r3, #3
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2201      	movs	r2, #1
 80017c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017c8:	7afb      	ldrb	r3, [r7, #11]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017d4:	7afb      	ldrb	r3, [r7, #11]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d106      	bne.n	80017ec <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6979      	ldr	r1, [r7, #20]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fe5d 	bl	80054a4 <USB_EPStartXfer>
 80017ea:	e005      	b.n	80017f8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6979      	ldr	r1, [r7, #20]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 fe56 	bl	80054a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800180e:	78fb      	ldrb	r3, [r7, #3]
 8001810:	f003 0207 	and.w	r2, r3, #7
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	429a      	cmp	r2, r3
 800181a:	d901      	bls.n	8001820 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e04c      	b.n	80018ba <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001824:	2b00      	cmp	r3, #0
 8001826:	da0e      	bge.n	8001846 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001828:	78fb      	ldrb	r3, [r7, #3]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	4613      	mov	r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	4413      	add	r3, r2
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	4413      	add	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2201      	movs	r2, #1
 8001842:	705a      	strb	r2, [r3, #1]
 8001844:	e00c      	b.n	8001860 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2201      	movs	r2, #1
 8001864:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	b2da      	uxtb	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_PCD_EP_SetStall+0x7e>
 800187c:	2302      	movs	r3, #2
 800187e:	e01c      	b.n	80018ba <HAL_PCD_EP_SetStall+0xb8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	68f9      	ldr	r1, [r7, #12]
 800188e:	4618      	mov	r0, r3
 8001890:	f005 f8ff 	bl	8006a92 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001894:	78fb      	ldrb	r3, [r7, #3]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	2b00      	cmp	r3, #0
 800189c:	d108      	bne.n	80018b0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f005 fa24 	bl	8006cf8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b084      	sub	sp, #16
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	460b      	mov	r3, r1
 80018cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	f003 020f 	and.w	r2, r3, #15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d901      	bls.n	80018e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e040      	b.n	8001962 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80018e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	da0e      	bge.n	8001906 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018e8:	78fb      	ldrb	r3, [r7, #3]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	4413      	add	r3, r2
 80018fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2201      	movs	r2, #1
 8001902:	705a      	strb	r2, [r3, #1]
 8001904:	e00e      	b.n	8001924 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001906:	78fb      	ldrb	r3, [r7, #3]
 8001908:	f003 0207 	and.w	r2, r3, #7
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800192a:	78fb      	ldrb	r3, [r7, #3]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	b2da      	uxtb	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_PCD_EP_ClrStall+0x82>
 8001940:	2302      	movs	r3, #2
 8001942:	e00e      	b.n	8001962 <HAL_PCD_EP_ClrStall+0xa0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	f005 f8ed 	bl	8006b32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b08e      	sub	sp, #56	; 0x38
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001972:	e2ec      	b.n	8001f4e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800197c:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800197e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800198a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800198e:	2b00      	cmp	r3, #0
 8001990:	f040 8161 	bne.w	8001c56 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001994:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001996:	f003 0310 	and.w	r3, r3, #16
 800199a:	2b00      	cmp	r3, #0
 800199c:	d152      	bne.n	8001a44 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019ae:	81fb      	strh	r3, [r7, #14]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	89fb      	ldrh	r3, [r7, #14]
 80019b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019be:	b29b      	uxth	r3, r3
 80019c0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	3328      	adds	r3, #40	; 0x28
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	4413      	add	r3, r2
 80019dc:	3302      	adds	r3, #2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	4413      	add	r3, r2
 80019e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80019f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f6:	695a      	ldr	r2, [r3, #20]
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	441a      	add	r2, r3
 80019fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a00:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a02:	2100      	movs	r1, #0
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f006 fda2 	bl	800854e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 829b 	beq.w	8001f4e <PCD_EP_ISR_Handler+0x5e4>
 8001a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f040 8296 	bne.w	8001f4e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	b292      	uxth	r2, r2
 8001a36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a42:	e284      	b.n	8001f4e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	881b      	ldrh	r3, [r3, #0]
 8001a52:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d034      	beq.n	8001ac8 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	4413      	add	r3, r2
 8001a72:	3306      	adds	r3, #6
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6818      	ldr	r0, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a96:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	f005 f97a 	bl	8006d96 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001aae:	4013      	ands	r3, r2
 8001ab0:	823b      	strh	r3, [r7, #16]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	8a3a      	ldrh	r2, [r7, #16]
 8001ab8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001abc:	b292      	uxth	r2, r2
 8001abe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f006 fd17 	bl	80084f4 <HAL_PCD_SetupStageCallback>
 8001ac6:	e242      	b.n	8001f4e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ac8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f280 823e 	bge.w	8001f4e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001ade:	4013      	ands	r3, r2
 8001ae0:	83bb      	strh	r3, [r7, #28]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	8bba      	ldrh	r2, [r7, #28]
 8001ae8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aec:	b292      	uxth	r2, r2
 8001aee:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	3306      	adds	r3, #6
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	69db      	ldr	r3, [r3, #28]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d019      	beq.n	8001b58 <PCD_EP_ISR_Handler+0x1ee>
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d015      	beq.n	8001b58 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b32:	6959      	ldr	r1, [r3, #20]
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	f005 f92a 	bl	8006d96 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	441a      	add	r2, r3
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b50:	2100      	movs	r1, #0
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f006 fce0 	bl	8008518 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 81f2 	bne.w	8001f4e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	4413      	add	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d112      	bne.n	8001bb8 <PCD_EP_ISR_Handler+0x24e>
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b9c:	b29a      	uxth	r2, r3
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	801a      	strh	r2, [r3, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	e02f      	b.n	8001c18 <PCD_EP_ISR_Handler+0x2ae>
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	2b3e      	cmp	r3, #62	; 0x3e
 8001bbe:	d813      	bhi.n	8001be8 <PCD_EP_ISR_Handler+0x27e>
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <PCD_EP_ISR_Handler+0x270>
 8001bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
 8001bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	029b      	lsls	r3, r3, #10
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	801a      	strh	r2, [r3, #0]
 8001be6:	e017      	b.n	8001c18 <PCD_EP_ISR_Handler+0x2ae>
 8001be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	095b      	lsrs	r3, r3, #5
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f003 031f 	and.w	r3, r3, #31
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <PCD_EP_ISR_Handler+0x298>
 8001bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	633b      	str	r3, [r7, #48]	; 0x30
 8001c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	029b      	lsls	r3, r3, #10
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c28:	827b      	strh	r3, [r7, #18]
 8001c2a:	8a7b      	ldrh	r3, [r7, #18]
 8001c2c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001c30:	827b      	strh	r3, [r7, #18]
 8001c32:	8a7b      	ldrh	r3, [r7, #18]
 8001c34:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001c38:	827b      	strh	r3, [r7, #18]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	8a7b      	ldrh	r3, [r7, #18]
 8001c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	8013      	strh	r3, [r2, #0]
 8001c54:	e17b      	b.n	8001f4e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c68:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f280 80ea 	bge.w	8001e46 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	461a      	mov	r2, r3
 8001c78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	881b      	ldrh	r3, [r3, #0]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c88:	4013      	ands	r3, r2
 8001c8a:	853b      	strh	r3, [r7, #40]	; 0x28
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001c9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ca0:	b292      	uxth	r2, r2
 8001ca2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001ca4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001ca8:	4613      	mov	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	4413      	add	r3, r2
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	7b1b      	ldrb	r3, [r3, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d122      	bne.n	8001d08 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	461a      	mov	r2, r3
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3306      	adds	r3, #6
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cea:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001cec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 8087 	beq.w	8001e02 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	6959      	ldr	r1, [r3, #20]
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	88da      	ldrh	r2, [r3, #6]
 8001d00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d02:	f005 f848 	bl	8006d96 <USB_ReadPMA>
 8001d06:	e07c      	b.n	8001e02 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	78db      	ldrb	r3, [r3, #3]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d108      	bne.n	8001d22 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001d10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d12:	461a      	mov	r2, r3
 8001d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f927 	bl	8001f6a <HAL_PCD_EP_DB_Receive>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001d20:	e06f      	b.n	8001e02 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	4413      	add	r3, r2
 8001d30:	881b      	ldrh	r3, [r3, #0]
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d3c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	461a      	mov	r2, r3
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	441a      	add	r2, r3
 8001d4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	881b      	ldrh	r3, [r3, #0]
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	00db      	lsls	r3, r3, #3
 8001d8e:	4413      	add	r3, r2
 8001d90:	3302      	adds	r3, #2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001da4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001da6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d02a      	beq.n	8001e02 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	6959      	ldr	r1, [r3, #20]
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	891a      	ldrh	r2, [r3, #8]
 8001db8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dba:	f004 ffec 	bl	8006d96 <USB_ReadPMA>
 8001dbe:	e020      	b.n	8001e02 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3306      	adds	r3, #6
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	4413      	add	r3, r2
 8001dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001de8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001dea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df6:	6959      	ldr	r1, [r3, #20]
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	895a      	ldrh	r2, [r3, #10]
 8001dfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dfe:	f004 ffca 	bl	8006d96 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e08:	441a      	add	r2, r3
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e10:	695a      	ldr	r2, [r3, #20]
 8001e12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e14:	441a      	add	r2, r3
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d004      	beq.n	8001e2c <PCD_EP_ISR_Handler+0x4c2>
 8001e22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d206      	bcs.n	8001e3a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	4619      	mov	r1, r3
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f006 fb70 	bl	8008518 <HAL_PCD_DataOutStageCallback>
 8001e38:	e005      	b.n	8001e46 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e40:	4618      	mov	r0, r3
 8001e42:	f003 fb2f 	bl	80054a4 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001e46:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d07e      	beq.n	8001f4e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001e50:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4413      	add	r3, r2
 8001e72:	881b      	ldrh	r3, [r3, #0]
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e7e:	843b      	strh	r3, [r7, #32]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	441a      	add	r2, r3
 8001e8e:	8c3b      	ldrh	r3, [r7, #32]
 8001e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9e:	78db      	ldrb	r3, [r3, #3]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d00c      	beq.n	8001ebe <PCD_EP_ISR_Handler+0x554>
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	78db      	ldrb	r3, [r3, #3]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d146      	bne.n	8001f42 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001eb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d141      	bne.n	8001f42 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee6:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8001ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eea:	699a      	ldr	r2, [r3, #24]
 8001eec:	8bfb      	ldrh	r3, [r7, #30]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d906      	bls.n	8001f00 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	8bfb      	ldrh	r3, [r7, #30]
 8001ef8:	1ad2      	subs	r2, r2, r3
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	619a      	str	r2, [r3, #24]
 8001efe:	e002      	b.n	8001f06 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	2200      	movs	r2, #0
 8001f04:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	4619      	mov	r1, r3
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f006 fb1a 	bl	800854e <HAL_PCD_DataInStageCallback>
 8001f1a:	e018      	b.n	8001f4e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	695a      	ldr	r2, [r3, #20]
 8001f20:	8bfb      	ldrh	r3, [r7, #30]
 8001f22:	441a      	add	r2, r3
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8001f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2a:	69da      	ldr	r2, [r3, #28]
 8001f2c:	8bfb      	ldrh	r3, [r7, #30]
 8001f2e:	441a      	add	r2, r3
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 fab2 	bl	80054a4 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8001f40:	e005      	b.n	8001f4e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8001f42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f44:	461a      	mov	r2, r3
 8001f46:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f91b 	bl	8002184 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f6ff ad0a 	blt.w	8001974 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3738      	adds	r7, #56	; 0x38
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b088      	sub	sp, #32
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	4613      	mov	r3, r2
 8001f76:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8001f78:	88fb      	ldrh	r3, [r7, #6]
 8001f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d07e      	beq.n	8002080 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	3302      	adds	r3, #2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	68fa      	ldr	r2, [r7, #12]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fa4:	881b      	ldrh	r3, [r3, #0]
 8001fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001faa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	699a      	ldr	r2, [r3, #24]
 8001fb0:	8b7b      	ldrh	r3, [r7, #26]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d306      	bcc.n	8001fc4 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	8b7b      	ldrh	r3, [r7, #26]
 8001fbc:	1ad2      	subs	r2, r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	619a      	str	r2, [r3, #24]
 8001fc2:	e002      	b.n	8001fca <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d123      	bne.n	800201a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	881b      	ldrh	r3, [r3, #0]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fec:	833b      	strh	r3, [r7, #24]
 8001fee:	8b3b      	ldrh	r3, [r7, #24]
 8001ff0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ff4:	833b      	strh	r3, [r7, #24]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	441a      	add	r2, r3
 8002004:	8b3b      	ldrh	r3, [r7, #24]
 8002006:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800200a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800200e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002016:	b29b      	uxth	r3, r3
 8002018:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01f      	beq.n	8002064 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	461a      	mov	r2, r3
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	4413      	add	r3, r2
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800203a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800203e:	82fb      	strh	r3, [r7, #22]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	441a      	add	r2, r3
 800204e:	8afb      	ldrh	r3, [r7, #22]
 8002050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002058:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002060:	b29b      	uxth	r3, r3
 8002062:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002064:	8b7b      	ldrh	r3, [r7, #26]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 8087 	beq.w	800217a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	6959      	ldr	r1, [r3, #20]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	891a      	ldrh	r2, [r3, #8]
 8002078:	8b7b      	ldrh	r3, [r7, #26]
 800207a:	f004 fe8c 	bl	8006d96 <USB_ReadPMA>
 800207e:	e07c      	b.n	800217a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	3306      	adds	r3, #6
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	699a      	ldr	r2, [r3, #24]
 80020ae:	8b7b      	ldrh	r3, [r7, #26]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d306      	bcc.n	80020c2 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	699a      	ldr	r2, [r3, #24]
 80020b8:	8b7b      	ldrh	r3, [r7, #26]
 80020ba:	1ad2      	subs	r2, r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	619a      	str	r2, [r3, #24]
 80020c0:	e002      	b.n	80020c8 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d123      	bne.n	8002118 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ea:	83fb      	strh	r3, [r7, #30]
 80020ec:	8bfb      	ldrh	r3, [r7, #30]
 80020ee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020f2:	83fb      	strh	r3, [r7, #30]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	441a      	add	r2, r3
 8002102:	8bfb      	ldrh	r3, [r7, #30]
 8002104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	b29b      	uxth	r3, r3
 8002116:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800211e:	2b00      	cmp	r3, #0
 8002120:	d11f      	bne.n	8002162 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213c:	83bb      	strh	r3, [r7, #28]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	441a      	add	r2, r3
 800214c:	8bbb      	ldrh	r3, [r7, #28]
 800214e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002152:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002156:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800215e:	b29b      	uxth	r3, r3
 8002160:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002162:	8b7b      	ldrh	r3, [r7, #26]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	6959      	ldr	r1, [r3, #20]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	895a      	ldrh	r2, [r3, #10]
 8002174:	8b7b      	ldrh	r3, [r7, #26]
 8002176:	f004 fe0e 	bl	8006d96 <USB_ReadPMA>
    }
  }

  return count;
 800217a:	8b7b      	ldrh	r3, [r7, #26]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b0a2      	sub	sp, #136	; 0x88
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 81c7 	beq.w	800252c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	461a      	mov	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	4413      	add	r3, r2
 80021b2:	3302      	adds	r3, #2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len > TxByteNbre)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	699a      	ldr	r2, [r3, #24]
 80021ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d907      	bls.n	80021e6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80021de:	1ad2      	subs	r2, r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	619a      	str	r2, [r3, #24]
 80021e4:	e002      	b.n	80021ec <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f040 80b9 	bne.w	8002368 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	785b      	ldrb	r3, [r3, #1]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d126      	bne.n	800224c <HAL_PCD_EP_DB_Transmit+0xc8>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220c:	b29b      	uxth	r3, r3
 800220e:	461a      	mov	r2, r3
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	4413      	add	r3, r2
 8002214:	62bb      	str	r3, [r7, #40]	; 0x28
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	011a      	lsls	r2, r3, #4
 800221c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800221e:	4413      	add	r3, r2
 8002220:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	b29b      	uxth	r3, r3
 800222c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002230:	b29a      	uxth	r2, r3
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	801a      	strh	r2, [r3, #0]
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002240:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002244:	b29a      	uxth	r2, r3
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	801a      	strh	r2, [r3, #0]
 800224a:	e01a      	b.n	8002282 <HAL_PCD_EP_DB_Transmit+0xfe>
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d116      	bne.n	8002282 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	4413      	add	r3, r2
 800226a:	633b      	str	r3, [r7, #48]	; 0x30
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	011a      	lsls	r2, r3, #4
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	4413      	add	r3, r2
 8002276:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800227a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	2200      	movs	r2, #0
 8002280:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	623b      	str	r3, [r7, #32]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	785b      	ldrb	r3, [r3, #1]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d126      	bne.n	80022de <HAL_PCD_EP_DB_Transmit+0x15a>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	61bb      	str	r3, [r7, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800229e:	b29b      	uxth	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	4413      	add	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	011a      	lsls	r2, r3, #4
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	4413      	add	r3, r2
 80022b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80022b6:	617b      	str	r3, [r7, #20]
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	801a      	strh	r2, [r3, #0]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	801a      	strh	r2, [r3, #0]
 80022dc:	e017      	b.n	800230e <HAL_PCD_EP_DB_Transmit+0x18a>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	785b      	ldrb	r3, [r3, #1]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d113      	bne.n	800230e <HAL_PCD_EP_DB_Transmit+0x18a>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	4413      	add	r3, r2
 80022f6:	623b      	str	r3, [r7, #32]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	011a      	lsls	r2, r3, #4
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	4413      	add	r3, r2
 8002302:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002306:	61fb      	str	r3, [r7, #28]
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	2200      	movs	r2, #0
 800230c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f006 f91a 	bl	800854e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 82d1 	beq.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002340:	827b      	strh	r3, [r7, #18]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	461a      	mov	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	441a      	add	r2, r3
 8002350:	8a7b      	ldrh	r3, [r7, #18]
 8002352:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002356:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800235a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800235e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002362:	b29b      	uxth	r3, r3
 8002364:	8013      	strh	r3, [r2, #0]
 8002366:	e2af      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d021      	beq.n	80023b6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b29b      	uxth	r3, r3
 8002384:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80023a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023bc:	2b01      	cmp	r3, #1
 80023be:	f040 8283 	bne.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80023ca:	441a      	add	r2, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80023d8:	441a      	add	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d309      	bcc.n	80023fe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	6a1a      	ldr	r2, [r3, #32]
 80023f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023f6:	1ad2      	subs	r2, r2, r3
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	621a      	str	r2, [r3, #32]
 80023fc:	e015      	b.n	800242a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002406:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800240a:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002414:	e009      	b.n	800242a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2200      	movs	r2, #0
 8002428:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	785b      	ldrb	r3, [r3, #1]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d155      	bne.n	80024de <HAL_PCD_EP_DB_Transmit+0x35a>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	63bb      	str	r3, [r7, #56]	; 0x38
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002440:	b29b      	uxth	r3, r3
 8002442:	461a      	mov	r2, r3
 8002444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002446:	4413      	add	r3, r2
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	011a      	lsls	r2, r3, #4
 8002450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002452:	4413      	add	r3, r2
 8002454:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002458:	637b      	str	r3, [r7, #52]	; 0x34
 800245a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800245c:	2b00      	cmp	r3, #0
 800245e:	d112      	bne.n	8002486 <HAL_PCD_EP_DB_Transmit+0x302>
 8002460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	b29b      	uxth	r3, r3
 8002466:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800246a:	b29a      	uxth	r2, r3
 800246c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800246e:	801a      	strh	r2, [r3, #0]
 8002470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	b29b      	uxth	r3, r3
 8002476:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800247a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800247e:	b29a      	uxth	r2, r3
 8002480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002482:	801a      	strh	r2, [r3, #0]
 8002484:	e047      	b.n	8002516 <HAL_PCD_EP_DB_Transmit+0x392>
 8002486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002488:	2b3e      	cmp	r3, #62	; 0x3e
 800248a:	d811      	bhi.n	80024b0 <HAL_PCD_EP_DB_Transmit+0x32c>
 800248c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	653b      	str	r3, [r7, #80]	; 0x50
 8002492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d002      	beq.n	80024a2 <HAL_PCD_EP_DB_Transmit+0x31e>
 800249c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800249e:	3301      	adds	r3, #1
 80024a0:	653b      	str	r3, [r7, #80]	; 0x50
 80024a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	029b      	lsls	r3, r3, #10
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	e032      	b.n	8002516 <HAL_PCD_EP_DB_Transmit+0x392>
 80024b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	653b      	str	r3, [r7, #80]	; 0x50
 80024b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024b8:	f003 031f 	and.w	r3, r3, #31
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d102      	bne.n	80024c6 <HAL_PCD_EP_DB_Transmit+0x342>
 80024c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c2:	3b01      	subs	r3, #1
 80024c4:	653b      	str	r3, [r7, #80]	; 0x50
 80024c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	029b      	lsls	r3, r3, #10
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024da:	801a      	strh	r2, [r3, #0]
 80024dc:	e01b      	b.n	8002516 <HAL_PCD_EP_DB_Transmit+0x392>
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	785b      	ldrb	r3, [r3, #1]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d117      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0x392>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024fa:	4413      	add	r3, r2
 80024fc:	643b      	str	r3, [r7, #64]	; 0x40
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	011a      	lsls	r2, r3, #4
 8002504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002506:	4413      	add	r3, r2
 8002508:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800250e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002510:	b29a      	uxth	r2, r3
 8002512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002514:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6959      	ldr	r1, [r3, #20]
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	891a      	ldrh	r2, [r3, #8]
 8002522:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002524:	b29b      	uxth	r3, r3
 8002526:	f004 fbf2 	bl	8006d0e <USB_WritePMA>
 800252a:	e1cd      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x744>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002534:	b29b      	uxth	r3, r3
 8002536:	461a      	mov	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	00db      	lsls	r3, r3, #3
 800253e:	4413      	add	r3, r2
 8002540:	3306      	adds	r3, #6
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	68fa      	ldr	r2, [r7, #12]
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	4413      	add	r3, r2
 800254a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002554:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

    if (ep->xfer_len >= TxByteNbre)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002560:	429a      	cmp	r2, r3
 8002562:	d307      	bcc.n	8002574 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800256c:	1ad2      	subs	r2, r2, r3
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	619a      	str	r2, [r3, #24]
 8002572:	e002      	b.n	800257a <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 80c1 	bne.w	8002706 <HAL_PCD_EP_DB_Transmit+0x582>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	785b      	ldrb	r3, [r3, #1]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d126      	bne.n	80025da <HAL_PCD_EP_DB_Transmit+0x456>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800259a:	b29b      	uxth	r3, r3
 800259c:	461a      	mov	r2, r3
 800259e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025a0:	4413      	add	r3, r2
 80025a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	011a      	lsls	r2, r3, #4
 80025aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80025ac:	4413      	add	r3, r2
 80025ae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80025b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025be:	b29a      	uxth	r2, r3
 80025c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c2:	801a      	strh	r2, [r3, #0]
 80025c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025d6:	801a      	strh	r2, [r3, #0]
 80025d8:	e01a      	b.n	8002610 <HAL_PCD_EP_DB_Transmit+0x48c>
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	785b      	ldrb	r3, [r3, #1]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d116      	bne.n	8002610 <HAL_PCD_EP_DB_Transmit+0x48c>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	673b      	str	r3, [r7, #112]	; 0x70
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025f6:	4413      	add	r3, r2
 80025f8:	673b      	str	r3, [r7, #112]	; 0x70
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	011a      	lsls	r2, r3, #4
 8002600:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002602:	4413      	add	r3, r2
 8002604:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800260a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800260c:	2200      	movs	r2, #0
 800260e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	785b      	ldrb	r3, [r3, #1]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d126      	bne.n	800266e <HAL_PCD_EP_DB_Transmit+0x4ea>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800262e:	b29b      	uxth	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002634:	4413      	add	r3, r2
 8002636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	011a      	lsls	r2, r3, #4
 800263e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002640:	4413      	add	r3, r2
 8002642:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48
 8002648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002652:	b29a      	uxth	r2, r3
 8002654:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002656:	801a      	strh	r2, [r3, #0]
 8002658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002666:	b29a      	uxth	r2, r3
 8002668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800266a:	801a      	strh	r2, [r3, #0]
 800266c:	e01c      	b.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x524>
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	785b      	ldrb	r3, [r3, #1]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d118      	bne.n	80026a8 <HAL_PCD_EP_DB_Transmit+0x524>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002686:	4413      	add	r3, r2
 8002688:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	011a      	lsls	r2, r3, #4
 8002692:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002696:	4413      	add	r3, r2
 8002698:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800269c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80026a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80026a4:	2200      	movs	r2, #0
 80026a6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	4619      	mov	r1, r3
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f005 ff4d 	bl	800854e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f040 8104 	bne.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026da:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	441a      	add	r2, r3
 80026ec:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80026f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002700:	b29b      	uxth	r3, r3
 8002702:	8013      	strh	r3, [r2, #0]
 8002704:	e0e0      	b.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x744>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d121      	bne.n	8002754 <HAL_PCD_EP_DB_Transmit+0x5d0>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	441a      	add	r2, r3
 800273c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800274c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275a:	2b01      	cmp	r3, #1
 800275c:	f040 80b4 	bne.w	80028c8 <HAL_PCD_EP_DB_Transmit+0x744>
      {
        ep->xfer_buff += TxByteNbre;
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002768:	441a      	add	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8002776:	441a      	add	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	6a1a      	ldr	r2, [r3, #32]
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d309      	bcc.n	800279c <HAL_PCD_EP_DB_Transmit+0x618>
        {
          len = ep->maxpacket;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db -= len;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	6a1a      	ldr	r2, [r3, #32]
 8002792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002794:	1ad2      	subs	r2, r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	621a      	str	r2, [r3, #32]
 800279a:	e015      	b.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else if (ep->xfer_len_db == 0U)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x630>
        {
          len = TxByteNbre;
 80027a4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80027a8:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_fill_db = 0U;
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80027b2:	e009      	b.n	80027c8 <HAL_PCD_EP_DB_Transmit+0x644>
        }
        else
        {
          len = ep->xfer_len_db;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	66bb      	str	r3, [r7, #104]	; 0x68
          ep->xfer_len_db = 0U;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2200      	movs	r2, #0
 80027be:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	667b      	str	r3, [r7, #100]	; 0x64
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d155      	bne.n	8002882 <HAL_PCD_EP_DB_Transmit+0x6fe>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027ea:	4413      	add	r3, r2
 80027ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	011a      	lsls	r2, r3, #4
 80027f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f6:	4413      	add	r3, r2
 80027f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80027fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002800:	2b00      	cmp	r3, #0
 8002802:	d112      	bne.n	800282a <HAL_PCD_EP_DB_Transmit+0x6a6>
 8002804:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800280e:	b29a      	uxth	r2, r3
 8002810:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002812:	801a      	strh	r2, [r3, #0]
 8002814:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002816:	881b      	ldrh	r3, [r3, #0]
 8002818:	b29b      	uxth	r3, r3
 800281a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800281e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002822:	b29a      	uxth	r2, r3
 8002824:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002826:	801a      	strh	r2, [r3, #0]
 8002828:	e044      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x730>
 800282a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800282c:	2b3e      	cmp	r3, #62	; 0x3e
 800282e:	d811      	bhi.n	8002854 <HAL_PCD_EP_DB_Transmit+0x6d0>
 8002830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002832:	085b      	lsrs	r3, r3, #1
 8002834:	677b      	str	r3, [r7, #116]	; 0x74
 8002836:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d002      	beq.n	8002846 <HAL_PCD_EP_DB_Transmit+0x6c2>
 8002840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002842:	3301      	adds	r3, #1
 8002844:	677b      	str	r3, [r7, #116]	; 0x74
 8002846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002848:	b29b      	uxth	r3, r3
 800284a:	029b      	lsls	r3, r3, #10
 800284c:	b29a      	uxth	r2, r3
 800284e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002850:	801a      	strh	r2, [r3, #0]
 8002852:	e02f      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x730>
 8002854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	677b      	str	r3, [r7, #116]	; 0x74
 800285a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800285c:	f003 031f 	and.w	r3, r3, #31
 8002860:	2b00      	cmp	r3, #0
 8002862:	d102      	bne.n	800286a <HAL_PCD_EP_DB_Transmit+0x6e6>
 8002864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002866:	3b01      	subs	r3, #1
 8002868:	677b      	str	r3, [r7, #116]	; 0x74
 800286a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800286c:	b29b      	uxth	r3, r3
 800286e:	029b      	lsls	r3, r3, #10
 8002870:	b29b      	uxth	r3, r3
 8002872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800287a:	b29a      	uxth	r2, r3
 800287c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800287e:	801a      	strh	r2, [r3, #0]
 8002880:	e018      	b.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x730>
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	785b      	ldrb	r3, [r3, #1]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d114      	bne.n	80028b4 <HAL_PCD_EP_DB_Transmit+0x730>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002892:	b29b      	uxth	r3, r3
 8002894:	461a      	mov	r2, r3
 8002896:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002898:	4413      	add	r3, r2
 800289a:	667b      	str	r3, [r7, #100]	; 0x64
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	011a      	lsls	r2, r3, #4
 80028a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a4:	4413      	add	r3, r2
 80028a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028aa:	663b      	str	r3, [r7, #96]	; 0x60
 80028ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028b2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	6959      	ldr	r1, [r3, #20]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	895a      	ldrh	r2, [r3, #10]
 80028c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f004 fa23 	bl	8006d0e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	4413      	add	r3, r2
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	b29b      	uxth	r3, r3
 80028da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e2:	823b      	strh	r3, [r7, #16]
 80028e4:	8a3b      	ldrh	r3, [r7, #16]
 80028e6:	f083 0310 	eor.w	r3, r3, #16
 80028ea:	823b      	strh	r3, [r7, #16]
 80028ec:	8a3b      	ldrh	r3, [r7, #16]
 80028ee:	f083 0320 	eor.w	r3, r3, #32
 80028f2:	823b      	strh	r3, [r7, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	8a3b      	ldrh	r3, [r7, #16]
 8002904:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002908:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800290c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002914:	b29b      	uxth	r3, r3
 8002916:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3788      	adds	r7, #136	; 0x88
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002922:	b480      	push	{r7}
 8002924:	b087      	sub	sp, #28
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	817b      	strh	r3, [r7, #10]
 8002930:	4613      	mov	r3, r2
 8002932:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002934:	897b      	ldrh	r3, [r7, #10]
 8002936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293a:	b29b      	uxth	r3, r3
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	4413      	add	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e009      	b.n	800296c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002958:	897a      	ldrh	r2, [r7, #10]
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	4413      	add	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800296c:	893b      	ldrh	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d107      	bne.n	8002982 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	b29a      	uxth	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	80da      	strh	r2, [r3, #6]
 8002980:	e00b      	b.n	800299a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2201      	movs	r2, #1
 8002986:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	b29a      	uxth	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	0c1b      	lsrs	r3, r3, #16
 8002994:	b29a      	uxth	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	371c      	adds	r7, #28
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bc80      	pop	{r7}
 80029a4:	4770      	bx	lr
	...

080029a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80029ac:	4b03      	ldr	r3, [pc, #12]	; (80029bc <HAL_PWR_EnableBkUpAccess+0x14>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	601a      	str	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	420e0020 	.word	0x420e0020

080029c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e26c      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 8087 	beq.w	8002aee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029e0:	4b92      	ldr	r3, [pc, #584]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 030c 	and.w	r3, r3, #12
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d00c      	beq.n	8002a06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80029ec:	4b8f      	ldr	r3, [pc, #572]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 030c 	and.w	r3, r3, #12
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d112      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5e>
 80029f8:	4b8c      	ldr	r3, [pc, #560]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a04:	d10b      	bne.n	8002a1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a06:	4b89      	ldr	r3, [pc, #548]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d06c      	beq.n	8002aec <HAL_RCC_OscConfig+0x12c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d168      	bne.n	8002aec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e246      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x76>
 8002a28:	4b80      	ldr	r3, [pc, #512]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a7f      	ldr	r2, [pc, #508]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a32:	6013      	str	r3, [r2, #0]
 8002a34:	e02e      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d10c      	bne.n	8002a58 <HAL_RCC_OscConfig+0x98>
 8002a3e:	4b7b      	ldr	r3, [pc, #492]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a7a      	ldr	r2, [pc, #488]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4b78      	ldr	r3, [pc, #480]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a77      	ldr	r2, [pc, #476]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a54:	6013      	str	r3, [r2, #0]
 8002a56:	e01d      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0xbc>
 8002a62:	4b72      	ldr	r3, [pc, #456]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a71      	ldr	r2, [pc, #452]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	4b6f      	ldr	r3, [pc, #444]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a6e      	ldr	r2, [pc, #440]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0xd4>
 8002a7c:	4b6b      	ldr	r3, [pc, #428]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	4b68      	ldr	r3, [pc, #416]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a67      	ldr	r2, [pc, #412]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d013      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9c:	f7fe f844 	bl	8000b28 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa4:	f7fe f840 	bl	8000b28 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b64      	cmp	r3, #100	; 0x64
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e1fa      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0xe4>
 8002ac2:	e014      	b.n	8002aee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac4:	f7fe f830 	bl	8000b28 <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002acc:	f7fe f82c 	bl	8000b28 <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b64      	cmp	r3, #100	; 0x64
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1e6      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	4b53      	ldr	r3, [pc, #332]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x10c>
 8002aea:	e000      	b.n	8002aee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d063      	beq.n	8002bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002afa:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f003 030c 	and.w	r3, r3, #12
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b06:	4b49      	ldr	r3, [pc, #292]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b08      	cmp	r3, #8
 8002b10:	d11c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x18c>
 8002b12:	4b46      	ldr	r3, [pc, #280]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d116      	bne.n	8002b4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b1e:	4b43      	ldr	r3, [pc, #268]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d005      	beq.n	8002b36 <HAL_RCC_OscConfig+0x176>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d001      	beq.n	8002b36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e1ba      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b36:	4b3d      	ldr	r3, [pc, #244]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4939      	ldr	r1, [pc, #228]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b4a:	e03a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691b      	ldr	r3, [r3, #16]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d020      	beq.n	8002b96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b54:	4b36      	ldr	r3, [pc, #216]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5a:	f7fd ffe5 	bl	8000b28 <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b62:	f7fd ffe1 	bl	8000b28 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e19b      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b80:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4927      	ldr	r1, [pc, #156]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	600b      	str	r3, [r1, #0]
 8002b94:	e015      	b.n	8002bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b96:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <HAL_RCC_OscConfig+0x270>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fd ffc4 	bl	8000b28 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba4:	f7fd ffc0 	bl	8000b28 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e17a      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f0      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d03a      	beq.n	8002c44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d019      	beq.n	8002c0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bdc:	f7fd ffa4 	bl	8000b28 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002be4:	f7fd ffa0 	bl	8000b28 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e15a      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <HAL_RCC_OscConfig+0x26c>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d0f0      	beq.n	8002be4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f000 fada 	bl	80031bc <RCC_Delay>
 8002c08:	e01c      	b.n	8002c44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_RCC_OscConfig+0x274>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c10:	f7fd ff8a 	bl	8000b28 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c16:	e00f      	b.n	8002c38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c18:	f7fd ff86 	bl	8000b28 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d908      	bls.n	8002c38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e140      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	42420000 	.word	0x42420000
 8002c34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	4b9e      	ldr	r3, [pc, #632]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1e9      	bne.n	8002c18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 80a6 	beq.w	8002d9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c52:	2300      	movs	r3, #0
 8002c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c56:	4b97      	ldr	r3, [pc, #604]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10d      	bne.n	8002c7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c62:	4b94      	ldr	r3, [pc, #592]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4a93      	ldr	r2, [pc, #588]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	61d3      	str	r3, [r2, #28]
 8002c6e:	4b91      	ldr	r3, [pc, #580]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	60bb      	str	r3, [r7, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7e:	4b8e      	ldr	r3, [pc, #568]	; (8002eb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d118      	bne.n	8002cbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c8a:	4b8b      	ldr	r3, [pc, #556]	; (8002eb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a8a      	ldr	r2, [pc, #552]	; (8002eb8 <HAL_RCC_OscConfig+0x4f8>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c96:	f7fd ff47 	bl	8000b28 <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c9e:	f7fd ff43 	bl	8000b28 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b64      	cmp	r3, #100	; 0x64
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e0fd      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	4b81      	ldr	r3, [pc, #516]	; (8002eb8 <HAL_RCC_OscConfig+0x4f8>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d106      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x312>
 8002cc4:	4b7b      	ldr	r3, [pc, #492]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	4a7a      	ldr	r2, [pc, #488]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	f043 0301 	orr.w	r3, r3, #1
 8002cce:	6213      	str	r3, [r2, #32]
 8002cd0:	e02d      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x334>
 8002cda:	4b76      	ldr	r3, [pc, #472]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	4a75      	ldr	r2, [pc, #468]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6213      	str	r3, [r2, #32]
 8002ce6:	4b73      	ldr	r3, [pc, #460]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	4a72      	ldr	r2, [pc, #456]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6213      	str	r3, [r2, #32]
 8002cf2:	e01c      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d10c      	bne.n	8002d16 <HAL_RCC_OscConfig+0x356>
 8002cfc:	4b6d      	ldr	r3, [pc, #436]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	4a6c      	ldr	r2, [pc, #432]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d02:	f043 0304 	orr.w	r3, r3, #4
 8002d06:	6213      	str	r3, [r2, #32]
 8002d08:	4b6a      	ldr	r3, [pc, #424]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	4a69      	ldr	r2, [pc, #420]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d0e:	f043 0301 	orr.w	r3, r3, #1
 8002d12:	6213      	str	r3, [r2, #32]
 8002d14:	e00b      	b.n	8002d2e <HAL_RCC_OscConfig+0x36e>
 8002d16:	4b67      	ldr	r3, [pc, #412]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4a66      	ldr	r2, [pc, #408]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	6213      	str	r3, [r2, #32]
 8002d22:	4b64      	ldr	r3, [pc, #400]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4a63      	ldr	r2, [pc, #396]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d28:	f023 0304 	bic.w	r3, r3, #4
 8002d2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d015      	beq.n	8002d62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fd fef7 	bl	8000b28 <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3c:	e00a      	b.n	8002d54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d3e:	f7fd fef3 	bl	8000b28 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e0ab      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0ee      	beq.n	8002d3e <HAL_RCC_OscConfig+0x37e>
 8002d60:	e014      	b.n	8002d8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d62:	f7fd fee1 	bl	8000b28 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d68:	e00a      	b.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6a:	f7fd fedd 	bl	8000b28 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e095      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1ee      	bne.n	8002d6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d105      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d92:	4b48      	ldr	r3, [pc, #288]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	4a47      	ldr	r2, [pc, #284]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8081 	beq.w	8002eaa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da8:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d061      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d146      	bne.n	8002e4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <HAL_RCC_OscConfig+0x4fc>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fd feb1 	bl	8000b28 <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fd fead 	bl	8000b28 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e067      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ddc:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1f0      	bne.n	8002dca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d108      	bne.n	8002e04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002df2:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	492d      	ldr	r1, [pc, #180]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a19      	ldr	r1, [r3, #32]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	430b      	orrs	r3, r1
 8002e16:	4927      	ldr	r1, [pc, #156]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b27      	ldr	r3, [pc, #156]	; (8002ebc <HAL_RCC_OscConfig+0x4fc>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fd fe81 	bl	8000b28 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fd fe7d 	bl	8000b28 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e037      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x46a>
 8002e48:	e02f      	b.n	8002eaa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <HAL_RCC_OscConfig+0x4fc>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fd fe6a 	bl	8000b28 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fd fe66 	bl	8000b28 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e020      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x498>
 8002e76:	e018      	b.n	8002eaa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e013      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40007000 	.word	0x40007000
 8002ebc:	42420060 	.word	0x42420060

08002ec0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0d0      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b6a      	ldr	r3, [pc, #424]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d910      	bls.n	8002f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b67      	ldr	r3, [pc, #412]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f023 0207 	bic.w	r2, r3, #7
 8002eea:	4965      	ldr	r1, [pc, #404]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef2:	4b63      	ldr	r3, [pc, #396]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0b8      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d020      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f1c:	4b59      	ldr	r3, [pc, #356]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a58      	ldr	r2, [pc, #352]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f26:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d005      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f34:	4b53      	ldr	r3, [pc, #332]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a52      	ldr	r2, [pc, #328]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f3e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f40:	4b50      	ldr	r3, [pc, #320]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	494d      	ldr	r1, [pc, #308]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d040      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b47      	ldr	r3, [pc, #284]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d115      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e07f      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e073      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	4b3d      	ldr	r3, [pc, #244]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e06b      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9e:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4936      	ldr	r1, [pc, #216]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fd fdba 	bl	8000b28 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fd fdb6 	bl	8000b28 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e053      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	4b2d      	ldr	r3, [pc, #180]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d1eb      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d210      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 0207 	bic.w	r2, r3, #7
 8002ff6:	4922      	ldr	r1, [pc, #136]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e032      	b.n	8003076 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	4916      	ldr	r1, [pc, #88]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d009      	beq.n	800304e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	490e      	ldr	r1, [pc, #56]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800304e:	f000 f821 	bl	8003094 <HAL_RCC_GetSysClockFreq>
 8003052:	4601      	mov	r1, r0
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8003060:	5cd3      	ldrb	r3, [r2, r3]
 8003062:	fa21 f303 	lsr.w	r3, r1, r3
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <HAL_RCC_ClockConfig+0x1cc>)
 8003068:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800306a:	4b09      	ldr	r3, [pc, #36]	; (8003090 <HAL_RCC_ClockConfig+0x1d0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fd18 	bl	8000aa4 <HAL_InitTick>

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40022000 	.word	0x40022000
 8003084:	40021000 	.word	0x40021000
 8003088:	08008a94 	.word	0x08008a94
 800308c:	20000000 	.word	0x20000000
 8003090:	20000004 	.word	0x20000004

08003094 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003094:	b490      	push	{r4, r7}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800309a:	4b2a      	ldr	r3, [pc, #168]	; (8003144 <HAL_RCC_GetSysClockFreq+0xb0>)
 800309c:	1d3c      	adds	r4, r7, #4
 800309e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030a4:	4b28      	ldr	r3, [pc, #160]	; (8003148 <HAL_RCC_GetSysClockFreq+0xb4>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61fb      	str	r3, [r7, #28]
 80030ae:	2300      	movs	r3, #0
 80030b0:	61bb      	str	r3, [r7, #24]
 80030b2:	2300      	movs	r3, #0
 80030b4:	627b      	str	r3, [r7, #36]	; 0x24
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030be:	4b23      	ldr	r3, [pc, #140]	; (800314c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d002      	beq.n	80030d4 <HAL_RCC_GetSysClockFreq+0x40>
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d003      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0x46>
 80030d2:	e02d      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030d4:	4b1e      	ldr	r3, [pc, #120]	; (8003150 <HAL_RCC_GetSysClockFreq+0xbc>)
 80030d6:	623b      	str	r3, [r7, #32]
      break;
 80030d8:	e02d      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	0c9b      	lsrs	r3, r3, #18
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80030e6:	4413      	add	r3, r2
 80030e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80030ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030f8:	4b14      	ldr	r3, [pc, #80]	; (800314c <HAL_RCC_GetSysClockFreq+0xb8>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	0c5b      	lsrs	r3, r3, #17
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003106:	4413      	add	r3, r2
 8003108:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800310c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	4a0f      	ldr	r2, [pc, #60]	; (8003150 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003112:	fb02 f203 	mul.w	r2, r2, r3
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
 800311e:	e004      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	623b      	str	r3, [r7, #32]
      break;
 800312e:	e002      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003132:	623b      	str	r3, [r7, #32]
      break;
 8003134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003136:	6a3b      	ldr	r3, [r7, #32]
}
 8003138:	4618      	mov	r0, r3
 800313a:	3728      	adds	r7, #40	; 0x28
 800313c:	46bd      	mov	sp, r7
 800313e:	bc90      	pop	{r4, r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	08008a24 	.word	0x08008a24
 8003148:	08008a34 	.word	0x08008a34
 800314c:	40021000 	.word	0x40021000
 8003150:	007a1200 	.word	0x007a1200
 8003154:	003d0900 	.word	0x003d0900

08003158 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800315c:	4b02      	ldr	r3, [pc, #8]	; (8003168 <HAL_RCC_GetHCLKFreq+0x10>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	20000000 	.word	0x20000000

0800316c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003170:	f7ff fff2 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 8003174:	4601      	mov	r1, r0
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	0a1b      	lsrs	r3, r3, #8
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4a03      	ldr	r2, [pc, #12]	; (8003190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40021000 	.word	0x40021000
 8003190:	08008aa4 	.word	0x08008aa4

08003194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003198:	f7ff ffde 	bl	8003158 <HAL_RCC_GetHCLKFreq>
 800319c:	4601      	mov	r1, r0
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	0adb      	lsrs	r3, r3, #11
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	4a03      	ldr	r2, [pc, #12]	; (80031b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031aa:	5cd3      	ldrb	r3, [r2, r3]
 80031ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	40021000 	.word	0x40021000
 80031b8:	08008aa4 	.word	0x08008aa4

080031bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <RCC_Delay+0x34>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <RCC_Delay+0x38>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0a5b      	lsrs	r3, r3, #9
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031d8:	bf00      	nop
  }
  while (Delay --);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1e5a      	subs	r2, r3, #1
 80031de:	60fa      	str	r2, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <RCC_Delay+0x1c>
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	20000000 	.word	0x20000000
 80031f4:	10624dd3 	.word	0x10624dd3

080031f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	613b      	str	r3, [r7, #16]
 8003204:	2300      	movs	r3, #0
 8003206:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b00      	cmp	r3, #0
 8003212:	d07d      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003214:	2300      	movs	r3, #0
 8003216:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003218:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10d      	bne.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003224:	4b4c      	ldr	r3, [pc, #304]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	4a4b      	ldr	r2, [pc, #300]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800322a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800322e:	61d3      	str	r3, [r2, #28]
 8003230:	4b49      	ldr	r3, [pc, #292]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003232:	69db      	ldr	r3, [r3, #28]
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800323c:	2301      	movs	r3, #1
 800323e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003240:	4b46      	ldr	r3, [pc, #280]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003248:	2b00      	cmp	r3, #0
 800324a:	d118      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800324c:	4b43      	ldr	r3, [pc, #268]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a42      	ldr	r2, [pc, #264]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003256:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003258:	f7fd fc66 	bl	8000b28 <HAL_GetTick>
 800325c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325e:	e008      	b.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fd fc62 	bl	8000b28 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d901      	bls.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e06d      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b3a      	ldr	r3, [pc, #232]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800327e:	4b36      	ldr	r3, [pc, #216]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003286:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d02e      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	429a      	cmp	r2, r3
 800329a:	d027      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800329c:	4b2e      	ldr	r3, [pc, #184]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032a6:	4b2e      	ldr	r3, [pc, #184]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032a8:	2201      	movs	r2, #1
 80032aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032ac:	4b2c      	ldr	r3, [pc, #176]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032b2:	4a29      	ldr	r2, [pc, #164]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d014      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c2:	f7fd fc31 	bl	8000b28 <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fd fc2d 	bl	8000b28 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e036      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ee      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032ec:	4b1a      	ldr	r3, [pc, #104]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4917      	ldr	r1, [pc, #92]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	4a13      	ldr	r2, [pc, #76]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800330a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800330e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800331c:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	490b      	ldr	r1, [pc, #44]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d008      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800333a:	4b07      	ldr	r3, [pc, #28]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4904      	ldr	r1, [pc, #16]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000
 800335c:	40007000 	.word	0x40007000
 8003360:	42420440 	.word	0x42420440

08003364 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b08d      	sub	sp, #52	; 0x34
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800336c:	4b55      	ldr	r3, [pc, #340]	; (80034c4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800336e:	f107 040c 	add.w	r4, r7, #12
 8003372:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	2300      	movs	r3, #0
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003386:	2300      	movs	r3, #0
 8003388:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800338a:	2300      	movs	r3, #0
 800338c:	61fb      	str	r3, [r7, #28]
 800338e:	2300      	movs	r3, #0
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d07f      	beq.n	8003498 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8003398:	2b10      	cmp	r3, #16
 800339a:	d002      	beq.n	80033a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 800339c:	2b01      	cmp	r3, #1
 800339e:	d048      	beq.n	8003432 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80033a0:	e08b      	b.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80033a2:	4b4a      	ldr	r3, [pc, #296]	; (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80033a8:	4b48      	ldr	r3, [pc, #288]	; (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d07f      	beq.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	0c9b      	lsrs	r3, r3, #18
 80033b8:	f003 030f 	and.w	r3, r3, #15
 80033bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033c0:	4413      	add	r3, r2
 80033c2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033c6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d018      	beq.n	8003404 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033d2:	4b3e      	ldr	r3, [pc, #248]	; (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	0c5b      	lsrs	r3, r3, #17
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033e0:	4413      	add	r3, r2
 80033e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033e6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00d      	beq.n	800340e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80033f2:	4a37      	ldr	r2, [pc, #220]	; (80034d0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	fb02 f303 	mul.w	r3, r2, r3
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	e004      	b.n	800340e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	4a33      	ldr	r2, [pc, #204]	; (80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800340e:	4b2f      	ldr	r3, [pc, #188]	; (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800341a:	d102      	bne.n	8003422 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003420:	e048      	b.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4a2c      	ldr	r2, [pc, #176]	; (80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	085b      	lsrs	r3, r3, #1
 800342e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003430:	e040      	b.n	80034b4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8003432:	4b26      	ldr	r3, [pc, #152]	; (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800343e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003442:	d108      	bne.n	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 800344e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
 8003454:	e01f      	b.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800345c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003460:	d109      	bne.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8003462:	4b1a      	ldr	r3, [pc, #104]	; (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 800346e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
 8003474:	e00f      	b.n	8003496 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800347c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003480:	d11a      	bne.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003482:	4b12      	ldr	r3, [pc, #72]	; (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d014      	beq.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 800348e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003494:	e010      	b.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8003496:	e00f      	b.n	80034b8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003498:	f7ff fe7c 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 800349c:	4602      	mov	r2, r0
 800349e:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	0b9b      	lsrs	r3, r3, #14
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	3301      	adds	r3, #1
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80034b2:	e002      	b.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80034b4:	bf00      	nop
 80034b6:	e000      	b.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80034b8:	bf00      	nop
    }
  }
  return (frequency);
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3734      	adds	r7, #52	; 0x34
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd90      	pop	{r4, r7, pc}
 80034c4:	08008a38 	.word	0x08008a38
 80034c8:	08008a48 	.word	0x08008a48
 80034cc:	40021000 	.word	0x40021000
 80034d0:	007a1200 	.word	0x007a1200
 80034d4:	003d0900 	.word	0x003d0900
 80034d8:	aaaaaaab 	.word	0xaaaaaaab

080034dc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d101      	bne.n	80034f2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e084      	b.n	80035fc <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7c5b      	ldrb	r3, [r3, #17]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd f94a 	bl	800079c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f9c8 	bl	80038a4 <HAL_RTC_WaitForSynchro>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2204      	movs	r2, #4
 800351e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e06b      	b.n	80035fc <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f000 fa81 	bl	8003a2c <RTC_EnterInitMode>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2204      	movs	r2, #4
 8003534:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e060      	b.n	80035fc <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	685a      	ldr	r2, [r3, #4]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0207 	bic.w	r2, r2, #7
 8003548:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d005      	beq.n	800355e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003552:	4b2c      	ldr	r3, [pc, #176]	; (8003604 <HAL_RTC_Init+0x128>)
 8003554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003556:	4a2b      	ldr	r2, [pc, #172]	; (8003604 <HAL_RTC_Init+0x128>)
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RTC_Init+0x128>)
 8003560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003562:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4926      	ldr	r1, [pc, #152]	; (8003604 <HAL_RTC_Init+0x128>)
 800356c:	4313      	orrs	r3, r2
 800356e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d003      	beq.n	8003582 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	e00e      	b.n	80035a0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003582:	2001      	movs	r0, #1
 8003584:	f7ff feee 	bl	8003364 <HAL_RCCEx_GetPeriphCLKFreq>
 8003588:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2204      	movs	r2, #4
 8003594:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e030      	b.n	80035fc <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3b01      	subs	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 010f 	bic.w	r1, r3, #15
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	0c1a      	lsrs	r2, r3, #16
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	b291      	uxth	r1, r2
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6812      	ldr	r2, [r2, #0]
 80035c8:	430b      	orrs	r3, r1
 80035ca:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fa55 	bl	8003a7c <RTC_ExitInitMode>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2204      	movs	r2, #4
 80035dc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e00c      	b.n	80035fc <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80035fa:	2300      	movs	r3, #0
  }
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3710      	adds	r7, #16
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40006c00 	.word	0x40006c00

08003608 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_RTC_SetTime+0x20>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e080      	b.n	800372e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	7c1b      	ldrb	r3, [r3, #16]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_RTC_SetTime+0x30>
 8003634:	2302      	movs	r3, #2
 8003636:	e07a      	b.n	800372e <HAL_RTC_SetTime+0x126>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2202      	movs	r2, #2
 8003642:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d113      	bne.n	8003672 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	461a      	mov	r2, r3
 8003650:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003654:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	785b      	ldrb	r3, [r3, #1]
 800365c:	4619      	mov	r1, r3
 800365e:	460b      	mov	r3, r1
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a5b      	subs	r3, r3, r1
 8003664:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003666:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800366c:	4413      	add	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e01e      	b.n	80036b0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fa28 	bl	8003acc <RTC_Bcd2ToByte>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003684:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	785b      	ldrb	r3, [r3, #1]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fa1d 	bl	8003acc <RTC_Bcd2ToByte>
 8003692:	4603      	mov	r3, r0
 8003694:	461a      	mov	r2, r3
 8003696:	4613      	mov	r3, r2
 8003698:	011b      	lsls	r3, r3, #4
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800369e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	789b      	ldrb	r3, [r3, #2]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fa11 	bl	8003acc <RTC_Bcd2ToByte>
 80036aa:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80036ac:	4423      	add	r3, r4
 80036ae:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80036b0:	6979      	ldr	r1, [r7, #20]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f953 	bl	800395e <RTC_WriteTimeCounter>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2204      	movs	r2, #4
 80036c2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e02f      	b.n	800372e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0205 	bic.w	r2, r2, #5
 80036dc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80036de:	68f8      	ldr	r0, [r7, #12]
 80036e0:	f000 f964 	bl	80039ac <RTC_ReadAlarmCounter>
 80036e4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ec:	d018      	beq.n	8003720 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d214      	bcs.n	8003720 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80036fc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003700:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003702:	6939      	ldr	r1, [r7, #16]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f96a 	bl	80039de <RTC_WriteAlarmCounter>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d007      	beq.n	8003720 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2204      	movs	r2, #4
 8003714:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e006      	b.n	800372e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800372c:	2300      	movs	r3, #0
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	bd90      	pop	{r4, r7, pc}
	...

08003738 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003744:	2300      	movs	r3, #0
 8003746:	61fb      	str	r3, [r7, #28]
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_RTC_SetDate+0x24>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e097      	b.n	8003890 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	7c1b      	ldrb	r3, [r3, #16]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_RTC_SetDate+0x34>
 8003768:	2302      	movs	r3, #2
 800376a:	e091      	b.n	8003890 <HAL_RTC_SetDate+0x158>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2202      	movs	r2, #2
 8003776:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10c      	bne.n	8003798 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	78da      	ldrb	r2, [r3, #3]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	785a      	ldrb	r2, [r3, #1]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	789a      	ldrb	r2, [r3, #2]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	739a      	strb	r2, [r3, #14]
 8003796:	e01a      	b.n	80037ce <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	78db      	ldrb	r3, [r3, #3]
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f995 	bl	8003acc <RTC_Bcd2ToByte>
 80037a2:	4603      	mov	r3, r0
 80037a4:	461a      	mov	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	785b      	ldrb	r3, [r3, #1]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 f98c 	bl	8003acc <RTC_Bcd2ToByte>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	789b      	ldrb	r3, [r3, #2]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f983 	bl	8003acc <RTC_Bcd2ToByte>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	7bdb      	ldrb	r3, [r3, #15]
 80037d2:	4618      	mov	r0, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	7b59      	ldrb	r1, [r3, #13]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	7b9b      	ldrb	r3, [r3, #14]
 80037dc:	461a      	mov	r2, r3
 80037de:	f000 f993 	bl	8003b08 <RTC_WeekDayNum>
 80037e2:	4603      	mov	r3, r0
 80037e4:	461a      	mov	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	7b1a      	ldrb	r2, [r3, #12]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f883 	bl	80038fe <RTC_ReadTimeCounter>
 80037f8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	4a26      	ldr	r2, [pc, #152]	; (8003898 <HAL_RTC_SetDate+0x160>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	0adb      	lsrs	r3, r3, #11
 8003804:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b18      	cmp	r3, #24
 800380a:	d93a      	bls.n	8003882 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	4a23      	ldr	r2, [pc, #140]	; (800389c <HAL_RTC_SetDate+0x164>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <HAL_RTC_SetDate+0x168>)
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003822:	69f9      	ldr	r1, [r7, #28]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f89a 	bl	800395e <RTC_WriteTimeCounter>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2204      	movs	r2, #4
 8003834:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e027      	b.n	8003890 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f8b3 	bl	80039ac <RTC_ReadAlarmCounter>
 8003846:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384e:	d018      	beq.n	8003882 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	429a      	cmp	r2, r3
 8003856:	d214      	bcs.n	8003882 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800385e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003862:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003864:	69b9      	ldr	r1, [r7, #24]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f8b9 	bl	80039de <RTC_WriteAlarmCounter>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d007      	beq.n	8003882 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2204      	movs	r2, #4
 8003876:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e006      	b.n	8003890 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	91a2b3c5 	.word	0x91a2b3c5
 800389c:	aaaaaaab 	.word	0xaaaaaaab
 80038a0:	00015180 	.word	0x00015180

080038a4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d101      	bne.n	80038ba <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e01d      	b.n	80038f6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0208 	bic.w	r2, r2, #8
 80038c8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80038ca:	f7fd f92d 	bl	8000b28 <HAL_GetTick>
 80038ce:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80038d0:	e009      	b.n	80038e6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038d2:	f7fd f929 	bl	8000b28 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038e0:	d901      	bls.n	80038e6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e007      	b.n	80038f6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 0308 	and.w	r3, r3, #8
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ee      	beq.n	80038d2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80038fe:	b480      	push	{r7}
 8003900:	b087      	sub	sp, #28
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8003906:	2300      	movs	r3, #0
 8003908:	827b      	strh	r3, [r7, #18]
 800390a:	2300      	movs	r3, #0
 800390c:	823b      	strh	r3, [r7, #16]
 800390e:	2300      	movs	r3, #0
 8003910:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800392e:	8a7a      	ldrh	r2, [r7, #18]
 8003930:	8a3b      	ldrh	r3, [r7, #16]
 8003932:	429a      	cmp	r2, r3
 8003934:	d008      	beq.n	8003948 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003936:	8a3b      	ldrh	r3, [r7, #16]
 8003938:	041a      	lsls	r2, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	b29b      	uxth	r3, r3
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]
 8003946:	e004      	b.n	8003952 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003948:	8a7b      	ldrh	r3, [r7, #18]
 800394a:	041a      	lsls	r2, r3, #16
 800394c:	89fb      	ldrh	r3, [r7, #14]
 800394e:	4313      	orrs	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003952:	697b      	ldr	r3, [r7, #20]
}
 8003954:	4618      	mov	r0, r3
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	bc80      	pop	{r7}
 800395c:	4770      	bx	lr

0800395e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f85d 	bl	8003a2c <RTC_EnterInitMode>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	e011      	b.n	80039a2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	0c12      	lsrs	r2, r2, #16
 8003986:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	b292      	uxth	r2, r2
 8003990:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f872 	bl	8003a7c <RTC_ExitInitMode>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3710      	adds	r7, #16
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}

080039ac <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	81fb      	strh	r3, [r7, #14]
 80039b8:	2300      	movs	r3, #0
 80039ba:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80039cc:	89fb      	ldrh	r3, [r7, #14]
 80039ce:	041a      	lsls	r2, r3, #16
 80039d0:	89bb      	ldrh	r3, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr

080039de <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f81d 	bl	8003a2c <RTC_EnterInitMode>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e011      	b.n	8003a22 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	0c12      	lsrs	r2, r2, #16
 8003a06:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	b292      	uxth	r2, r2
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f832 	bl	8003a7c <RTC_ExitInitMode>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003a38:	f7fd f876 	bl	8000b28 <HAL_GetTick>
 8003a3c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a3e:	e009      	b.n	8003a54 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a40:	f7fd f872 	bl	8000b28 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a4e:	d901      	bls.n	8003a54 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e00f      	b.n	8003a74 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d0ee      	beq.n	8003a40 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0210 	orr.w	r2, r2, #16
 8003a70:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0210 	bic.w	r2, r2, #16
 8003a96:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003a98:	f7fd f846 	bl	8000b28 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a9e:	e009      	b.n	8003ab4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003aa0:	f7fd f842 	bl	8000b28 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aae:	d901      	bls.n	8003ab4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e007      	b.n	8003ac4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 0320 	and.w	r3, r3, #32
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ee      	beq.n	8003aa0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	f003 030f 	and.w	r3, r3, #15
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	4413      	add	r3, r2
 8003afa:	b2db      	uxtb	r3, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bc80      	pop	{r7}
 8003b04:	4770      	bx	lr
	...

08003b08 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	460b      	mov	r3, r1
 8003b12:	70fb      	strb	r3, [r7, #3]
 8003b14:	4613      	mov	r3, r2
 8003b16:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	60bb      	str	r3, [r7, #8]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003b26:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d82d      	bhi.n	8003b8a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	4613      	mov	r3, r2
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	4413      	add	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	4a2c      	ldr	r2, [pc, #176]	; (8003bec <RTC_WeekDayNum+0xe4>)
 8003b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b40:	085a      	lsrs	r2, r3, #1
 8003b42:	78bb      	ldrb	r3, [r7, #2]
 8003b44:	441a      	add	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	441a      	add	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	089b      	lsrs	r3, r3, #2
 8003b50:	441a      	add	r2, r3
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	4926      	ldr	r1, [pc, #152]	; (8003bf0 <RTC_WeekDayNum+0xe8>)
 8003b58:	fba1 1303 	umull	r1, r3, r1, r3
 8003b5c:	095b      	lsrs	r3, r3, #5
 8003b5e:	1ad2      	subs	r2, r2, r3
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	3b01      	subs	r3, #1
 8003b64:	4922      	ldr	r1, [pc, #136]	; (8003bf0 <RTC_WeekDayNum+0xe8>)
 8003b66:	fba1 1303 	umull	r1, r3, r1, r3
 8003b6a:	09db      	lsrs	r3, r3, #7
 8003b6c:	4413      	add	r3, r2
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	4b20      	ldr	r3, [pc, #128]	; (8003bf4 <RTC_WeekDayNum+0xec>)
 8003b72:	fba3 1302 	umull	r1, r3, r3, r2
 8003b76:	1ad1      	subs	r1, r2, r3
 8003b78:	0849      	lsrs	r1, r1, #1
 8003b7a:	440b      	add	r3, r1
 8003b7c:	0899      	lsrs	r1, r3, #2
 8003b7e:	460b      	mov	r3, r1
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	1a5b      	subs	r3, r3, r1
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e029      	b.n	8003bde <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	005b      	lsls	r3, r3, #1
 8003b90:	4413      	add	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <RTC_WeekDayNum+0xe4>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	085a      	lsrs	r2, r3, #1
 8003b9e:	78bb      	ldrb	r3, [r7, #2]
 8003ba0:	441a      	add	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	441a      	add	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	441a      	add	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4910      	ldr	r1, [pc, #64]	; (8003bf0 <RTC_WeekDayNum+0xe8>)
 8003bb0:	fba1 1303 	umull	r1, r3, r1, r3
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	1ad2      	subs	r2, r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	490d      	ldr	r1, [pc, #52]	; (8003bf0 <RTC_WeekDayNum+0xe8>)
 8003bbc:	fba1 1303 	umull	r1, r3, r1, r3
 8003bc0:	09db      	lsrs	r3, r3, #7
 8003bc2:	4413      	add	r3, r2
 8003bc4:	1c9a      	adds	r2, r3, #2
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <RTC_WeekDayNum+0xec>)
 8003bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bcc:	1ad1      	subs	r1, r2, r3
 8003bce:	0849      	lsrs	r1, r1, #1
 8003bd0:	440b      	add	r3, r1
 8003bd2:	0899      	lsrs	r1, r3, #2
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	1a5b      	subs	r3, r3, r1
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	b2db      	uxtb	r3, r3
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bc80      	pop	{r7}
 8003bea:	4770      	bx	lr
 8003bec:	38e38e39 	.word	0x38e38e39
 8003bf0:	51eb851f 	.word	0x51eb851f
 8003bf4:	24924925 	.word	0x24924925

08003bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e041      	b.n	8003c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fc fde0 	bl	80007e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fa94 	bl	8004164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e041      	b.n	8003d2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d106      	bne.n	8003cc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7fc fdc1 	bl	8000844 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	4610      	mov	r0, r2
 8003cd6:	f000 fa45 	bl	8004164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d109      	bne.n	8003d58 <HAL_TIM_PWM_Start+0x24>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	bf14      	ite	ne
 8003d50:	2301      	movne	r3, #1
 8003d52:	2300      	moveq	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	e022      	b.n	8003d9e <HAL_TIM_PWM_Start+0x6a>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b04      	cmp	r3, #4
 8003d5c:	d109      	bne.n	8003d72 <HAL_TIM_PWM_Start+0x3e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	bf14      	ite	ne
 8003d6a:	2301      	movne	r3, #1
 8003d6c:	2300      	moveq	r3, #0
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	e015      	b.n	8003d9e <HAL_TIM_PWM_Start+0x6a>
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d109      	bne.n	8003d8c <HAL_TIM_PWM_Start+0x58>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	bf14      	ite	ne
 8003d84:	2301      	movne	r3, #1
 8003d86:	2300      	moveq	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e008      	b.n	8003d9e <HAL_TIM_PWM_Start+0x6a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	bf14      	ite	ne
 8003d98:	2301      	movne	r3, #1
 8003d9a:	2300      	moveq	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e05e      	b.n	8003e64 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d104      	bne.n	8003db6 <HAL_TIM_PWM_Start+0x82>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003db4:	e013      	b.n	8003dde <HAL_TIM_PWM_Start+0xaa>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b04      	cmp	r3, #4
 8003dba:	d104      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x92>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dc4:	e00b      	b.n	8003dde <HAL_TIM_PWM_Start+0xaa>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d104      	bne.n	8003dd6 <HAL_TIM_PWM_Start+0xa2>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dd4:	e003      	b.n	8003dde <HAL_TIM_PWM_Start+0xaa>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2202      	movs	r2, #2
 8003dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2201      	movs	r2, #1
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 fc3c 	bl	8004664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <HAL_TIM_PWM_Start+0x138>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d107      	bne.n	8003e06 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a18      	ldr	r2, [pc, #96]	; (8003e6c <HAL_TIM_PWM_Start+0x138>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_TIM_PWM_Start+0xfa>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e18:	d009      	beq.n	8003e2e <HAL_TIM_PWM_Start+0xfa>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a14      	ldr	r2, [pc, #80]	; (8003e70 <HAL_TIM_PWM_Start+0x13c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_TIM_PWM_Start+0xfa>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a12      	ldr	r2, [pc, #72]	; (8003e74 <HAL_TIM_PWM_Start+0x140>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d111      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0307 	and.w	r3, r3, #7
 8003e38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b06      	cmp	r3, #6
 8003e3e:	d010      	beq.n	8003e62 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e50:	e007      	b.n	8003e62 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40000400 	.word	0x40000400
 8003e74:	40000800 	.word	0x40000800

08003e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e0ac      	b.n	8003fec <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b0c      	cmp	r3, #12
 8003e9e:	f200 809f 	bhi.w	8003fe0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003edd 	.word	0x08003edd
 8003eac:	08003fe1 	.word	0x08003fe1
 8003eb0:	08003fe1 	.word	0x08003fe1
 8003eb4:	08003fe1 	.word	0x08003fe1
 8003eb8:	08003f1d 	.word	0x08003f1d
 8003ebc:	08003fe1 	.word	0x08003fe1
 8003ec0:	08003fe1 	.word	0x08003fe1
 8003ec4:	08003fe1 	.word	0x08003fe1
 8003ec8:	08003f5f 	.word	0x08003f5f
 8003ecc:	08003fe1 	.word	0x08003fe1
 8003ed0:	08003fe1 	.word	0x08003fe1
 8003ed4:	08003fe1 	.word	0x08003fe1
 8003ed8:	08003f9f 	.word	0x08003f9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 f9a0 	bl	8004228 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0208 	orr.w	r2, r2, #8
 8003ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	699a      	ldr	r2, [r3, #24]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 0204 	bic.w	r2, r2, #4
 8003f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6999      	ldr	r1, [r3, #24]
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	619a      	str	r2, [r3, #24]
      break;
 8003f1a:	e062      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 f9e6 	bl	80042f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699a      	ldr	r2, [r3, #24]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699a      	ldr	r2, [r3, #24]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6999      	ldr	r1, [r3, #24]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	021a      	lsls	r2, r3, #8
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	619a      	str	r2, [r3, #24]
      break;
 8003f5c:	e041      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fa2f 	bl	80043c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f042 0208 	orr.w	r2, r2, #8
 8003f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0204 	bic.w	r2, r2, #4
 8003f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	69d9      	ldr	r1, [r3, #28]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	61da      	str	r2, [r3, #28]
      break;
 8003f9c:	e021      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fa79 	bl	800449c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	69da      	ldr	r2, [r3, #28]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	69d9      	ldr	r1, [r3, #28]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	021a      	lsls	r2, r3, #8
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	61da      	str	r2, [r3, #28]
      break;
 8003fde:	e000      	b.n	8003fe2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIM_ConfigClockSource+0x18>
 8004008:	2302      	movs	r3, #2
 800400a:	e0a6      	b.n	800415a <HAL_TIM_ConfigClockSource+0x166>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800402a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004032:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	d067      	beq.n	8004114 <HAL_TIM_ConfigClockSource+0x120>
 8004044:	2b40      	cmp	r3, #64	; 0x40
 8004046:	d80b      	bhi.n	8004060 <HAL_TIM_ConfigClockSource+0x6c>
 8004048:	2b10      	cmp	r3, #16
 800404a:	d073      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0x140>
 800404c:	2b10      	cmp	r3, #16
 800404e:	d802      	bhi.n	8004056 <HAL_TIM_ConfigClockSource+0x62>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d06f      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004054:	e078      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004056:	2b20      	cmp	r3, #32
 8004058:	d06c      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0x140>
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d06a      	beq.n	8004134 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800405e:	e073      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004060:	2b70      	cmp	r3, #112	; 0x70
 8004062:	d00d      	beq.n	8004080 <HAL_TIM_ConfigClockSource+0x8c>
 8004064:	2b70      	cmp	r3, #112	; 0x70
 8004066:	d804      	bhi.n	8004072 <HAL_TIM_ConfigClockSource+0x7e>
 8004068:	2b50      	cmp	r3, #80	; 0x50
 800406a:	d033      	beq.n	80040d4 <HAL_TIM_ConfigClockSource+0xe0>
 800406c:	2b60      	cmp	r3, #96	; 0x60
 800406e:	d041      	beq.n	80040f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004070:	e06a      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004076:	d066      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x152>
 8004078:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800407c:	d017      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800407e:	e063      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	6899      	ldr	r1, [r3, #8]
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f000 fac9 	bl	8004626 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]
      break;
 80040ac:	e04c      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6818      	ldr	r0, [r3, #0]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	6899      	ldr	r1, [r3, #8]
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f000 fab2 	bl	8004626 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040d0:	609a      	str	r2, [r3, #8]
      break;
 80040d2:	e039      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6818      	ldr	r0, [r3, #0]
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	461a      	mov	r2, r3
 80040e2:	f000 fa29 	bl	8004538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2150      	movs	r1, #80	; 0x50
 80040ec:	4618      	mov	r0, r3
 80040ee:	f000 fa80 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 80040f2:	e029      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6818      	ldr	r0, [r3, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	461a      	mov	r2, r3
 8004102:	f000 fa47 	bl	8004594 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2160      	movs	r1, #96	; 0x60
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fa70 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 8004112:	e019      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	6859      	ldr	r1, [r3, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	461a      	mov	r2, r3
 8004122:	f000 fa09 	bl	8004538 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	4618      	mov	r0, r3
 800412e:	f000 fa60 	bl	80045f2 <TIM_ITRx_SetConfig>
      break;
 8004132:	e009      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4619      	mov	r1, r3
 800413e:	4610      	mov	r0, r2
 8004140:	f000 fa57 	bl	80045f2 <TIM_ITRx_SetConfig>
        break;
 8004144:	e000      	b.n	8004148 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004146:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004164:	b480      	push	{r7}
 8004166:	b085      	sub	sp, #20
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a29      	ldr	r2, [pc, #164]	; (800421c <TIM_Base_SetConfig+0xb8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00b      	beq.n	8004194 <TIM_Base_SetConfig+0x30>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004182:	d007      	beq.n	8004194 <TIM_Base_SetConfig+0x30>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a26      	ldr	r2, [pc, #152]	; (8004220 <TIM_Base_SetConfig+0xbc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_Base_SetConfig+0x30>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a25      	ldr	r2, [pc, #148]	; (8004224 <TIM_Base_SetConfig+0xc0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d108      	bne.n	80041a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a1c      	ldr	r2, [pc, #112]	; (800421c <TIM_Base_SetConfig+0xb8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <TIM_Base_SetConfig+0x62>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b4:	d007      	beq.n	80041c6 <TIM_Base_SetConfig+0x62>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a19      	ldr	r2, [pc, #100]	; (8004220 <TIM_Base_SetConfig+0xbc>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d003      	beq.n	80041c6 <TIM_Base_SetConfig+0x62>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a18      	ldr	r2, [pc, #96]	; (8004224 <TIM_Base_SetConfig+0xc0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d108      	bne.n	80041d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	695b      	ldr	r3, [r3, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689a      	ldr	r2, [r3, #8]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a07      	ldr	r2, [pc, #28]	; (800421c <TIM_Base_SetConfig+0xb8>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	615a      	str	r2, [r3, #20]
}
 8004212:	bf00      	nop
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	bc80      	pop	{r7}
 800421a:	4770      	bx	lr
 800421c:	40012c00 	.word	0x40012c00
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800

08004228 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004256:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0303 	bic.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 0302 	bic.w	r3, r3, #2
 8004270:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a1c      	ldr	r2, [pc, #112]	; (80042f0 <TIM_OC1_SetConfig+0xc8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d10c      	bne.n	800429e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f023 0308 	bic.w	r3, r3, #8
 800428a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f023 0304 	bic.w	r3, r3, #4
 800429c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <TIM_OC1_SetConfig+0xc8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d111      	bne.n	80042ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	4313      	orrs	r3, r2
 80042be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	621a      	str	r2, [r3, #32]
}
 80042e4:	bf00      	nop
 80042e6:	371c      	adds	r7, #28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr
 80042ee:	bf00      	nop
 80042f0:	40012c00 	.word	0x40012c00

080042f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	f023 0210 	bic.w	r2, r3, #16
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800432a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0320 	bic.w	r3, r3, #32
 800433e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a1d      	ldr	r2, [pc, #116]	; (80043c4 <TIM_OC2_SetConfig+0xd0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10d      	bne.n	8004370 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800435a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4313      	orrs	r3, r2
 8004366:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <TIM_OC2_SetConfig+0xd0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d113      	bne.n	80043a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800437e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	621a      	str	r2, [r3, #32]
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	bc80      	pop	{r7}
 80043c2:	4770      	bx	lr
 80043c4:	40012c00 	.word	0x40012c00

080043c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
 80043d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0303 	bic.w	r3, r3, #3
 80043fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004410:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <TIM_OC3_SetConfig+0xd0>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d10d      	bne.n	8004442 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800442c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a14      	ldr	r2, [pc, #80]	; (8004498 <TIM_OC3_SetConfig+0xd0>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d113      	bne.n	8004472 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	011b      	lsls	r3, r3, #4
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	4313      	orrs	r3, r2
 8004464:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	621a      	str	r2, [r3, #32]
}
 800448c:	bf00      	nop
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40012c00 	.word	0x40012c00

0800449c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	021b      	lsls	r3, r3, #8
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	4313      	orrs	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	693a      	ldr	r2, [r7, #16]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a0f      	ldr	r2, [pc, #60]	; (8004534 <TIM_OC4_SetConfig+0x98>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d109      	bne.n	8004510 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004502:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	621a      	str	r2, [r3, #32]
}
 800452a:	bf00      	nop
 800452c:	371c      	adds	r7, #28
 800452e:	46bd      	mov	sp, r7
 8004530:	bc80      	pop	{r7}
 8004532:	4770      	bx	lr
 8004534:	40012c00 	.word	0x40012c00

08004538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0201 	bic.w	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 030a 	bic.w	r3, r3, #10
 8004574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	bc80      	pop	{r7}
 8004592:	4770      	bx	lr

08004594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f023 0210 	bic.w	r2, r3, #16
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	031b      	lsls	r3, r3, #12
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr

080045f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b085      	sub	sp, #20
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004608:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	4313      	orrs	r3, r2
 8004610:	f043 0307 	orr.w	r3, r3, #7
 8004614:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	609a      	str	r2, [r3, #8]
}
 800461c:	bf00      	nop
 800461e:	3714      	adds	r7, #20
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004626:	b480      	push	{r7}
 8004628:	b087      	sub	sp, #28
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	607a      	str	r2, [r7, #4]
 8004632:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004640:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	021a      	lsls	r2, r3, #8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	431a      	orrs	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4313      	orrs	r3, r2
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	4313      	orrs	r3, r2
 8004652:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	609a      	str	r2, [r3, #8]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	bc80      	pop	{r7}
 8004662:	4770      	bx	lr

08004664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2201      	movs	r2, #1
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1a      	ldr	r2, [r3, #32]
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	43db      	mvns	r3, r3
 8004686:	401a      	ands	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a1a      	ldr	r2, [r3, #32]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	fa01 f303 	lsl.w	r3, r1, r3
 800469c:	431a      	orrs	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bc80      	pop	{r7}
 80046aa:	4770      	bx	lr

080046ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d101      	bne.n	80046c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046c0:	2302      	movs	r3, #2
 80046c2:	e046      	b.n	8004752 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a16      	ldr	r2, [pc, #88]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00e      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004710:	d009      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a12      	ldr	r2, [pc, #72]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a10      	ldr	r2, [pc, #64]	; (8004764 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10c      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800472c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	4313      	orrs	r3, r2
 8004736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3714      	adds	r7, #20
 8004756:	46bd      	mov	sp, r7
 8004758:	bc80      	pop	{r7}
 800475a:	4770      	bx	lr
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800

08004768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e03f      	b.n	80047fa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fc f8c6 	bl	8000920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2224      	movs	r2, #36	; 0x24
 8004798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f829 	bl	8004804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68da      	ldr	r2, [r3, #12]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	431a      	orrs	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800483e:	f023 030c 	bic.w	r3, r3, #12
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	430b      	orrs	r3, r1
 800484a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699a      	ldr	r2, [r3, #24]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a2c      	ldr	r2, [pc, #176]	; (8004918 <UART_SetConfig+0x114>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d103      	bne.n	8004874 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800486c:	f7fe fc92 	bl	8003194 <HAL_RCC_GetPCLK2Freq>
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	e002      	b.n	800487a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004874:	f7fe fc7a 	bl	800316c <HAL_RCC_GetPCLK1Freq>
 8004878:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	009a      	lsls	r2, r3, #2
 8004884:	441a      	add	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	4a22      	ldr	r2, [pc, #136]	; (800491c <UART_SetConfig+0x118>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	0119      	lsls	r1, r3, #4
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4613      	mov	r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4413      	add	r3, r2
 80048a2:	009a      	lsls	r2, r3, #2
 80048a4:	441a      	add	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80048b0:	4b1a      	ldr	r3, [pc, #104]	; (800491c <UART_SetConfig+0x118>)
 80048b2:	fba3 0302 	umull	r0, r3, r3, r2
 80048b6:	095b      	lsrs	r3, r3, #5
 80048b8:	2064      	movs	r0, #100	; 0x64
 80048ba:	fb00 f303 	mul.w	r3, r0, r3
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	3332      	adds	r3, #50	; 0x32
 80048c4:	4a15      	ldr	r2, [pc, #84]	; (800491c <UART_SetConfig+0x118>)
 80048c6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ca:	095b      	lsrs	r3, r3, #5
 80048cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048d0:	4419      	add	r1, r3
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	009a      	lsls	r2, r3, #2
 80048dc:	441a      	add	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <UART_SetConfig+0x118>)
 80048ea:	fba3 0302 	umull	r0, r3, r3, r2
 80048ee:	095b      	lsrs	r3, r3, #5
 80048f0:	2064      	movs	r0, #100	; 0x64
 80048f2:	fb00 f303 	mul.w	r3, r0, r3
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	3332      	adds	r3, #50	; 0x32
 80048fc:	4a07      	ldr	r2, [pc, #28]	; (800491c <UART_SetConfig+0x118>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	095b      	lsrs	r3, r3, #5
 8004904:	f003 020f 	and.w	r2, r3, #15
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	440a      	add	r2, r1
 800490e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004910:	bf00      	nop
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40013800 	.word	0x40013800
 800491c:	51eb851f 	.word	0x51eb851f

08004920 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004920:	b084      	sub	sp, #16
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	f107 0014 	add.w	r0, r7, #20
 800492e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	b004      	add	sp, #16
 800493e:	4770      	bx	lr

08004940 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004940:	b480      	push	{r7}
 8004942:	b085      	sub	sp, #20
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004950:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004954:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	b29a      	uxth	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004974:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004978:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	b29b      	uxth	r3, r3
 8004986:	43db      	mvns	r3, r3
 8004988:	b29b      	uxth	r3, r3
 800498a:	4013      	ands	r3, r2
 800498c:	b29a      	uxth	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	460b      	mov	r3, r1
 80049aa:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80049b8:	b084      	sub	sp, #16
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	f107 0014 	add.w	r0, r7, #20
 80049c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bc80      	pop	{r7}
 80049f4:	b004      	add	sp, #16
 80049f6:	4770      	bx	lr

080049f8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b09b      	sub	sp, #108	; 0x6c
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	78db      	ldrb	r3, [r3, #3]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d81f      	bhi.n	8004a6a <USB_ActivateEndpoint+0x72>
 8004a2a:	a201      	add	r2, pc, #4	; (adr r2, 8004a30 <USB_ActivateEndpoint+0x38>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a41 	.word	0x08004a41
 8004a34:	08004a5d 	.word	0x08004a5d
 8004a38:	08004a73 	.word	0x08004a73
 8004a3c:	08004a4f 	.word	0x08004a4f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004a40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a48:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a4c:	e012      	b.n	8004a74 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004a4e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a52:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8004a56:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a5a:	e00b      	b.n	8004a74 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004a5c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a64:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004a68:	e004      	b.n	8004a74 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004a70:	e000      	b.n	8004a74 <USB_ActivateEndpoint+0x7c>
      break;
 8004a72:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	441a      	add	r2, r3
 8004a7e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004a82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	441a      	add	r2, r3
 8004ac4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004ac8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004acc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	7b1b      	ldrb	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f040 8149 	bne.w	8004d78 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 8084 	beq.w	8004bf8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	617b      	str	r3, [r7, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	4413      	add	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	011a      	lsls	r2, r3, #4
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	88db      	ldrh	r3, [r3, #6]
 8004b18:	085b      	lsrs	r3, r3, #1
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	81fb      	strh	r3, [r7, #14]
 8004b32:	89fb      	ldrh	r3, [r7, #14]
 8004b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d01b      	beq.n	8004b74 <USB_ActivateEndpoint+0x17c>
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	881b      	ldrh	r3, [r3, #0]
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b52:	81bb      	strh	r3, [r7, #12]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	441a      	add	r2, r3
 8004b5e:	89bb      	ldrh	r3, [r7, #12]
 8004b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	78db      	ldrb	r3, [r3, #3]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d020      	beq.n	8004bbe <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	4413      	add	r3, r2
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b92:	813b      	strh	r3, [r7, #8]
 8004b94:	893b      	ldrh	r3, [r7, #8]
 8004b96:	f083 0320 	eor.w	r3, r3, #32
 8004b9a:	813b      	strh	r3, [r7, #8]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	893b      	ldrh	r3, [r7, #8]
 8004ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	8013      	strh	r3, [r2, #0]
 8004bbc:	e27f      	b.n	80050be <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd4:	817b      	strh	r3, [r7, #10]
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	441a      	add	r2, r3
 8004be0:	897b      	ldrh	r3, [r7, #10]
 8004be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	8013      	strh	r3, [r2, #0]
 8004bf6:	e262      	b.n	80050be <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	4413      	add	r3, r2
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	011a      	lsls	r2, r3, #4
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	88db      	ldrh	r3, [r3, #6]
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	4413      	add	r3, r2
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	011a      	lsls	r2, r3, #4
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	4413      	add	r3, r2
 8004c4a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c4e:	623b      	str	r3, [r7, #32]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d112      	bne.n	8004c7e <USB_ActivateEndpoint+0x286>
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	881b      	ldrh	r3, [r3, #0]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	6a3b      	ldr	r3, [r7, #32]
 8004c66:	801a      	strh	r2, [r3, #0]
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	801a      	strh	r2, [r3, #0]
 8004c7c:	e02f      	b.n	8004cde <USB_ActivateEndpoint+0x2e6>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b3e      	cmp	r3, #62	; 0x3e
 8004c84:	d813      	bhi.n	8004cae <USB_ActivateEndpoint+0x2b6>
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	663b      	str	r3, [r7, #96]	; 0x60
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0301 	and.w	r3, r3, #1
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d002      	beq.n	8004ca0 <USB_ActivateEndpoint+0x2a8>
 8004c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	663b      	str	r3, [r7, #96]	; 0x60
 8004ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	029b      	lsls	r3, r3, #10
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e017      	b.n	8004cde <USB_ActivateEndpoint+0x2e6>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	663b      	str	r3, [r7, #96]	; 0x60
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	f003 031f 	and.w	r3, r3, #31
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d102      	bne.n	8004cc8 <USB_ActivateEndpoint+0x2d0>
 8004cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	663b      	str	r3, [r7, #96]	; 0x60
 8004cc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	029b      	lsls	r3, r3, #10
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	83fb      	strh	r3, [r7, #30]
 8004cec:	8bfb      	ldrh	r3, [r7, #30]
 8004cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01b      	beq.n	8004d2e <USB_ActivateEndpoint+0x336>
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d0c:	83bb      	strh	r3, [r7, #28]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	441a      	add	r2, r3
 8004d18:	8bbb      	ldrh	r3, [r7, #28]
 8004d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	837b      	strh	r3, [r7, #26]
 8004d46:	8b7b      	ldrh	r3, [r7, #26]
 8004d48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004d4c:	837b      	strh	r3, [r7, #26]
 8004d4e:	8b7b      	ldrh	r3, [r7, #26]
 8004d50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004d54:	837b      	strh	r3, [r7, #26]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	441a      	add	r2, r3
 8004d60:	8b7b      	ldrh	r3, [r7, #26]
 8004d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	8013      	strh	r3, [r2, #0]
 8004d76:	e1a2      	b.n	80050be <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	881b      	ldrh	r3, [r3, #0]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	441a      	add	r2, r3
 8004d9c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004da8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dc4:	4413      	add	r3, r2
 8004dc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	011a      	lsls	r2, r3, #4
 8004dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	891b      	ldrh	r3, [r3, #8]
 8004ddc:	085b      	lsrs	r3, r3, #1
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	005b      	lsls	r3, r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	653b      	str	r3, [r7, #80]	; 0x50
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	461a      	mov	r2, r3
 8004df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df8:	4413      	add	r3, r2
 8004dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	011a      	lsls	r2, r3, #4
 8004e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	895b      	ldrh	r3, [r3, #10]
 8004e10:	085b      	lsrs	r3, r3, #1
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	785b      	ldrb	r3, [r3, #1]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f040 8091 	bne.w	8004f48 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4413      	add	r3, r2
 8004e30:	881b      	ldrh	r3, [r3, #0]
 8004e32:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004e34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d01b      	beq.n	8004e76 <USB_ActivateEndpoint+0x47e>
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e54:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	441a      	add	r2, r3
 8004e60:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	873b      	strh	r3, [r7, #56]	; 0x38
 8004e84:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01b      	beq.n	8004ec6 <USB_ActivateEndpoint+0x4ce>
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ebe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004edc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ede:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ee0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004ee4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004ee6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ee8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004eec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	441a      	add	r2, r3
 8004ef8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004efa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004efe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	881b      	ldrh	r3, [r3, #0]
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f24:	867b      	strh	r3, [r7, #50]	; 0x32
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	441a      	add	r2, r3
 8004f30:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	8013      	strh	r3, [r2, #0]
 8004f46:	e0ba      	b.n	80050be <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d01d      	beq.n	8004fa0 <USB_ActivateEndpoint+0x5a8>
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	881b      	ldrh	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	441a      	add	r2, r3
 8004f88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004fb0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01d      	beq.n	8004ff8 <USB_ActivateEndpoint+0x600>
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	441a      	add	r2, r3
 8004fe0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004fe4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fe8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	78db      	ldrb	r3, [r3, #3]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d024      	beq.n	800504a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	881b      	ldrh	r3, [r3, #0]
 800500c:	b29b      	uxth	r3, r3
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005016:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800501a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800501e:	f083 0320 	eor.w	r3, r3, #32
 8005022:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	441a      	add	r2, r3
 8005030:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005034:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005038:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800503c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	b29b      	uxth	r3, r3
 8005046:	8013      	strh	r3, [r2, #0]
 8005048:	e01d      	b.n	8005086 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800505c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005060:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005072:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005076:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800507a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800507e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005082:	b29b      	uxth	r3, r3
 8005084:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4413      	add	r3, r2
 8005090:	881b      	ldrh	r3, [r3, #0]
 8005092:	b29b      	uxth	r3, r3
 8005094:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005098:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800509c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	441a      	add	r2, r3
 80050a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80050aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80050be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	376c      	adds	r7, #108	; 0x6c
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bc80      	pop	{r7}
 80050ca:	4770      	bx	lr

080050cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b08d      	sub	sp, #52	; 0x34
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	7b1b      	ldrb	r3, [r3, #12]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f040 808e 	bne.w	80051fc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	785b      	ldrb	r3, [r3, #1]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d044      	beq.n	8005172 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	881b      	ldrh	r3, [r3, #0]
 80050f4:	81bb      	strh	r3, [r7, #12]
 80050f6:	89bb      	ldrh	r3, [r7, #12]
 80050f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d01b      	beq.n	8005138 <USB_DeactivateEndpoint+0x6c>
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005116:	817b      	strh	r3, [r7, #10]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	897b      	ldrh	r3, [r7, #10]
 8005124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800512c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005130:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005134:	b29b      	uxth	r3, r3
 8005136:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	881b      	ldrh	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800514a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800514e:	813b      	strh	r3, [r7, #8]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	441a      	add	r2, r3
 800515a:	893b      	ldrh	r3, [r7, #8]
 800515c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516c:	b29b      	uxth	r3, r3
 800516e:	8013      	strh	r3, [r2, #0]
 8005170:	e192      	b.n	8005498 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	827b      	strh	r3, [r7, #18]
 8005180:	8a7b      	ldrh	r3, [r7, #18]
 8005182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01b      	beq.n	80051c2 <USB_DeactivateEndpoint+0xf6>
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	b29b      	uxth	r3, r3
 8005198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800519c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a0:	823b      	strh	r3, [r7, #16]
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	441a      	add	r2, r3
 80051ac:	8a3b      	ldrh	r3, [r7, #16]
 80051ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80051ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051be:	b29b      	uxth	r3, r3
 80051c0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051d8:	81fb      	strh	r3, [r7, #14]
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	441a      	add	r2, r3
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	8013      	strh	r3, [r2, #0]
 80051fa:	e14d      	b.n	8005498 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	785b      	ldrb	r3, [r3, #1]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f040 80a5 	bne.w	8005350 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	843b      	strh	r3, [r7, #32]
 8005214:	8c3b      	ldrh	r3, [r7, #32]
 8005216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d01b      	beq.n	8005256 <USB_DeactivateEndpoint+0x18a>
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	4413      	add	r3, r2
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005234:	83fb      	strh	r3, [r7, #30]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	441a      	add	r2, r3
 8005240:	8bfb      	ldrh	r3, [r7, #30]
 8005242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800524a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800524e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005252:	b29b      	uxth	r3, r3
 8005254:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	881b      	ldrh	r3, [r3, #0]
 8005262:	83bb      	strh	r3, [r7, #28]
 8005264:	8bbb      	ldrh	r3, [r7, #28]
 8005266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800526a:	2b00      	cmp	r3, #0
 800526c:	d01b      	beq.n	80052a6 <USB_DeactivateEndpoint+0x1da>
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005284:	837b      	strh	r3, [r7, #26]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	009b      	lsls	r3, r3, #2
 800528e:	441a      	add	r2, r3
 8005290:	8b7b      	ldrh	r3, [r7, #26]
 8005292:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005296:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800529a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800529e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	881b      	ldrh	r3, [r3, #0]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052bc:	833b      	strh	r3, [r7, #24]
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	441a      	add	r2, r3
 80052c8:	8b3b      	ldrh	r3, [r7, #24]
 80052ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80052da:	b29b      	uxth	r3, r3
 80052dc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4413      	add	r3, r2
 80052e8:	881b      	ldrh	r3, [r3, #0]
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f4:	82fb      	strh	r3, [r7, #22]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	441a      	add	r2, r3
 8005300:	8afb      	ldrh	r3, [r7, #22]
 8005302:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005306:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005312:	b29b      	uxth	r3, r3
 8005314:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005316:	687a      	ldr	r2, [r7, #4]
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	881b      	ldrh	r3, [r3, #0]
 8005322:	b29b      	uxth	r3, r3
 8005324:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800532c:	82bb      	strh	r3, [r7, #20]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	009b      	lsls	r3, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	8abb      	ldrh	r3, [r7, #20]
 800533a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800533e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800534a:	b29b      	uxth	r3, r3
 800534c:	8013      	strh	r3, [r2, #0]
 800534e:	e0a3      	b.n	8005498 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4413      	add	r3, r2
 800535a:	881b      	ldrh	r3, [r3, #0]
 800535c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800535e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d01b      	beq.n	80053a0 <USB_DeactivateEndpoint+0x2d4>
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	881b      	ldrh	r3, [r3, #0]
 8005374:	b29b      	uxth	r3, r3
 8005376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	441a      	add	r2, r3
 800538a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800538c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800539c:	b29b      	uxth	r3, r3
 800539e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80053ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80053b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d01b      	beq.n	80053f0 <USB_DeactivateEndpoint+0x324>
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	009b      	lsls	r3, r3, #2
 80053c0:	4413      	add	r3, r2
 80053c2:	881b      	ldrh	r3, [r3, #0]
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053ce:	853b      	strh	r3, [r7, #40]	; 0x28
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	441a      	add	r2, r3
 80053da:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80053dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80053e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80053e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	441a      	add	r2, r3
 8005412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800541c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005424:	b29b      	uxth	r3, r3
 8005426:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	881b      	ldrh	r3, [r3, #0]
 8005434:	b29b      	uxth	r3, r3
 8005436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800543a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800543e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	441a      	add	r2, r3
 800544a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800544c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800545c:	b29b      	uxth	r3, r3
 800545e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4413      	add	r3, r2
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	847b      	strh	r3, [r7, #34]	; 0x22
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	441a      	add	r2, r3
 8005482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005484:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005488:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800548c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005490:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005494:	b29b      	uxth	r3, r3
 8005496:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3734      	adds	r7, #52	; 0x34
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b0cc      	sub	sp, #304	; 0x130
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	1d3b      	adds	r3, r7, #4
 80054ac:	6018      	str	r0, [r3, #0]
 80054ae:	463b      	mov	r3, r7
 80054b0:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054b2:	463b      	mov	r3, r7
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	f040 872e 	bne.w	800631a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80054be:	463b      	mov	r3, r7
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	699a      	ldr	r2, [r3, #24]
 80054c4:	463b      	mov	r3, r7
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d905      	bls.n	80054da <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 80054ce:	463b      	mov	r3, r7
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80054d8:	e004      	b.n	80054e4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80054da:	463b      	mov	r3, r7
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80054e4:	463b      	mov	r3, r7
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	7b1b      	ldrb	r3, [r3, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d134      	bne.n	8005558 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80054ee:	463b      	mov	r3, r7
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	6959      	ldr	r1, [r3, #20]
 80054f4:	463b      	mov	r3, r7
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	88da      	ldrh	r2, [r3, #6]
 80054fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054fe:	b29b      	uxth	r3, r3
 8005500:	1d38      	adds	r0, r7, #4
 8005502:	6800      	ldr	r0, [r0, #0]
 8005504:	f001 fc03 	bl	8006d0e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005508:	f107 0310 	add.w	r3, r7, #16
 800550c:	1d3a      	adds	r2, r7, #4
 800550e:	6812      	ldr	r2, [r2, #0]
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	1d3b      	adds	r3, r7, #4
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800551a:	b29b      	uxth	r3, r3
 800551c:	4619      	mov	r1, r3
 800551e:	f107 0310 	add.w	r3, r7, #16
 8005522:	f107 0210 	add.w	r2, r7, #16
 8005526:	6812      	ldr	r2, [r2, #0]
 8005528:	440a      	add	r2, r1
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	463b      	mov	r3, r7
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	011a      	lsls	r2, r3, #4
 8005534:	f107 0310 	add.w	r3, r7, #16
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4413      	add	r3, r2
 800553c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005540:	f107 030c 	add.w	r3, r7, #12
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554a:	b29a      	uxth	r2, r3
 800554c:	f107 030c 	add.w	r3, r7, #12
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	801a      	strh	r2, [r3, #0]
 8005554:	f000 beac 	b.w	80062b0 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8005558:	463b      	mov	r3, r7
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	78db      	ldrb	r3, [r3, #3]
 800555e:	2b02      	cmp	r3, #2
 8005560:	f040 838c 	bne.w	8005c7c <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8005564:	463b      	mov	r3, r7
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6a1a      	ldr	r2, [r3, #32]
 800556a:	463b      	mov	r3, r7
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	429a      	cmp	r2, r3
 8005572:	f240 8330 	bls.w	8005bd6 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8005576:	1d3b      	adds	r3, r7, #4
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	463b      	mov	r3, r7
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	881b      	ldrh	r3, [r3, #0]
 8005586:	b29b      	uxth	r3, r3
 8005588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005590:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005594:	1d3b      	adds	r3, r7, #4
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	463b      	mov	r3, r7
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	441a      	add	r2, r3
 80055a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055ae:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80055b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80055ba:	463b      	mov	r3, r7
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	6a1a      	ldr	r2, [r3, #32]
 80055c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055c4:	1ad2      	subs	r2, r2, r3
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80055cc:	1d3b      	adds	r3, r7, #4
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	463b      	mov	r3, r7
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	b29b      	uxth	r3, r3
 80055de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 819e 	beq.w	8005924 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80055e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055ec:	1d3a      	adds	r2, r7, #4
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	601a      	str	r2, [r3, #0]
 80055f2:	463b      	mov	r3, r7
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d17a      	bne.n	80056f2 <USB_EPStartXfer+0x24e>
 80055fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005600:	1d3a      	adds	r2, r7, #4
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	1d3b      	adds	r3, r7, #4
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800560e:	b29b      	uxth	r3, r3
 8005610:	4619      	mov	r1, r3
 8005612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005616:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	440a      	add	r2, r1
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	463b      	mov	r3, r7
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	011a      	lsls	r2, r3, #4
 8005628:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4413      	add	r3, r2
 8005630:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8005634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563e:	2b00      	cmp	r3, #0
 8005640:	d11a      	bne.n	8005678 <USB_EPStartXfer+0x1d4>
 8005642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	881b      	ldrh	r3, [r3, #0]
 800564a:	b29b      	uxth	r3, r3
 800564c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005650:	b29a      	uxth	r2, r3
 8005652:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	801a      	strh	r2, [r3, #0]
 800565a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b29b      	uxth	r3, r3
 8005664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800566c:	b29a      	uxth	r2, r3
 800566e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	e062      	b.n	800573e <USB_EPStartXfer+0x29a>
 8005678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800567c:	2b3e      	cmp	r3, #62	; 0x3e
 800567e:	d819      	bhi.n	80056b4 <USB_EPStartXfer+0x210>
 8005680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005684:	085b      	lsrs	r3, r3, #1
 8005686:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800568a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <USB_EPStartXfer+0x1fc>
 8005696:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800569a:	3301      	adds	r3, #1
 800569c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	029b      	lsls	r3, r3, #10
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	801a      	strh	r2, [r3, #0]
 80056b2:	e044      	b.n	800573e <USB_EPStartXfer+0x29a>
 80056b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b8:	095b      	lsrs	r3, r3, #5
 80056ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c2:	f003 031f 	and.w	r3, r3, #31
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <USB_EPStartXfer+0x230>
 80056ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056ce:	3b01      	subs	r3, #1
 80056d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80056d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80056d8:	b29b      	uxth	r3, r3
 80056da:	029b      	lsls	r3, r3, #10
 80056dc:	b29b      	uxth	r3, r3
 80056de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	801a      	strh	r2, [r3, #0]
 80056f0:	e025      	b.n	800573e <USB_EPStartXfer+0x29a>
 80056f2:	463b      	mov	r3, r7
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	785b      	ldrb	r3, [r3, #1]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d120      	bne.n	800573e <USB_EPStartXfer+0x29a>
 80056fc:	1d3b      	adds	r3, r7, #4
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005704:	b29b      	uxth	r3, r3
 8005706:	4619      	mov	r1, r3
 8005708:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800570c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	440a      	add	r2, r1
 8005714:	601a      	str	r2, [r3, #0]
 8005716:	463b      	mov	r3, r7
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	011a      	lsls	r2, r3, #4
 800571e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4413      	add	r3, r2
 8005726:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800572a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800572e:	601a      	str	r2, [r3, #0]
 8005730:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005734:	b29a      	uxth	r2, r3
 8005736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800573e:	463b      	mov	r3, r7
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	895b      	ldrh	r3, [r3, #10]
 8005744:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005748:	463b      	mov	r3, r7
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6959      	ldr	r1, [r3, #20]
 800574e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005752:	b29b      	uxth	r3, r3
 8005754:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005758:	1d38      	adds	r0, r7, #4
 800575a:	6800      	ldr	r0, [r0, #0]
 800575c:	f001 fad7 	bl	8006d0e <USB_WritePMA>
            ep->xfer_buff += len;
 8005760:	463b      	mov	r3, r7
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	695a      	ldr	r2, [r3, #20]
 8005766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800576a:	441a      	add	r2, r3
 800576c:	463b      	mov	r3, r7
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005772:	463b      	mov	r3, r7
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6a1a      	ldr	r2, [r3, #32]
 8005778:	463b      	mov	r3, r7
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	429a      	cmp	r2, r3
 8005780:	d909      	bls.n	8005796 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005782:	463b      	mov	r3, r7
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6a1a      	ldr	r2, [r3, #32]
 8005788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	463b      	mov	r3, r7
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	621a      	str	r2, [r3, #32]
 8005794:	e008      	b.n	80057a8 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005796:	463b      	mov	r3, r7
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80057a0:	463b      	mov	r3, r7
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2200      	movs	r2, #0
 80057a6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057a8:	463b      	mov	r3, r7
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d17a      	bne.n	80058a8 <USB_EPStartXfer+0x404>
 80057b2:	f107 0318 	add.w	r3, r7, #24
 80057b6:	1d3a      	adds	r2, r7, #4
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	1d3b      	adds	r3, r7, #4
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	4619      	mov	r1, r3
 80057c8:	f107 0318 	add.w	r3, r7, #24
 80057cc:	f107 0218 	add.w	r2, r7, #24
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	440a      	add	r2, r1
 80057d4:	601a      	str	r2, [r3, #0]
 80057d6:	463b      	mov	r3, r7
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	011a      	lsls	r2, r3, #4
 80057de:	f107 0318 	add.w	r3, r7, #24
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4413      	add	r3, r2
 80057e6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80057ea:	f107 0314 	add.w	r3, r7, #20
 80057ee:	601a      	str	r2, [r3, #0]
 80057f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d11a      	bne.n	800582e <USB_EPStartXfer+0x38a>
 80057f8:	f107 0314 	add.w	r3, r7, #20
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	881b      	ldrh	r3, [r3, #0]
 8005800:	b29b      	uxth	r3, r3
 8005802:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005806:	b29a      	uxth	r2, r3
 8005808:	f107 0314 	add.w	r3, r7, #20
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	801a      	strh	r2, [r3, #0]
 8005810:	f107 0314 	add.w	r3, r7, #20
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	b29b      	uxth	r3, r3
 800581a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005822:	b29a      	uxth	r2, r3
 8005824:	f107 0314 	add.w	r3, r7, #20
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e067      	b.n	80058fe <USB_EPStartXfer+0x45a>
 800582e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005832:	2b3e      	cmp	r3, #62	; 0x3e
 8005834:	d819      	bhi.n	800586a <USB_EPStartXfer+0x3c6>
 8005836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d004      	beq.n	8005856 <USB_EPStartXfer+0x3b2>
 800584c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005850:	3301      	adds	r3, #1
 8005852:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005856:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800585a:	b29b      	uxth	r3, r3
 800585c:	029b      	lsls	r3, r3, #10
 800585e:	b29a      	uxth	r2, r3
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	801a      	strh	r2, [r3, #0]
 8005868:	e049      	b.n	80058fe <USB_EPStartXfer+0x45a>
 800586a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <USB_EPStartXfer+0x3e6>
 8005880:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005884:	3b01      	subs	r3, #1
 8005886:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800588a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800588e:	b29b      	uxth	r3, r3
 8005890:	029b      	lsls	r3, r3, #10
 8005892:	b29b      	uxth	r3, r3
 8005894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589c:	b29a      	uxth	r2, r3
 800589e:	f107 0314 	add.w	r3, r7, #20
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	801a      	strh	r2, [r3, #0]
 80058a6:	e02a      	b.n	80058fe <USB_EPStartXfer+0x45a>
 80058a8:	463b      	mov	r3, r7
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	785b      	ldrb	r3, [r3, #1]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d125      	bne.n	80058fe <USB_EPStartXfer+0x45a>
 80058b2:	f107 0320 	add.w	r3, r7, #32
 80058b6:	1d3a      	adds	r2, r7, #4
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	1d3b      	adds	r3, r7, #4
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	4619      	mov	r1, r3
 80058c8:	f107 0320 	add.w	r3, r7, #32
 80058cc:	f107 0220 	add.w	r2, r7, #32
 80058d0:	6812      	ldr	r2, [r2, #0]
 80058d2:	440a      	add	r2, r1
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	463b      	mov	r3, r7
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	011a      	lsls	r2, r3, #4
 80058de:	f107 0320 	add.w	r3, r7, #32
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4413      	add	r3, r2
 80058e6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80058ea:	f107 031c 	add.w	r3, r7, #28
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	f107 031c 	add.w	r3, r7, #28
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80058fe:	463b      	mov	r3, r7
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	891b      	ldrh	r3, [r3, #8]
 8005904:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005908:	463b      	mov	r3, r7
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6959      	ldr	r1, [r3, #20]
 800590e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005912:	b29b      	uxth	r3, r3
 8005914:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005918:	1d38      	adds	r0, r7, #4
 800591a:	6800      	ldr	r0, [r0, #0]
 800591c:	f001 f9f7 	bl	8006d0e <USB_WritePMA>
 8005920:	f000 bcc6 	b.w	80062b0 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005924:	463b      	mov	r3, r7
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	785b      	ldrb	r3, [r3, #1]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d164      	bne.n	80059f8 <USB_EPStartXfer+0x554>
 800592e:	1d3b      	adds	r3, r7, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	64bb      	str	r3, [r7, #72]	; 0x48
 8005934:	1d3b      	adds	r3, r7, #4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593c:	b29b      	uxth	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005942:	4413      	add	r3, r2
 8005944:	64bb      	str	r3, [r7, #72]	; 0x48
 8005946:	463b      	mov	r3, r7
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	011a      	lsls	r2, r3, #4
 800594e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005950:	4413      	add	r3, r2
 8005952:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005956:	647b      	str	r3, [r7, #68]	; 0x44
 8005958:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d112      	bne.n	8005986 <USB_EPStartXfer+0x4e2>
 8005960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800596a:	b29a      	uxth	r2, r3
 800596c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800596e:	801a      	strh	r2, [r3, #0]
 8005970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597e:	b29a      	uxth	r2, r3
 8005980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e057      	b.n	8005a36 <USB_EPStartXfer+0x592>
 8005986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598a:	2b3e      	cmp	r3, #62	; 0x3e
 800598c:	d817      	bhi.n	80059be <USB_EPStartXfer+0x51a>
 800598e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005992:	085b      	lsrs	r3, r3, #1
 8005994:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005998:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d004      	beq.n	80059ae <USB_EPStartXfer+0x50a>
 80059a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059a8:	3301      	adds	r3, #1
 80059aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	029b      	lsls	r3, r3, #10
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059ba:	801a      	strh	r2, [r3, #0]
 80059bc:	e03b      	b.n	8005a36 <USB_EPStartXfer+0x592>
 80059be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059cc:	f003 031f 	and.w	r3, r3, #31
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d104      	bne.n	80059de <USB_EPStartXfer+0x53a>
 80059d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059d8:	3b01      	subs	r3, #1
 80059da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80059de:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	029b      	lsls	r3, r3, #10
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f4:	801a      	strh	r2, [r3, #0]
 80059f6:	e01e      	b.n	8005a36 <USB_EPStartXfer+0x592>
 80059f8:	463b      	mov	r3, r7
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	785b      	ldrb	r3, [r3, #1]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d119      	bne.n	8005a36 <USB_EPStartXfer+0x592>
 8005a02:	1d3b      	adds	r3, r7, #4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	653b      	str	r3, [r7, #80]	; 0x50
 8005a08:	1d3b      	adds	r3, r7, #4
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	461a      	mov	r2, r3
 8005a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a16:	4413      	add	r3, r2
 8005a18:	653b      	str	r3, [r7, #80]	; 0x50
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	011a      	lsls	r2, r3, #4
 8005a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a24:	4413      	add	r3, r2
 8005a26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005a36:	463b      	mov	r3, r7
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	891b      	ldrh	r3, [r3, #8]
 8005a3c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a40:	463b      	mov	r3, r7
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6959      	ldr	r1, [r3, #20]
 8005a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a50:	1d38      	adds	r0, r7, #4
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	f001 f95b 	bl	8006d0e <USB_WritePMA>
            ep->xfer_buff += len;
 8005a58:	463b      	mov	r3, r7
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695a      	ldr	r2, [r3, #20]
 8005a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a62:	441a      	add	r2, r3
 8005a64:	463b      	mov	r3, r7
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6a1a      	ldr	r2, [r3, #32]
 8005a70:	463b      	mov	r3, r7
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d909      	bls.n	8005a8e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8005a7a:	463b      	mov	r3, r7
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	6a1a      	ldr	r2, [r3, #32]
 8005a80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a84:	1ad2      	subs	r2, r2, r3
 8005a86:	463b      	mov	r3, r7
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	621a      	str	r2, [r3, #32]
 8005a8c:	e008      	b.n	8005aa0 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8005a8e:	463b      	mov	r3, r7
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6a1b      	ldr	r3, [r3, #32]
 8005a94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005a98:	463b      	mov	r3, r7
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005aa0:	1d3b      	adds	r3, r7, #4
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8005aa6:	463b      	mov	r3, r7
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	785b      	ldrb	r3, [r3, #1]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d164      	bne.n	8005b7a <USB_EPStartXfer+0x6d6>
 8005ab0:	1d3b      	adds	r3, r7, #4
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ab6:	1d3b      	adds	r3, r7, #4
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	4413      	add	r3, r2
 8005ac6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ac8:	463b      	mov	r3, r7
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	011a      	lsls	r2, r3, #4
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8005ada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d112      	bne.n	8005b08 <USB_EPStartXfer+0x664>
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	881b      	ldrh	r3, [r3, #0]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af0:	801a      	strh	r2, [r3, #0]
 8005af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	801a      	strh	r2, [r3, #0]
 8005b06:	e054      	b.n	8005bb2 <USB_EPStartXfer+0x70e>
 8005b08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b0c:	2b3e      	cmp	r3, #62	; 0x3e
 8005b0e:	d817      	bhi.n	8005b40 <USB_EPStartXfer+0x69c>
 8005b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b14:	085b      	lsrs	r3, r3, #1
 8005b16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d004      	beq.n	8005b30 <USB_EPStartXfer+0x68c>
 8005b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	029b      	lsls	r3, r3, #10
 8005b38:	b29a      	uxth	r2, r3
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	801a      	strh	r2, [r3, #0]
 8005b3e:	e038      	b.n	8005bb2 <USB_EPStartXfer+0x70e>
 8005b40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b44:	095b      	lsrs	r3, r3, #5
 8005b46:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b4e:	f003 031f 	and.w	r3, r3, #31
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <USB_EPStartXfer+0x6bc>
 8005b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005b60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	029b      	lsls	r3, r3, #10
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b72:	b29a      	uxth	r2, r3
 8005b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b76:	801a      	strh	r2, [r3, #0]
 8005b78:	e01b      	b.n	8005bb2 <USB_EPStartXfer+0x70e>
 8005b7a:	463b      	mov	r3, r7
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	785b      	ldrb	r3, [r3, #1]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d116      	bne.n	8005bb2 <USB_EPStartXfer+0x70e>
 8005b84:	1d3b      	adds	r3, r7, #4
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	461a      	mov	r2, r3
 8005b90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b92:	4413      	add	r3, r2
 8005b94:	643b      	str	r3, [r7, #64]	; 0x40
 8005b96:	463b      	mov	r3, r7
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	011a      	lsls	r2, r3, #4
 8005b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ba8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005bb2:	463b      	mov	r3, r7
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	895b      	ldrh	r3, [r3, #10]
 8005bb8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005bbc:	463b      	mov	r3, r7
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6959      	ldr	r1, [r3, #20]
 8005bc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005bcc:	1d38      	adds	r0, r7, #4
 8005bce:	6800      	ldr	r0, [r0, #0]
 8005bd0:	f001 f89d 	bl	8006d0e <USB_WritePMA>
 8005bd4:	e36c      	b.n	80062b0 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005bd6:	463b      	mov	r3, r7
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005be0:	1d3b      	adds	r3, r7, #4
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	463b      	mov	r3, r7
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	4413      	add	r3, r2
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005bfe:	1d3b      	adds	r3, r7, #4
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	463b      	mov	r3, r7
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	441a      	add	r2, r3
 8005c0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005c10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005c24:	1d3b      	adds	r3, r7, #4
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c2a:	1d3b      	adds	r3, r7, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c38:	4413      	add	r3, r2
 8005c3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c3c:	463b      	mov	r3, r7
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	011a      	lsls	r2, r3, #4
 8005c44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c46:	4413      	add	r3, r2
 8005c48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c52:	b29a      	uxth	r2, r3
 8005c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c56:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005c58:	463b      	mov	r3, r7
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	891b      	ldrh	r3, [r3, #8]
 8005c5e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c62:	463b      	mov	r3, r7
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6959      	ldr	r1, [r3, #20]
 8005c68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c72:	1d38      	adds	r0, r7, #4
 8005c74:	6800      	ldr	r0, [r0, #0]
 8005c76:	f001 f84a 	bl	8006d0e <USB_WritePMA>
 8005c7a:	e319      	b.n	80062b0 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005c7c:	1d3b      	adds	r3, r7, #4
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	463b      	mov	r3, r7
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	4413      	add	r3, r2
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c96:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005c9a:	1d3b      	adds	r3, r7, #4
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	441a      	add	r2, r3
 8005ca8:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005cac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cb4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005cc0:	463b      	mov	r3, r7
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6a1a      	ldr	r2, [r3, #32]
 8005cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cca:	1ad2      	subs	r2, r2, r3
 8005ccc:	463b      	mov	r3, r7
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005cd2:	1d3b      	adds	r3, r7, #4
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	463b      	mov	r3, r7
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	881b      	ldrh	r3, [r3, #0]
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8162 	beq.w	8005fb2 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005cee:	1d3b      	adds	r3, r7, #4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005cf6:	463b      	mov	r3, r7
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d164      	bne.n	8005dca <USB_EPStartXfer+0x926>
 8005d00:	1d3b      	adds	r3, r7, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d06:	1d3b      	adds	r3, r7, #4
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d14:	4413      	add	r3, r2
 8005d16:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d18:	463b      	mov	r3, r7
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	011a      	lsls	r2, r3, #4
 8005d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d22:	4413      	add	r3, r2
 8005d24:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d28:	677b      	str	r3, [r7, #116]	; 0x74
 8005d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d112      	bne.n	8005d58 <USB_EPStartXfer+0x8b4>
 8005d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d54:	801a      	strh	r2, [r3, #0]
 8005d56:	e057      	b.n	8005e08 <USB_EPStartXfer+0x964>
 8005d58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005d5e:	d817      	bhi.n	8005d90 <USB_EPStartXfer+0x8ec>
 8005d60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d64:	085b      	lsrs	r3, r3, #1
 8005d66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d004      	beq.n	8005d80 <USB_EPStartXfer+0x8dc>
 8005d76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d80:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	029b      	lsls	r3, r3, #10
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d8c:	801a      	strh	r2, [r3, #0]
 8005d8e:	e03b      	b.n	8005e08 <USB_EPStartXfer+0x964>
 8005d90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d94:	095b      	lsrs	r3, r3, #5
 8005d96:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005d9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <USB_EPStartXfer+0x90c>
 8005da6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005daa:	3b01      	subs	r3, #1
 8005dac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005db0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	029b      	lsls	r3, r3, #10
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dc6:	801a      	strh	r2, [r3, #0]
 8005dc8:	e01e      	b.n	8005e08 <USB_EPStartXfer+0x964>
 8005dca:	463b      	mov	r3, r7
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	785b      	ldrb	r3, [r3, #1]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d119      	bne.n	8005e08 <USB_EPStartXfer+0x964>
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	461a      	mov	r2, r3
 8005de0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005de4:	4413      	add	r3, r2
 8005de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dea:	463b      	mov	r3, r7
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	011a      	lsls	r2, r3, #4
 8005df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005df6:	4413      	add	r3, r2
 8005df8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e02:	b29a      	uxth	r2, r3
 8005e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005e08:	463b      	mov	r3, r7
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	895b      	ldrh	r3, [r3, #10]
 8005e0e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005e12:	463b      	mov	r3, r7
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	6959      	ldr	r1, [r3, #20]
 8005e18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005e22:	1d38      	adds	r0, r7, #4
 8005e24:	6800      	ldr	r0, [r0, #0]
 8005e26:	f000 ff72 	bl	8006d0e <USB_WritePMA>
          ep->xfer_buff += len;
 8005e2a:	463b      	mov	r3, r7
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	695a      	ldr	r2, [r3, #20]
 8005e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e34:	441a      	add	r2, r3
 8005e36:	463b      	mov	r3, r7
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	463b      	mov	r3, r7
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d909      	bls.n	8005e60 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6a1a      	ldr	r2, [r3, #32]
 8005e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e56:	1ad2      	subs	r2, r2, r3
 8005e58:	463b      	mov	r3, r7
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	621a      	str	r2, [r3, #32]
 8005e5e:	e008      	b.n	8005e72 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005e60:	463b      	mov	r3, r7
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005e6a:	463b      	mov	r3, r7
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005e72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 821a 	beq.w	80062b0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005e7c:	463b      	mov	r3, r7
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	785b      	ldrb	r3, [r3, #1]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d164      	bne.n	8005f50 <USB_EPStartXfer+0xaac>
 8005e86:	1d3b      	adds	r3, r7, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e8c:	1d3b      	adds	r3, r7, #4
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	461a      	mov	r2, r3
 8005e98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e9a:	4413      	add	r3, r2
 8005e9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	011a      	lsls	r2, r3, #4
 8005ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eae:	667b      	str	r3, [r7, #100]	; 0x64
 8005eb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d112      	bne.n	8005ede <USB_EPStartXfer+0xa3a>
 8005eb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eba:	881b      	ldrh	r3, [r3, #0]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec6:	801a      	strh	r2, [r3, #0]
 8005ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	e057      	b.n	8005f8e <USB_EPStartXfer+0xaea>
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ee4:	d817      	bhi.n	8005f16 <USB_EPStartXfer+0xa72>
 8005ee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ef4:	f003 0301 	and.w	r3, r3, #1
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d004      	beq.n	8005f06 <USB_EPStartXfer+0xa62>
 8005efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f00:	3301      	adds	r3, #1
 8005f02:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	029b      	lsls	r3, r3, #10
 8005f0e:	b29a      	uxth	r2, r3
 8005f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f12:	801a      	strh	r2, [r3, #0]
 8005f14:	e03b      	b.n	8005f8e <USB_EPStartXfer+0xaea>
 8005f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <USB_EPStartXfer+0xa92>
 8005f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f30:	3b01      	subs	r3, #1
 8005f32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	029b      	lsls	r3, r3, #10
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f48:	b29a      	uxth	r2, r3
 8005f4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f4c:	801a      	strh	r2, [r3, #0]
 8005f4e:	e01e      	b.n	8005f8e <USB_EPStartXfer+0xaea>
 8005f50:	463b      	mov	r3, r7
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	785b      	ldrb	r3, [r3, #1]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d119      	bne.n	8005f8e <USB_EPStartXfer+0xaea>
 8005f5a:	1d3b      	adds	r3, r7, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	673b      	str	r3, [r7, #112]	; 0x70
 8005f60:	1d3b      	adds	r3, r7, #4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f6e:	4413      	add	r3, r2
 8005f70:	673b      	str	r3, [r7, #112]	; 0x70
 8005f72:	463b      	mov	r3, r7
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	011a      	lsls	r2, r3, #4
 8005f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f8c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005f8e:	463b      	mov	r3, r7
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	891b      	ldrh	r3, [r3, #8]
 8005f94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f98:	463b      	mov	r3, r7
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6959      	ldr	r1, [r3, #20]
 8005f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005fa8:	1d38      	adds	r0, r7, #4
 8005faa:	6800      	ldr	r0, [r0, #0]
 8005fac:	f000 feaf 	bl	8006d0e <USB_WritePMA>
 8005fb0:	e17e      	b.n	80062b0 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005fb2:	463b      	mov	r3, r7
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	785b      	ldrb	r3, [r3, #1]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d16f      	bne.n	800609c <USB_EPStartXfer+0xbf8>
 8005fbc:	1d3b      	adds	r3, r7, #4
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fc4:	1d3b      	adds	r3, r7, #4
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005fda:	463b      	mov	r3, r7
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	011a      	lsls	r2, r3, #4
 8005fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d116      	bne.n	8006026 <USB_EPStartXfer+0xb82>
 8005ff8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006004:	b29a      	uxth	r2, r3
 8006006:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800600a:	801a      	strh	r2, [r3, #0]
 800600c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	b29b      	uxth	r3, r3
 8006014:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006018:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800601c:	b29a      	uxth	r2, r3
 800601e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006022:	801a      	strh	r2, [r3, #0]
 8006024:	e05f      	b.n	80060e6 <USB_EPStartXfer+0xc42>
 8006026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800602a:	2b3e      	cmp	r3, #62	; 0x3e
 800602c:	d818      	bhi.n	8006060 <USB_EPStartXfer+0xbbc>
 800602e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006038:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800603c:	f003 0301 	and.w	r3, r3, #1
 8006040:	2b00      	cmp	r3, #0
 8006042:	d004      	beq.n	800604e <USB_EPStartXfer+0xbaa>
 8006044:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006048:	3301      	adds	r3, #1
 800604a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800604e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006052:	b29b      	uxth	r3, r3
 8006054:	029b      	lsls	r3, r3, #10
 8006056:	b29a      	uxth	r2, r3
 8006058:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800605c:	801a      	strh	r2, [r3, #0]
 800605e:	e042      	b.n	80060e6 <USB_EPStartXfer+0xc42>
 8006060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800606a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	2b00      	cmp	r3, #0
 8006074:	d104      	bne.n	8006080 <USB_EPStartXfer+0xbdc>
 8006076:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800607a:	3b01      	subs	r3, #1
 800607c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006080:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006084:	b29b      	uxth	r3, r3
 8006086:	029b      	lsls	r3, r3, #10
 8006088:	b29b      	uxth	r3, r3
 800608a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800608e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006092:	b29a      	uxth	r2, r3
 8006094:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	e024      	b.n	80060e6 <USB_EPStartXfer+0xc42>
 800609c:	463b      	mov	r3, r7
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	785b      	ldrb	r3, [r3, #1]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d11f      	bne.n	80060e6 <USB_EPStartXfer+0xc42>
 80060a6:	1d3b      	adds	r3, r7, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060ae:	1d3b      	adds	r3, r7, #4
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	461a      	mov	r2, r3
 80060ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060be:	4413      	add	r3, r2
 80060c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060c4:	463b      	mov	r3, r7
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	011a      	lsls	r2, r3, #4
 80060cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060d0:	4413      	add	r3, r2
 80060d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060de:	b29a      	uxth	r2, r3
 80060e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060e4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80060e6:	463b      	mov	r3, r7
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	891b      	ldrh	r3, [r3, #8]
 80060ec:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80060f0:	463b      	mov	r3, r7
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6959      	ldr	r1, [r3, #20]
 80060f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006100:	1d38      	adds	r0, r7, #4
 8006102:	6800      	ldr	r0, [r0, #0]
 8006104:	f000 fe03 	bl	8006d0e <USB_WritePMA>
          ep->xfer_buff += len;
 8006108:	463b      	mov	r3, r7
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	695a      	ldr	r2, [r3, #20]
 800610e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006112:	441a      	add	r2, r3
 8006114:	463b      	mov	r3, r7
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800611a:	463b      	mov	r3, r7
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a1a      	ldr	r2, [r3, #32]
 8006120:	463b      	mov	r3, r7
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	429a      	cmp	r2, r3
 8006128:	d909      	bls.n	800613e <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 800612a:	463b      	mov	r3, r7
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006134:	1ad2      	subs	r2, r2, r3
 8006136:	463b      	mov	r3, r7
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	621a      	str	r2, [r3, #32]
 800613c:	e008      	b.n	8006150 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 800613e:	463b      	mov	r3, r7
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006148:	463b      	mov	r3, r7
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2200      	movs	r2, #0
 800614e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80ab 	beq.w	80062b0 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800615a:	1d3b      	adds	r3, r7, #4
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006162:	463b      	mov	r3, r7
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d16f      	bne.n	800624c <USB_EPStartXfer+0xda8>
 800616c:	1d3b      	adds	r3, r7, #4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006174:	1d3b      	adds	r3, r7, #4
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800617c:	b29b      	uxth	r3, r3
 800617e:	461a      	mov	r2, r3
 8006180:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006184:	4413      	add	r3, r2
 8006186:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800618a:	463b      	mov	r3, r7
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	011a      	lsls	r2, r3, #4
 8006192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006196:	4413      	add	r3, r2
 8006198:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800619c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d116      	bne.n	80061d6 <USB_EPStartXfer+0xd32>
 80061a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061ac:	881b      	ldrh	r3, [r3, #0]
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80061b4:	b29a      	uxth	r2, r3
 80061b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061ba:	801a      	strh	r2, [r3, #0]
 80061bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061d2:	801a      	strh	r2, [r3, #0]
 80061d4:	e05b      	b.n	800628e <USB_EPStartXfer+0xdea>
 80061d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061da:	2b3e      	cmp	r3, #62	; 0x3e
 80061dc:	d818      	bhi.n	8006210 <USB_EPStartXfer+0xd6c>
 80061de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ec:	f003 0301 	and.w	r3, r3, #1
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <USB_EPStartXfer+0xd5a>
 80061f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061f8:	3301      	adds	r3, #1
 80061fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006202:	b29b      	uxth	r3, r3
 8006204:	029b      	lsls	r3, r3, #10
 8006206:	b29a      	uxth	r2, r3
 8006208:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e03e      	b.n	800628e <USB_EPStartXfer+0xdea>
 8006210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800621a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2b00      	cmp	r3, #0
 8006224:	d104      	bne.n	8006230 <USB_EPStartXfer+0xd8c>
 8006226:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800622a:	3b01      	subs	r3, #1
 800622c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006234:	b29b      	uxth	r3, r3
 8006236:	029b      	lsls	r3, r3, #10
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800623e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006242:	b29a      	uxth	r2, r3
 8006244:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	e020      	b.n	800628e <USB_EPStartXfer+0xdea>
 800624c:	463b      	mov	r3, r7
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d11b      	bne.n	800628e <USB_EPStartXfer+0xdea>
 8006256:	1d3b      	adds	r3, r7, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800625e:	b29b      	uxth	r3, r3
 8006260:	461a      	mov	r2, r3
 8006262:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006266:	4413      	add	r3, r2
 8006268:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800626c:	463b      	mov	r3, r7
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	011a      	lsls	r2, r3, #4
 8006274:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006278:	4413      	add	r3, r2
 800627a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800627e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006286:	b29a      	uxth	r2, r3
 8006288:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800628c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800628e:	463b      	mov	r3, r7
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	895b      	ldrh	r3, [r3, #10]
 8006294:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006298:	463b      	mov	r3, r7
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6959      	ldr	r1, [r3, #20]
 800629e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80062a8:	1d38      	adds	r0, r7, #4
 80062aa:	6800      	ldr	r0, [r0, #0]
 80062ac:	f000 fd2f 	bl	8006d0e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062b0:	1d3b      	adds	r3, r7, #4
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	463b      	mov	r3, r7
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f107 020a 	add.w	r2, r7, #10
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ce:	8013      	strh	r3, [r2, #0]
 80062d0:	f107 030a 	add.w	r3, r7, #10
 80062d4:	f107 020a 	add.w	r2, r7, #10
 80062d8:	8812      	ldrh	r2, [r2, #0]
 80062da:	f082 0210 	eor.w	r2, r2, #16
 80062de:	801a      	strh	r2, [r3, #0]
 80062e0:	f107 030a 	add.w	r3, r7, #10
 80062e4:	f107 020a 	add.w	r2, r7, #10
 80062e8:	8812      	ldrh	r2, [r2, #0]
 80062ea:	f082 0220 	eor.w	r2, r2, #32
 80062ee:	801a      	strh	r2, [r3, #0]
 80062f0:	1d3b      	adds	r3, r7, #4
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	463b      	mov	r3, r7
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	441a      	add	r2, r3
 80062fe:	f107 030a 	add.w	r3, r7, #10
 8006302:	881b      	ldrh	r3, [r3, #0]
 8006304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800630c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006314:	b29b      	uxth	r3, r3
 8006316:	8013      	strh	r3, [r2, #0]
 8006318:	e3b5      	b.n	8006a86 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800631a:	463b      	mov	r3, r7
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	7b1b      	ldrb	r3, [r3, #12]
 8006320:	2b00      	cmp	r3, #0
 8006322:	f040 8090 	bne.w	8006446 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006326:	463b      	mov	r3, r7
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	463b      	mov	r3, r7
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	429a      	cmp	r2, r3
 8006334:	d90e      	bls.n	8006354 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8006336:	463b      	mov	r3, r7
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006340:	463b      	mov	r3, r7
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	463b      	mov	r3, r7
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	619a      	str	r2, [r3, #24]
 8006352:	e008      	b.n	8006366 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8006354:	463b      	mov	r3, r7
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800635e:	463b      	mov	r3, r7
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2200      	movs	r2, #0
 8006364:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006366:	1d3b      	adds	r3, r7, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800636e:	1d3b      	adds	r3, r7, #4
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006376:	b29b      	uxth	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800637e:	4413      	add	r3, r2
 8006380:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006384:	463b      	mov	r3, r7
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	011a      	lsls	r2, r3, #4
 800638c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006390:	4413      	add	r3, r2
 8006392:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006396:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800639a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d116      	bne.n	80063d0 <USB_EPStartXfer+0xf2c>
 80063a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063a6:	881b      	ldrh	r3, [r3, #0]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ae:	b29a      	uxth	r2, r3
 80063b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063b4:	801a      	strh	r2, [r3, #0]
 80063b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063ba:	881b      	ldrh	r3, [r3, #0]
 80063bc:	b29b      	uxth	r3, r3
 80063be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80063cc:	801a      	strh	r2, [r3, #0]
 80063ce:	e32c      	b.n	8006a2a <USB_EPStartXfer+0x1586>
 80063d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063d4:	2b3e      	cmp	r3, #62	; 0x3e
 80063d6:	d818      	bhi.n	800640a <USB_EPStartXfer+0xf66>
 80063d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80063e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d004      	beq.n	80063f8 <USB_EPStartXfer+0xf54>
 80063ee:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063f2:	3301      	adds	r3, #1
 80063f4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80063f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	029b      	lsls	r3, r3, #10
 8006400:	b29a      	uxth	r2, r3
 8006402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006406:	801a      	strh	r2, [r3, #0]
 8006408:	e30f      	b.n	8006a2a <USB_EPStartXfer+0x1586>
 800640a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <USB_EPStartXfer+0xf86>
 8006420:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006424:	3b01      	subs	r3, #1
 8006426:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800642a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800642e:	b29b      	uxth	r3, r3
 8006430:	029b      	lsls	r3, r3, #10
 8006432:	b29b      	uxth	r3, r3
 8006434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800643c:	b29a      	uxth	r2, r3
 800643e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006442:	801a      	strh	r2, [r3, #0]
 8006444:	e2f1      	b.n	8006a2a <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006446:	463b      	mov	r3, r7
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	78db      	ldrb	r3, [r3, #3]
 800644c:	2b02      	cmp	r3, #2
 800644e:	f040 818f 	bne.w	8006770 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006452:	463b      	mov	r3, r7
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	785b      	ldrb	r3, [r3, #1]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d175      	bne.n	8006548 <USB_EPStartXfer+0x10a4>
 800645c:	1d3b      	adds	r3, r7, #4
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006464:	1d3b      	adds	r3, r7, #4
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800646c:	b29b      	uxth	r3, r3
 800646e:	461a      	mov	r2, r3
 8006470:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006474:	4413      	add	r3, r2
 8006476:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800647a:	463b      	mov	r3, r7
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	011a      	lsls	r2, r3, #4
 8006482:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006486:	4413      	add	r3, r2
 8006488:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800648c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006490:	463b      	mov	r3, r7
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d116      	bne.n	80064c8 <USB_EPStartXfer+0x1024>
 800649a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800649e:	881b      	ldrh	r3, [r3, #0]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064b2:	881b      	ldrh	r3, [r3, #0]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064be:	b29a      	uxth	r2, r3
 80064c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80064c4:	801a      	strh	r2, [r3, #0]
 80064c6:	e065      	b.n	8006594 <USB_EPStartXfer+0x10f0>
 80064c8:	463b      	mov	r3, r7
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b3e      	cmp	r3, #62	; 0x3e
 80064d0:	d81a      	bhi.n	8006508 <USB_EPStartXfer+0x1064>
 80064d2:	463b      	mov	r3, r7
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064de:	463b      	mov	r3, r7
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <USB_EPStartXfer+0x1052>
 80064ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064f0:	3301      	adds	r3, #1
 80064f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80064f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	029b      	lsls	r3, r3, #10
 80064fe:	b29a      	uxth	r2, r3
 8006500:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006504:	801a      	strh	r2, [r3, #0]
 8006506:	e045      	b.n	8006594 <USB_EPStartXfer+0x10f0>
 8006508:	463b      	mov	r3, r7
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	691b      	ldr	r3, [r3, #16]
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006514:	463b      	mov	r3, r7
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 031f 	and.w	r3, r3, #31
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <USB_EPStartXfer+0x1088>
 8006522:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006526:	3b01      	subs	r3, #1
 8006528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800652c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006530:	b29b      	uxth	r3, r3
 8006532:	029b      	lsls	r3, r3, #10
 8006534:	b29b      	uxth	r3, r3
 8006536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800653a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800653e:	b29a      	uxth	r2, r3
 8006540:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006544:	801a      	strh	r2, [r3, #0]
 8006546:	e025      	b.n	8006594 <USB_EPStartXfer+0x10f0>
 8006548:	463b      	mov	r3, r7
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d120      	bne.n	8006594 <USB_EPStartXfer+0x10f0>
 8006552:	1d3b      	adds	r3, r7, #4
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800655a:	1d3b      	adds	r3, r7, #4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006562:	b29b      	uxth	r3, r3
 8006564:	461a      	mov	r2, r3
 8006566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800656a:	4413      	add	r3, r2
 800656c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006570:	463b      	mov	r3, r7
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	011a      	lsls	r2, r3, #4
 8006578:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800657c:	4413      	add	r3, r2
 800657e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006582:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006586:	463b      	mov	r3, r7
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	b29a      	uxth	r2, r3
 800658e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	1d3b      	adds	r3, r7, #4
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800659c:	463b      	mov	r3, r7
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	785b      	ldrb	r3, [r3, #1]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d175      	bne.n	8006692 <USB_EPStartXfer+0x11ee>
 80065a6:	1d3b      	adds	r3, r7, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065ae:	1d3b      	adds	r3, r7, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	461a      	mov	r2, r3
 80065ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065be:	4413      	add	r3, r2
 80065c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80065c4:	463b      	mov	r3, r7
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	011a      	lsls	r2, r3, #4
 80065cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80065d0:	4413      	add	r3, r2
 80065d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80065da:	463b      	mov	r3, r7
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	691b      	ldr	r3, [r3, #16]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d116      	bne.n	8006612 <USB_EPStartXfer+0x116e>
 80065e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065f6:	801a      	strh	r2, [r3, #0]
 80065f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29b      	uxth	r3, r3
 8006600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006608:	b29a      	uxth	r2, r3
 800660a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800660e:	801a      	strh	r2, [r3, #0]
 8006610:	e061      	b.n	80066d6 <USB_EPStartXfer+0x1232>
 8006612:	463b      	mov	r3, r7
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	2b3e      	cmp	r3, #62	; 0x3e
 800661a:	d81a      	bhi.n	8006652 <USB_EPStartXfer+0x11ae>
 800661c:	463b      	mov	r3, r7
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	085b      	lsrs	r3, r3, #1
 8006624:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006628:	463b      	mov	r3, r7
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d004      	beq.n	8006640 <USB_EPStartXfer+0x119c>
 8006636:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800663a:	3301      	adds	r3, #1
 800663c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006640:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006644:	b29b      	uxth	r3, r3
 8006646:	029b      	lsls	r3, r3, #10
 8006648:	b29a      	uxth	r2, r3
 800664a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800664e:	801a      	strh	r2, [r3, #0]
 8006650:	e041      	b.n	80066d6 <USB_EPStartXfer+0x1232>
 8006652:	463b      	mov	r3, r7
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800665e:	463b      	mov	r3, r7
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	f003 031f 	and.w	r3, r3, #31
 8006668:	2b00      	cmp	r3, #0
 800666a:	d104      	bne.n	8006676 <USB_EPStartXfer+0x11d2>
 800666c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006670:	3b01      	subs	r3, #1
 8006672:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006676:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800667a:	b29b      	uxth	r3, r3
 800667c:	029b      	lsls	r3, r3, #10
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006688:	b29a      	uxth	r2, r3
 800668a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800668e:	801a      	strh	r2, [r3, #0]
 8006690:	e021      	b.n	80066d6 <USB_EPStartXfer+0x1232>
 8006692:	463b      	mov	r3, r7
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d11c      	bne.n	80066d6 <USB_EPStartXfer+0x1232>
 800669c:	1d3b      	adds	r3, r7, #4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066ac:	4413      	add	r3, r2
 80066ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066b2:	463b      	mov	r3, r7
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	011a      	lsls	r2, r3, #4
 80066ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066be:	4413      	add	r3, r2
 80066c0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066c8:	463b      	mov	r3, r7
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	b29a      	uxth	r2, r3
 80066d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80066d4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80066d6:	463b      	mov	r3, r7
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 81a4 	beq.w	8006a2a <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80066e2:	1d3b      	adds	r3, r7, #4
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	463b      	mov	r3, r7
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	4413      	add	r3, r2
 80066f0:	881b      	ldrh	r3, [r3, #0]
 80066f2:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80066f6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80066fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <USB_EPStartXfer+0x126a>
 8006702:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10d      	bne.n	800672a <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800670e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006716:	2b00      	cmp	r3, #0
 8006718:	f040 8187 	bne.w	8006a2a <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800671c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006724:	2b00      	cmp	r3, #0
 8006726:	f040 8180 	bne.w	8006a2a <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800672a:	1d3b      	adds	r3, r7, #4
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	463b      	mov	r3, r7
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29b      	uxth	r3, r3
 800673c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006744:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006748:	1d3b      	adds	r3, r7, #4
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	463b      	mov	r3, r7
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	441a      	add	r2, r3
 8006756:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800675a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800675e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006766:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800676a:	b29b      	uxth	r3, r3
 800676c:	8013      	strh	r3, [r2, #0]
 800676e:	e15c      	b.n	8006a2a <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006770:	463b      	mov	r3, r7
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	78db      	ldrb	r3, [r3, #3]
 8006776:	2b01      	cmp	r3, #1
 8006778:	f040 8155 	bne.w	8006a26 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800677c:	463b      	mov	r3, r7
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	699a      	ldr	r2, [r3, #24]
 8006782:	463b      	mov	r3, r7
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	429a      	cmp	r2, r3
 800678a:	d90e      	bls.n	80067aa <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800678c:	463b      	mov	r3, r7
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006796:	463b      	mov	r3, r7
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	699a      	ldr	r2, [r3, #24]
 800679c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a0:	1ad2      	subs	r2, r2, r3
 80067a2:	463b      	mov	r3, r7
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	619a      	str	r2, [r3, #24]
 80067a8:	e008      	b.n	80067bc <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 80067aa:	463b      	mov	r3, r7
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80067b4:	463b      	mov	r3, r7
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	2200      	movs	r2, #0
 80067ba:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80067bc:	463b      	mov	r3, r7
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d16f      	bne.n	80068a6 <USB_EPStartXfer+0x1402>
 80067c6:	1d3b      	adds	r3, r7, #4
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067ce:	1d3b      	adds	r3, r7, #4
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	461a      	mov	r2, r3
 80067da:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067de:	4413      	add	r3, r2
 80067e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80067e4:	463b      	mov	r3, r7
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	011a      	lsls	r2, r3, #4
 80067ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80067f0:	4413      	add	r3, r2
 80067f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80067fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d116      	bne.n	8006830 <USB_EPStartXfer+0x138c>
 8006802:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	b29b      	uxth	r3, r3
 800680a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800680e:	b29a      	uxth	r2, r3
 8006810:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006814:	801a      	strh	r2, [r3, #0]
 8006816:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006826:	b29a      	uxth	r2, r3
 8006828:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800682c:	801a      	strh	r2, [r3, #0]
 800682e:	e05f      	b.n	80068f0 <USB_EPStartXfer+0x144c>
 8006830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006834:	2b3e      	cmp	r3, #62	; 0x3e
 8006836:	d818      	bhi.n	800686a <USB_EPStartXfer+0x13c6>
 8006838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800683c:	085b      	lsrs	r3, r3, #1
 800683e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d004      	beq.n	8006858 <USB_EPStartXfer+0x13b4>
 800684e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006852:	3301      	adds	r3, #1
 8006854:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800685c:	b29b      	uxth	r3, r3
 800685e:	029b      	lsls	r3, r3, #10
 8006860:	b29a      	uxth	r2, r3
 8006862:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006866:	801a      	strh	r2, [r3, #0]
 8006868:	e042      	b.n	80068f0 <USB_EPStartXfer+0x144c>
 800686a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006874:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006878:	f003 031f 	and.w	r3, r3, #31
 800687c:	2b00      	cmp	r3, #0
 800687e:	d104      	bne.n	800688a <USB_EPStartXfer+0x13e6>
 8006880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006884:	3b01      	subs	r3, #1
 8006886:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800688a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800688e:	b29b      	uxth	r3, r3
 8006890:	029b      	lsls	r3, r3, #10
 8006892:	b29b      	uxth	r3, r3
 8006894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689c:	b29a      	uxth	r2, r3
 800689e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068a2:	801a      	strh	r2, [r3, #0]
 80068a4:	e024      	b.n	80068f0 <USB_EPStartXfer+0x144c>
 80068a6:	463b      	mov	r3, r7
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d11f      	bne.n	80068f0 <USB_EPStartXfer+0x144c>
 80068b0:	1d3b      	adds	r3, r7, #4
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068b8:	1d3b      	adds	r3, r7, #4
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	461a      	mov	r2, r3
 80068c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c8:	4413      	add	r3, r2
 80068ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80068ce:	463b      	mov	r3, r7
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	011a      	lsls	r2, r3, #4
 80068d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068da:	4413      	add	r3, r2
 80068dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80068e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80068e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80068ee:	801a      	strh	r2, [r3, #0]
 80068f0:	1d3b      	adds	r3, r7, #4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068f8:	463b      	mov	r3, r7
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	785b      	ldrb	r3, [r3, #1]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d16f      	bne.n	80069e2 <USB_EPStartXfer+0x153e>
 8006902:	1d3b      	adds	r3, r7, #4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800690a:	1d3b      	adds	r3, r7, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006912:	b29b      	uxth	r3, r3
 8006914:	461a      	mov	r2, r3
 8006916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800691a:	4413      	add	r3, r2
 800691c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006920:	463b      	mov	r3, r7
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	011a      	lsls	r2, r3, #4
 8006928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800692c:	4413      	add	r3, r2
 800692e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800693a:	2b00      	cmp	r3, #0
 800693c:	d116      	bne.n	800696c <USB_EPStartXfer+0x14c8>
 800693e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800694a:	b29a      	uxth	r2, r3
 800694c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006950:	801a      	strh	r2, [r3, #0]
 8006952:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006956:	881b      	ldrh	r3, [r3, #0]
 8006958:	b29b      	uxth	r3, r3
 800695a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800695e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006962:	b29a      	uxth	r2, r3
 8006964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006968:	801a      	strh	r2, [r3, #0]
 800696a:	e05e      	b.n	8006a2a <USB_EPStartXfer+0x1586>
 800696c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006970:	2b3e      	cmp	r3, #62	; 0x3e
 8006972:	d818      	bhi.n	80069a6 <USB_EPStartXfer+0x1502>
 8006974:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800697e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	d004      	beq.n	8006994 <USB_EPStartXfer+0x14f0>
 800698a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800698e:	3301      	adds	r3, #1
 8006990:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006994:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006998:	b29b      	uxth	r3, r3
 800699a:	029b      	lsls	r3, r3, #10
 800699c:	b29a      	uxth	r2, r3
 800699e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069a2:	801a      	strh	r2, [r3, #0]
 80069a4:	e041      	b.n	8006a2a <USB_EPStartXfer+0x1586>
 80069a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <USB_EPStartXfer+0x1522>
 80069bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069c0:	3b01      	subs	r3, #1
 80069c2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80069c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	029b      	lsls	r3, r3, #10
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069d8:	b29a      	uxth	r2, r3
 80069da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80069de:	801a      	strh	r2, [r3, #0]
 80069e0:	e023      	b.n	8006a2a <USB_EPStartXfer+0x1586>
 80069e2:	463b      	mov	r3, r7
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	785b      	ldrb	r3, [r3, #1]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d11e      	bne.n	8006a2a <USB_EPStartXfer+0x1586>
 80069ec:	1d3b      	adds	r3, r7, #4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	461a      	mov	r2, r3
 80069f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069fc:	4413      	add	r3, r2
 80069fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a02:	463b      	mov	r3, r7
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	011a      	lsls	r2, r3, #4
 8006a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0e:	4413      	add	r3, r2
 8006a10:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006a14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a22:	801a      	strh	r2, [r3, #0]
 8006a24:	e001      	b.n	8006a2a <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	e02e      	b.n	8006a88 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a2a:	1d3b      	adds	r3, r7, #4
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	463b      	mov	r3, r7
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	881b      	ldrh	r3, [r3, #0]
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a44:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a48:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006a50:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a54:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a5c:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006a60:	1d3b      	adds	r3, r7, #4
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	463b      	mov	r3, r7
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	009b      	lsls	r3, r3, #2
 8006a6c:	441a      	add	r2, r3
 8006a6e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
 8006a9a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	785b      	ldrb	r3, [r3, #1]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d020      	beq.n	8006ae6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	881b      	ldrh	r3, [r3, #0]
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aba:	81bb      	strh	r3, [r7, #12]
 8006abc:	89bb      	ldrh	r3, [r7, #12]
 8006abe:	f083 0310 	eor.w	r3, r3, #16
 8006ac2:	81bb      	strh	r3, [r7, #12]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	441a      	add	r2, r3
 8006ace:	89bb      	ldrh	r3, [r7, #12]
 8006ad0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ad4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	8013      	strh	r3, [r2, #0]
 8006ae4:	e01f      	b.n	8006b26 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006af8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006afc:	81fb      	strh	r3, [r7, #14]
 8006afe:	89fb      	ldrh	r3, [r7, #14]
 8006b00:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b04:	81fb      	strh	r3, [r7, #14]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	441a      	add	r2, r3
 8006b10:	89fb      	ldrh	r3, [r7, #14]
 8006b12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b087      	sub	sp, #28
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	7b1b      	ldrb	r3, [r3, #12]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f040 809d 	bne.w	8006c80 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d04c      	beq.n	8006be8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	823b      	strh	r3, [r7, #16]
 8006b5c:	8a3b      	ldrh	r3, [r7, #16]
 8006b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01b      	beq.n	8006b9e <USB_EPClearStall+0x6c>
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b7c:	81fb      	strh	r3, [r7, #14]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	441a      	add	r2, r3
 8006b88:	89fb      	ldrh	r3, [r7, #14]
 8006b8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	78db      	ldrb	r3, [r3, #3]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d06c      	beq.n	8006c80 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ba6:	687a      	ldr	r2, [r7, #4]
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bbc:	81bb      	strh	r3, [r7, #12]
 8006bbe:	89bb      	ldrh	r3, [r7, #12]
 8006bc0:	f083 0320 	eor.w	r3, r3, #32
 8006bc4:	81bb      	strh	r3, [r7, #12]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	441a      	add	r2, r3
 8006bd0:	89bb      	ldrh	r3, [r7, #12]
 8006bd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	8013      	strh	r3, [r2, #0]
 8006be6:	e04b      	b.n	8006c80 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4413      	add	r3, r2
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	82fb      	strh	r3, [r7, #22]
 8006bf6:	8afb      	ldrh	r3, [r7, #22]
 8006bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01b      	beq.n	8006c38 <USB_EPClearStall+0x106>
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	881b      	ldrh	r3, [r3, #0]
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	82bb      	strh	r3, [r7, #20]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	441a      	add	r2, r3
 8006c22:	8abb      	ldrh	r3, [r7, #20]
 8006c24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	881b      	ldrh	r3, [r3, #0]
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c4e:	827b      	strh	r3, [r7, #18]
 8006c50:	8a7b      	ldrh	r3, [r7, #18]
 8006c52:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c56:	827b      	strh	r3, [r7, #18]
 8006c58:	8a7b      	ldrh	r3, [r7, #18]
 8006c5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c5e:	827b      	strh	r3, [r7, #18]
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	441a      	add	r2, r3
 8006c6a:	8a7b      	ldrh	r3, [r7, #18]
 8006c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bc80      	pop	{r7}
 8006c8a:	4770      	bx	lr

08006c8c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006c98:	78fb      	ldrb	r3, [r7, #3]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d103      	bne.n	8006ca6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2280      	movs	r2, #128	; 0x80
 8006ca2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bc80      	pop	{r7}
 8006cb0:	4770      	bx	lr

08006cb2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bc80      	pop	{r7}
 8006cc4:	4770      	bx	lr

08006cc6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr

08006cda <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b085      	sub	sp, #20
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006cec:	68fb      	ldr	r3, [r7, #12]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bc80      	pop	{r7}
 8006cf6:	4770      	bx	lr

08006cf8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bc80      	pop	{r7}
 8006d0c:	4770      	bx	lr

08006d0e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b08d      	sub	sp, #52	; 0x34
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	4611      	mov	r1, r2
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	80fb      	strh	r3, [r7, #6]
 8006d20:	4613      	mov	r3, r2
 8006d22:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006d24:	88bb      	ldrh	r3, [r7, #4]
 8006d26:	3301      	adds	r3, #1
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006d34:	88fb      	ldrh	r3, [r7, #6]
 8006d36:	005a      	lsls	r2, r3, #1
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d40:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d46:	e01e      	b.n	8006d86 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	3301      	adds	r3, #1
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d6c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d70:	3302      	adds	r3, #2
 8006d72:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d76:	3302      	adds	r3, #2
 8006d78:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	3b01      	subs	r3, #1
 8006d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1dd      	bne.n	8006d48 <USB_WritePMA+0x3a>
  }
}
 8006d8c:	bf00      	nop
 8006d8e:	3734      	adds	r7, #52	; 0x34
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bc80      	pop	{r7}
 8006d94:	4770      	bx	lr

08006d96 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b08b      	sub	sp, #44	; 0x2c
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	4611      	mov	r1, r2
 8006da2:	461a      	mov	r2, r3
 8006da4:	460b      	mov	r3, r1
 8006da6:	80fb      	strh	r3, [r7, #6]
 8006da8:	4613      	mov	r3, r2
 8006daa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006dac:	88bb      	ldrh	r3, [r7, #4]
 8006dae:	085b      	lsrs	r3, r3, #1
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	005a      	lsls	r2, r3, #1
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dce:	e01b      	b.n	8006e08 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	881b      	ldrh	r3, [r3, #0]
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	3302      	adds	r3, #2
 8006ddc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	b2da      	uxtb	r2, r3
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	3301      	adds	r3, #1
 8006dea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	0a1b      	lsrs	r3, r3, #8
 8006df0:	b2da      	uxtb	r2, r3
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	3302      	adds	r3, #2
 8006e00:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	3b01      	subs	r3, #1
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1e0      	bne.n	8006dd0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006e0e:	88bb      	ldrh	r3, [r7, #4]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d007      	beq.n	8006e2a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	881b      	ldrh	r3, [r3, #0]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	701a      	strb	r2, [r3, #0]
  }
}
 8006e2a:	bf00      	nop
 8006e2c:	372c      	adds	r7, #44	; 0x2c
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr

08006e34 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006e40:	2304      	movs	r3, #4
 8006e42:	2203      	movs	r2, #3
 8006e44:	2181      	movs	r1, #129	; 0x81
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f001 fc53 	bl	80086f2 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006e52:	2010      	movs	r0, #16
 8006e54:	f001 fd62 	bl	800891c <USBD_static_malloc>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e005      	b.n	8006e7a <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e74:	2200      	movs	r2, #0
 8006e76:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b082      	sub	sp, #8
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8006e8e:	2181      	movs	r1, #129	; 0x81
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f001 fc54 	bl	800873e <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d009      	beq.n	8006eba <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006eac:	4618      	mov	r0, r3
 8006eae:	f001 fd41 	bl	8008934 <USBD_static_free>
    pdev->pClassData = NULL;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ed4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d045      	beq.n	8006f7e <USBD_HID_Setup+0xba>
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	f040 80d3 	bne.w	800709e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	785b      	ldrb	r3, [r3, #1]
 8006efc:	3b02      	subs	r3, #2
 8006efe:	2b09      	cmp	r3, #9
 8006f00:	d835      	bhi.n	8006f6e <USBD_HID_Setup+0xaa>
 8006f02:	a201      	add	r2, pc, #4	; (adr r2, 8006f08 <USBD_HID_Setup+0x44>)
 8006f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f08:	08006f5f 	.word	0x08006f5f
 8006f0c:	08006f3f 	.word	0x08006f3f
 8006f10:	08006f6f 	.word	0x08006f6f
 8006f14:	08006f6f 	.word	0x08006f6f
 8006f18:	08006f6f 	.word	0x08006f6f
 8006f1c:	08006f6f 	.word	0x08006f6f
 8006f20:	08006f6f 	.word	0x08006f6f
 8006f24:	08006f6f 	.word	0x08006f6f
 8006f28:	08006f4d 	.word	0x08006f4d
 8006f2c:	08006f31 	.word	0x08006f31
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	885b      	ldrh	r3, [r3, #2]
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	461a      	mov	r2, r3
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	601a      	str	r2, [r3, #0]
          break;
 8006f3c:	e01e      	b.n	8006f7c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2201      	movs	r2, #1
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f001 f915 	bl	8008174 <USBD_CtlSendData>
          break;
 8006f4a:	e017      	b.n	8006f7c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	885b      	ldrh	r3, [r3, #2]
 8006f50:	0a1b      	lsrs	r3, r3, #8
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	461a      	mov	r2, r3
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	605a      	str	r2, [r3, #4]
          break;
 8006f5c:	e00e      	b.n	8006f7c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	3304      	adds	r3, #4
 8006f62:	2201      	movs	r2, #1
 8006f64:	4619      	mov	r1, r3
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f904 	bl	8008174 <USBD_CtlSendData>
          break;
 8006f6c:	e006      	b.n	8006f7c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 f895 	bl	80080a0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f76:	2302      	movs	r3, #2
 8006f78:	75fb      	strb	r3, [r7, #23]
          break;
 8006f7a:	bf00      	nop
      }
      break;
 8006f7c:	e096      	b.n	80070ac <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	785b      	ldrb	r3, [r3, #1]
 8006f82:	2b0b      	cmp	r3, #11
 8006f84:	f200 8083 	bhi.w	800708e <USBD_HID_Setup+0x1ca>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <USBD_HID_Setup+0xcc>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006fc1 	.word	0x08006fc1
 8006f94:	0800708f 	.word	0x0800708f
 8006f98:	0800708f 	.word	0x0800708f
 8006f9c:	0800708f 	.word	0x0800708f
 8006fa0:	0800708f 	.word	0x0800708f
 8006fa4:	0800708f 	.word	0x0800708f
 8006fa8:	08006fe9 	.word	0x08006fe9
 8006fac:	0800708f 	.word	0x0800708f
 8006fb0:	0800708f 	.word	0x0800708f
 8006fb4:	0800708f 	.word	0x0800708f
 8006fb8:	08007041 	.word	0x08007041
 8006fbc:	08007069 	.word	0x08007069
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d107      	bne.n	8006fda <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006fca:	f107 030e 	add.w	r3, r7, #14
 8006fce:	2202      	movs	r2, #2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f001 f8ce 	bl	8008174 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fd8:	e060      	b.n	800709c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f85f 	bl	80080a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8006fe6:	e059      	b.n	800709c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	885b      	ldrh	r3, [r3, #2]
 8006fec:	0a1b      	lsrs	r3, r3, #8
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	2b22      	cmp	r3, #34	; 0x22
 8006ff2:	d108      	bne.n	8007006 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	88db      	ldrh	r3, [r3, #6]
 8006ff8:	2b4a      	cmp	r3, #74	; 0x4a
 8006ffa:	bf28      	it	cs
 8006ffc:	234a      	movcs	r3, #74	; 0x4a
 8006ffe:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007000:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <USBD_HID_Setup+0x1f4>)
 8007002:	61bb      	str	r3, [r7, #24]
 8007004:	e015      	b.n	8007032 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	885b      	ldrh	r3, [r3, #2]
 800700a:	0a1b      	lsrs	r3, r3, #8
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b21      	cmp	r3, #33	; 0x21
 8007010:	d108      	bne.n	8007024 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007012:	4b2a      	ldr	r3, [pc, #168]	; (80070bc <USBD_HID_Setup+0x1f8>)
 8007014:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	88db      	ldrh	r3, [r3, #6]
 800701a:	2b09      	cmp	r3, #9
 800701c:	bf28      	it	cs
 800701e:	2309      	movcs	r3, #9
 8007020:	83fb      	strh	r3, [r7, #30]
 8007022:	e006      	b.n	8007032 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f001 f83a 	bl	80080a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800702c:	2302      	movs	r3, #2
 800702e:	75fb      	strb	r3, [r7, #23]
            break;
 8007030:	e034      	b.n	800709c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007032:	8bfb      	ldrh	r3, [r7, #30]
 8007034:	461a      	mov	r2, r3
 8007036:	69b9      	ldr	r1, [r7, #24]
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 f89b 	bl	8008174 <USBD_CtlSendData>
          break;
 800703e:	e02d      	b.n	800709c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007046:	2b03      	cmp	r3, #3
 8007048:	d107      	bne.n	800705a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	3308      	adds	r3, #8
 800704e:	2201      	movs	r2, #1
 8007050:	4619      	mov	r1, r3
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f001 f88e 	bl	8008174 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007058:	e020      	b.n	800709c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 f81f 	bl	80080a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007062:	2302      	movs	r3, #2
 8007064:	75fb      	strb	r3, [r7, #23]
          break;
 8007066:	e019      	b.n	800709c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800706e:	2b03      	cmp	r3, #3
 8007070:	d106      	bne.n	8007080 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	885b      	ldrh	r3, [r3, #2]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	461a      	mov	r2, r3
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800707e:	e00d      	b.n	800709c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 f80c 	bl	80080a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8007088:	2302      	movs	r3, #2
 800708a:	75fb      	strb	r3, [r7, #23]
          break;
 800708c:	e006      	b.n	800709c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 800708e:	6839      	ldr	r1, [r7, #0]
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 f805 	bl	80080a0 <USBD_CtlError>
          ret = USBD_FAIL;
 8007096:	2302      	movs	r3, #2
 8007098:	75fb      	strb	r3, [r7, #23]
          break;
 800709a:	bf00      	nop
      }
      break;
 800709c:	e006      	b.n	80070ac <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 800709e:	6839      	ldr	r1, [r7, #0]
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fffd 	bl	80080a0 <USBD_CtlError>
      ret = USBD_FAIL;
 80070a6:	2302      	movs	r3, #2
 80070a8:	75fb      	strb	r3, [r7, #23]
      break;
 80070aa:	bf00      	nop
  }

  return ret;
 80070ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3720      	adds	r7, #32
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	200000c8 	.word	0x200000c8
 80070bc:	200000b0 	.word	0x200000b0

080070c0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2222      	movs	r2, #34	; 0x22
 80070cc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 80070ce:	4b03      	ldr	r3, [pc, #12]	; (80070dc <USBD_HID_GetFSCfgDesc+0x1c>)
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bc80      	pop	{r7}
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	20000044 	.word	0x20000044

080070e0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2222      	movs	r2, #34	; 0x22
 80070ec:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80070ee:	4b03      	ldr	r3, [pc, #12]	; (80070fc <USBD_HID_GetHSCfgDesc+0x1c>)
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bc80      	pop	{r7}
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20000068 	.word	0x20000068

08007100 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2222      	movs	r2, #34	; 0x22
 800710c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 800710e:	4b03      	ldr	r3, [pc, #12]	; (800711c <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007110:	4618      	mov	r0, r3
 8007112:	370c      	adds	r7, #12
 8007114:	46bd      	mov	sp, r7
 8007116:	bc80      	pop	{r7}
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	2000008c 	.word	0x2000008c

08007120 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	460b      	mov	r3, r1
 800712a:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007132:	2200      	movs	r2, #0
 8007134:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr
	...

08007144 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	220a      	movs	r2, #10
 8007150:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007152:	4b03      	ldr	r3, [pc, #12]	; (8007160 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007154:	4618      	mov	r0, r3
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	bc80      	pop	{r7}
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	200000bc 	.word	0x200000bc

08007164 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	4613      	mov	r3, r2
 8007170:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d101      	bne.n	800717c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007178:	2302      	movs	r3, #2
 800717a:	e01a      	b.n	80071b2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	68ba      	ldr	r2, [r7, #8]
 8007198:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	79fa      	ldrb	r2, [r7, #7]
 80071a8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f001 fa3e 	bl	800862c <USBD_LL_Init>

  return USBD_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b085      	sub	sp, #20
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d006      	beq.n	80071dc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80071d6:	2300      	movs	r3, #0
 80071d8:	73fb      	strb	r3, [r7, #15]
 80071da:	e001      	b.n	80071e0 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80071dc:	2302      	movs	r3, #2
 80071de:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bc80      	pop	{r7}
 80071ea:	4770      	bx	lr

080071ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 fa61 	bl	80086bc <USBD_LL_Start>

  return USBD_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr

08007218 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007224:	2302      	movs	r3, #2
 8007226:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	4611      	mov	r1, r2
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
 8007242:	4603      	mov	r3, r0
 8007244:	2b00      	cmp	r3, #0
 8007246:	d101      	bne.n	800724c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	b082      	sub	sp, #8
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
 800725e:	460b      	mov	r3, r1
 8007260:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	4611      	mov	r1, r2
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	4798      	blx	r3

  return USBD_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 feca 	bl	8008028 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80072a2:	461a      	mov	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072b0:	f003 031f 	and.w	r3, r3, #31
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d00c      	beq.n	80072d2 <USBD_LL_SetupStage+0x56>
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d302      	bcc.n	80072c2 <USBD_LL_SetupStage+0x46>
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d010      	beq.n	80072e2 <USBD_LL_SetupStage+0x66>
 80072c0:	e017      	b.n	80072f2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f9ca 	bl	8007664 <USBD_StdDevReq>
      break;
 80072d0:	e01a      	b.n	8007308 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072d8:	4619      	mov	r1, r3
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fa2c 	bl	8007738 <USBD_StdItfReq>
      break;
 80072e0:	e012      	b.n	8007308 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80072e8:	4619      	mov	r1, r3
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 fa6a 	bl	80077c4 <USBD_StdEPReq>
      break;
 80072f0:	e00a      	b.n	8007308 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80072f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	4619      	mov	r1, r3
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f001 fa3b 	bl	800877c <USBD_LL_StallEP>
      break;
 8007306:	bf00      	nop
  }

  return USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b086      	sub	sp, #24
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	460b      	mov	r3, r1
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007320:	7afb      	ldrb	r3, [r7, #11]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d14b      	bne.n	80073be <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800732c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007334:	2b03      	cmp	r3, #3
 8007336:	d134      	bne.n	80073a2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	68da      	ldr	r2, [r3, #12]
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	691b      	ldr	r3, [r3, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	d919      	bls.n	8007378 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	1ad2      	subs	r2, r2, r3
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800735a:	429a      	cmp	r2, r3
 800735c:	d203      	bcs.n	8007366 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007362:	b29b      	uxth	r3, r3
 8007364:	e002      	b.n	800736c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800736a:	b29b      	uxth	r3, r3
 800736c:	461a      	mov	r2, r3
 800736e:	6879      	ldr	r1, [r7, #4]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	f000 ff2d 	bl	80081d0 <USBD_CtlContinueRx>
 8007376:	e038      	b.n	80073ea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00a      	beq.n	800739a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800738a:	2b03      	cmp	r3, #3
 800738c:	d105      	bne.n	800739a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 ff2a 	bl	80081f4 <USBD_CtlSendStatus>
 80073a0:	e023      	b.n	80073ea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073a8:	2b05      	cmp	r3, #5
 80073aa:	d11e      	bne.n	80073ea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80073b4:	2100      	movs	r1, #0
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f001 f9e0 	bl	800877c <USBD_LL_StallEP>
 80073bc:	e015      	b.n	80073ea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00d      	beq.n	80073e6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	d108      	bne.n	80073e6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	7afa      	ldrb	r2, [r7, #11]
 80073de:	4611      	mov	r1, r2
 80073e0:	68f8      	ldr	r0, [r7, #12]
 80073e2:	4798      	blx	r3
 80073e4:	e001      	b.n	80073ea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073e6:	2302      	movs	r3, #2
 80073e8:	e000      	b.n	80073ec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b086      	sub	sp, #24
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	460b      	mov	r3, r1
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d17f      	bne.n	8007508 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	3314      	adds	r3, #20
 800740c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007414:	2b02      	cmp	r3, #2
 8007416:	d15c      	bne.n	80074d2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	429a      	cmp	r2, r3
 8007422:	d915      	bls.n	8007450 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	691b      	ldr	r3, [r3, #16]
 800742c:	1ad2      	subs	r2, r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	b29b      	uxth	r3, r3
 8007438:	461a      	mov	r2, r3
 800743a:	6879      	ldr	r1, [r7, #4]
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 feb5 	bl	80081ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007442:	2300      	movs	r3, #0
 8007444:	2200      	movs	r2, #0
 8007446:	2100      	movs	r1, #0
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f001 fa43 	bl	80088d4 <USBD_LL_PrepareReceive>
 800744e:	e04e      	b.n	80074ee <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	6912      	ldr	r2, [r2, #16]
 8007458:	fbb3 f1f2 	udiv	r1, r3, r2
 800745c:	fb02 f201 	mul.w	r2, r2, r1
 8007460:	1a9b      	subs	r3, r3, r2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d11c      	bne.n	80074a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	689a      	ldr	r2, [r3, #8]
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800746e:	429a      	cmp	r2, r3
 8007470:	d316      	bcc.n	80074a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	689a      	ldr	r2, [r3, #8]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800747c:	429a      	cmp	r2, r3
 800747e:	d20f      	bcs.n	80074a0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007480:	2200      	movs	r2, #0
 8007482:	2100      	movs	r1, #0
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 fe91 	bl	80081ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007492:	2300      	movs	r3, #0
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f001 fa1b 	bl	80088d4 <USBD_LL_PrepareReceive>
 800749e:	e026      	b.n	80074ee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80074b2:	2b03      	cmp	r3, #3
 80074b4:	d105      	bne.n	80074c2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80074c2:	2180      	movs	r1, #128	; 0x80
 80074c4:	68f8      	ldr	r0, [r7, #12]
 80074c6:	f001 f959 	bl	800877c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 fea5 	bl	800821a <USBD_CtlReceiveStatus>
 80074d0:	e00d      	b.n	80074ee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074d8:	2b04      	cmp	r3, #4
 80074da:	d004      	beq.n	80074e6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80074e6:	2180      	movs	r1, #128	; 0x80
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f001 f947 	bl	800877c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d11d      	bne.n	8007534 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff fe83 	bl	8007204 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2200      	movs	r2, #0
 8007502:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007506:	e015      	b.n	8007534 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00d      	beq.n	8007530 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800751a:	2b03      	cmp	r3, #3
 800751c:	d108      	bne.n	8007530 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	7afa      	ldrb	r2, [r7, #11]
 8007528:	4611      	mov	r1, r2
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	4798      	blx	r3
 800752e:	e001      	b.n	8007534 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007530:	2302      	movs	r3, #2
 8007532:	e000      	b.n	8007536 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b082      	sub	sp, #8
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007546:	2340      	movs	r3, #64	; 0x40
 8007548:	2200      	movs	r2, #0
 800754a:	2100      	movs	r1, #0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 f8d0 	bl	80086f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2240      	movs	r2, #64	; 0x40
 800755e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007562:	2340      	movs	r3, #64	; 0x40
 8007564:	2200      	movs	r2, #0
 8007566:	2180      	movs	r1, #128	; 0x80
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f001 f8c2 	bl	80086f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2240      	movs	r2, #64	; 0x40
 8007578:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d009      	beq.n	80075b6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	6852      	ldr	r2, [r2, #4]
 80075ae:	b2d2      	uxtb	r2, r2
 80075b0:	4611      	mov	r1, r2
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	4798      	blx	r3
  }

  return USBD_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	78fa      	ldrb	r2, [r7, #3]
 80075d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr

080075de <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80075de:	b480      	push	{r7}
 80075e0:	b083      	sub	sp, #12
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2204      	movs	r2, #4
 80075f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	bc80      	pop	{r7}
 8007604:	4770      	bx	lr

08007606 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007606:	b480      	push	{r7}
 8007608:	b083      	sub	sp, #12
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	2b04      	cmp	r3, #4
 8007616:	d105      	bne.n	8007624 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	bc80      	pop	{r7}
 800762e:	4770      	bx	lr

08007630 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800763e:	2b03      	cmp	r3, #3
 8007640:	d10b      	bne.n	800765a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3708      	adds	r7, #8
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	781b      	ldrb	r3, [r3, #0]
 8007676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800767a:	2b20      	cmp	r3, #32
 800767c:	d004      	beq.n	8007688 <USBD_StdDevReq+0x24>
 800767e:	2b40      	cmp	r3, #64	; 0x40
 8007680:	d002      	beq.n	8007688 <USBD_StdDevReq+0x24>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <USBD_StdDevReq+0x34>
 8007686:	e04c      	b.n	8007722 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	4798      	blx	r3
      break;
 8007696:	e049      	b.n	800772c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b09      	cmp	r3, #9
 800769e:	d83a      	bhi.n	8007716 <USBD_StdDevReq+0xb2>
 80076a0:	a201      	add	r2, pc, #4	; (adr r2, 80076a8 <USBD_StdDevReq+0x44>)
 80076a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a6:	bf00      	nop
 80076a8:	080076f9 	.word	0x080076f9
 80076ac:	0800770d 	.word	0x0800770d
 80076b0:	08007717 	.word	0x08007717
 80076b4:	08007703 	.word	0x08007703
 80076b8:	08007717 	.word	0x08007717
 80076bc:	080076db 	.word	0x080076db
 80076c0:	080076d1 	.word	0x080076d1
 80076c4:	08007717 	.word	0x08007717
 80076c8:	080076ef 	.word	0x080076ef
 80076cc:	080076e5 	.word	0x080076e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f9d4 	bl	8007a80 <USBD_GetDescriptor>
          break;
 80076d8:	e022      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fb37 	bl	8007d50 <USBD_SetAddress>
          break;
 80076e2:	e01d      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80076e4:	6839      	ldr	r1, [r7, #0]
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fb74 	bl	8007dd4 <USBD_SetConfig>
          break;
 80076ec:	e018      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80076ee:	6839      	ldr	r1, [r7, #0]
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fbfd 	bl	8007ef0 <USBD_GetConfig>
          break;
 80076f6:	e013      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80076f8:	6839      	ldr	r1, [r7, #0]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 fc2c 	bl	8007f58 <USBD_GetStatus>
          break;
 8007700:	e00e      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fc5a 	bl	8007fbe <USBD_SetFeature>
          break;
 800770a:	e009      	b.n	8007720 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800770c:	6839      	ldr	r1, [r7, #0]
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fc69 	bl	8007fe6 <USBD_ClrFeature>
          break;
 8007714:	e004      	b.n	8007720 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fcc1 	bl	80080a0 <USBD_CtlError>
          break;
 800771e:	bf00      	nop
      }
      break;
 8007720:	e004      	b.n	800772c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fcbb 	bl	80080a0 <USBD_CtlError>
      break;
 800772a:	bf00      	nop
  }

  return ret;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop

08007738 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800774e:	2b20      	cmp	r3, #32
 8007750:	d003      	beq.n	800775a <USBD_StdItfReq+0x22>
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d001      	beq.n	800775a <USBD_StdItfReq+0x22>
 8007756:	2b00      	cmp	r3, #0
 8007758:	d12a      	bne.n	80077b0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	3b01      	subs	r3, #1
 8007762:	2b02      	cmp	r3, #2
 8007764:	d81d      	bhi.n	80077a2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	889b      	ldrh	r3, [r3, #4]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	2b01      	cmp	r3, #1
 800776e:	d813      	bhi.n	8007798 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	689b      	ldr	r3, [r3, #8]
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
 800777e:	4603      	mov	r3, r0
 8007780:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	88db      	ldrh	r3, [r3, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d110      	bne.n	80077ac <USBD_StdItfReq+0x74>
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10d      	bne.n	80077ac <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 fd2f 	bl	80081f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007796:	e009      	b.n	80077ac <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007798:	6839      	ldr	r1, [r7, #0]
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 fc80 	bl	80080a0 <USBD_CtlError>
          break;
 80077a0:	e004      	b.n	80077ac <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fc7b 	bl	80080a0 <USBD_CtlError>
          break;
 80077aa:	e000      	b.n	80077ae <USBD_StdItfReq+0x76>
          break;
 80077ac:	bf00      	nop
      }
      break;
 80077ae:	e004      	b.n	80077ba <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fc74 	bl	80080a0 <USBD_CtlError>
      break;
 80077b8:	bf00      	nop
  }

  return USBD_OK;
 80077ba:	2300      	movs	r3, #0
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3710      	adds	r7, #16
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	889b      	ldrh	r3, [r3, #4]
 80077d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e0:	2b20      	cmp	r3, #32
 80077e2:	d004      	beq.n	80077ee <USBD_StdEPReq+0x2a>
 80077e4:	2b40      	cmp	r3, #64	; 0x40
 80077e6:	d002      	beq.n	80077ee <USBD_StdEPReq+0x2a>
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d008      	beq.n	80077fe <USBD_StdEPReq+0x3a>
 80077ec:	e13d      	b.n	8007a6a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	6839      	ldr	r1, [r7, #0]
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	4798      	blx	r3
      break;
 80077fc:	e13a      	b.n	8007a74 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007806:	2b20      	cmp	r3, #32
 8007808:	d10a      	bne.n	8007820 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	6839      	ldr	r1, [r7, #0]
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
 8007818:	4603      	mov	r3, r0
 800781a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800781c:	7bfb      	ldrb	r3, [r7, #15]
 800781e:	e12a      	b.n	8007a76 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	785b      	ldrb	r3, [r3, #1]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d03e      	beq.n	80078a6 <USBD_StdEPReq+0xe2>
 8007828:	2b03      	cmp	r3, #3
 800782a:	d002      	beq.n	8007832 <USBD_StdEPReq+0x6e>
 800782c:	2b00      	cmp	r3, #0
 800782e:	d070      	beq.n	8007912 <USBD_StdEPReq+0x14e>
 8007830:	e115      	b.n	8007a5e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007838:	2b02      	cmp	r3, #2
 800783a:	d002      	beq.n	8007842 <USBD_StdEPReq+0x7e>
 800783c:	2b03      	cmp	r3, #3
 800783e:	d015      	beq.n	800786c <USBD_StdEPReq+0xa8>
 8007840:	e02b      	b.n	800789a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d00c      	beq.n	8007862 <USBD_StdEPReq+0x9e>
 8007848:	7bbb      	ldrb	r3, [r7, #14]
 800784a:	2b80      	cmp	r3, #128	; 0x80
 800784c:	d009      	beq.n	8007862 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 ff92 	bl	800877c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007858:	2180      	movs	r1, #128	; 0x80
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 ff8e 	bl	800877c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007860:	e020      	b.n	80078a4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007862:	6839      	ldr	r1, [r7, #0]
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fc1b 	bl	80080a0 <USBD_CtlError>
              break;
 800786a:	e01b      	b.n	80078a4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	885b      	ldrh	r3, [r3, #2]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10e      	bne.n	8007892 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d00b      	beq.n	8007892 <USBD_StdEPReq+0xce>
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d008      	beq.n	8007892 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	88db      	ldrh	r3, [r3, #6]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d104      	bne.n	8007892 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 ff75 	bl	800877c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fcae 	bl	80081f4 <USBD_CtlSendStatus>

              break;
 8007898:	e004      	b.n	80078a4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fbff 	bl	80080a0 <USBD_CtlError>
              break;
 80078a2:	bf00      	nop
          }
          break;
 80078a4:	e0e0      	b.n	8007a68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d002      	beq.n	80078b6 <USBD_StdEPReq+0xf2>
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d015      	beq.n	80078e0 <USBD_StdEPReq+0x11c>
 80078b4:	e026      	b.n	8007904 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078b6:	7bbb      	ldrb	r3, [r7, #14]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00c      	beq.n	80078d6 <USBD_StdEPReq+0x112>
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
 80078be:	2b80      	cmp	r3, #128	; 0x80
 80078c0:	d009      	beq.n	80078d6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 ff58 	bl	800877c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078cc:	2180      	movs	r1, #128	; 0x80
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 ff54 	bl	800877c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078d4:	e01c      	b.n	8007910 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 fbe1 	bl	80080a0 <USBD_CtlError>
              break;
 80078de:	e017      	b.n	8007910 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	885b      	ldrh	r3, [r3, #2]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d112      	bne.n	800790e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80078e8:	7bbb      	ldrb	r3, [r7, #14]
 80078ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d004      	beq.n	80078fc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80078f2:	7bbb      	ldrb	r3, [r7, #14]
 80078f4:	4619      	mov	r1, r3
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 ff5f 	bl	80087ba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc79 	bl	80081f4 <USBD_CtlSendStatus>
              }
              break;
 8007902:	e004      	b.n	800790e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fbca 	bl	80080a0 <USBD_CtlError>
              break;
 800790c:	e000      	b.n	8007910 <USBD_StdEPReq+0x14c>
              break;
 800790e:	bf00      	nop
          }
          break;
 8007910:	e0aa      	b.n	8007a68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007918:	2b02      	cmp	r3, #2
 800791a:	d002      	beq.n	8007922 <USBD_StdEPReq+0x15e>
 800791c:	2b03      	cmp	r3, #3
 800791e:	d032      	beq.n	8007986 <USBD_StdEPReq+0x1c2>
 8007920:	e097      	b.n	8007a52 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <USBD_StdEPReq+0x174>
 8007928:	7bbb      	ldrb	r3, [r7, #14]
 800792a:	2b80      	cmp	r3, #128	; 0x80
 800792c:	d004      	beq.n	8007938 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fbb5 	bl	80080a0 <USBD_CtlError>
                break;
 8007936:	e091      	b.n	8007a5c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800793c:	2b00      	cmp	r3, #0
 800793e:	da0b      	bge.n	8007958 <USBD_StdEPReq+0x194>
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007946:	4613      	mov	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4413      	add	r3, r2
 800794c:	009b      	lsls	r3, r3, #2
 800794e:	3310      	adds	r3, #16
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	4413      	add	r3, r2
 8007954:	3304      	adds	r3, #4
 8007956:	e00b      	b.n	8007970 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007958:	7bbb      	ldrb	r3, [r7, #14]
 800795a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800795e:	4613      	mov	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	009b      	lsls	r3, r3, #2
 8007966:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	4413      	add	r3, r2
 800796e:	3304      	adds	r3, #4
 8007970:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	2200      	movs	r2, #0
 8007976:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2202      	movs	r2, #2
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fbf8 	bl	8008174 <USBD_CtlSendData>
              break;
 8007984:	e06a      	b.n	8007a5c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800798a:	2b00      	cmp	r3, #0
 800798c:	da11      	bge.n	80079b2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	f003 020f 	and.w	r2, r3, #15
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	3318      	adds	r3, #24
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d117      	bne.n	80079d8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80079a8:	6839      	ldr	r1, [r7, #0]
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fb78 	bl	80080a0 <USBD_CtlError>
                  break;
 80079b0:	e054      	b.n	8007a5c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	f003 020f 	and.w	r2, r3, #15
 80079b8:	6879      	ldr	r1, [r7, #4]
 80079ba:	4613      	mov	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	4413      	add	r3, r2
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	440b      	add	r3, r1
 80079c4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d104      	bne.n	80079d8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80079ce:	6839      	ldr	r1, [r7, #0]
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f000 fb65 	bl	80080a0 <USBD_CtlError>
                  break;
 80079d6:	e041      	b.n	8007a5c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da0b      	bge.n	80079f8 <USBD_StdEPReq+0x234>
 80079e0:	7bbb      	ldrb	r3, [r7, #14]
 80079e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	3310      	adds	r3, #16
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	4413      	add	r3, r2
 80079f4:	3304      	adds	r3, #4
 80079f6:	e00b      	b.n	8007a10 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	3304      	adds	r3, #4
 8007a10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <USBD_StdEPReq+0x25a>
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	2b80      	cmp	r3, #128	; 0x80
 8007a1c:	d103      	bne.n	8007a26 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	2200      	movs	r2, #0
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	e00e      	b.n	8007a44 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 fee4 	bl	80087f8 <USBD_LL_IsStallEP>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	601a      	str	r2, [r3, #0]
 8007a3c:	e002      	b.n	8007a44 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2202      	movs	r2, #2
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb92 	bl	8008174 <USBD_CtlSendData>
              break;
 8007a50:	e004      	b.n	8007a5c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fb23 	bl	80080a0 <USBD_CtlError>
              break;
 8007a5a:	bf00      	nop
          }
          break;
 8007a5c:	e004      	b.n	8007a68 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007a5e:	6839      	ldr	r1, [r7, #0]
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f000 fb1d 	bl	80080a0 <USBD_CtlError>
          break;
 8007a66:	bf00      	nop
      }
      break;
 8007a68:	e004      	b.n	8007a74 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fb17 	bl	80080a0 <USBD_CtlError>
      break;
 8007a72:	bf00      	nop
  }

  return ret;
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	885b      	ldrh	r3, [r3, #2]
 8007a9a:	0a1b      	lsrs	r3, r3, #8
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	2b06      	cmp	r3, #6
 8007aa2:	f200 8128 	bhi.w	8007cf6 <USBD_GetDescriptor+0x276>
 8007aa6:	a201      	add	r2, pc, #4	; (adr r2, 8007aac <USBD_GetDescriptor+0x2c>)
 8007aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aac:	08007ac9 	.word	0x08007ac9
 8007ab0:	08007ae1 	.word	0x08007ae1
 8007ab4:	08007b21 	.word	0x08007b21
 8007ab8:	08007cf7 	.word	0x08007cf7
 8007abc:	08007cf7 	.word	0x08007cf7
 8007ac0:	08007c97 	.word	0x08007c97
 8007ac4:	08007cc3 	.word	0x08007cc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7c12      	ldrb	r2, [r2, #16]
 8007ad4:	f107 0108 	add.w	r1, r7, #8
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4798      	blx	r3
 8007adc:	60f8      	str	r0, [r7, #12]
      break;
 8007ade:	e112      	b.n	8007d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	7c1b      	ldrb	r3, [r3, #16]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10d      	bne.n	8007b04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	f107 0208 	add.w	r2, r7, #8
 8007af4:	4610      	mov	r0, r2
 8007af6:	4798      	blx	r3
 8007af8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3301      	adds	r3, #1
 8007afe:	2202      	movs	r2, #2
 8007b00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b02:	e100      	b.n	8007d06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	f107 0208 	add.w	r2, r7, #8
 8007b10:	4610      	mov	r0, r2
 8007b12:	4798      	blx	r3
 8007b14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3301      	adds	r3, #1
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	701a      	strb	r2, [r3, #0]
      break;
 8007b1e:	e0f2      	b.n	8007d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	885b      	ldrh	r3, [r3, #2]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b05      	cmp	r3, #5
 8007b28:	f200 80ac 	bhi.w	8007c84 <USBD_GetDescriptor+0x204>
 8007b2c:	a201      	add	r2, pc, #4	; (adr r2, 8007b34 <USBD_GetDescriptor+0xb4>)
 8007b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b32:	bf00      	nop
 8007b34:	08007b4d 	.word	0x08007b4d
 8007b38:	08007b81 	.word	0x08007b81
 8007b3c:	08007bb5 	.word	0x08007bb5
 8007b40:	08007be9 	.word	0x08007be9
 8007b44:	08007c1d 	.word	0x08007c1d
 8007b48:	08007c51 	.word	0x08007c51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00b      	beq.n	8007b70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	7c12      	ldrb	r2, [r2, #16]
 8007b64:	f107 0108 	add.w	r1, r7, #8
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4798      	blx	r3
 8007b6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b6e:	e091      	b.n	8007c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa94 	bl	80080a0 <USBD_CtlError>
            err++;
 8007b78:	7afb      	ldrb	r3, [r7, #11]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007b7e:	e089      	b.n	8007c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	7c12      	ldrb	r2, [r2, #16]
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	4610      	mov	r0, r2
 8007b9e:	4798      	blx	r3
 8007ba0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ba2:	e077      	b.n	8007c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fa7a 	bl	80080a0 <USBD_CtlError>
            err++;
 8007bac:	7afb      	ldrb	r3, [r7, #11]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007bb2:	e06f      	b.n	8007c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	7c12      	ldrb	r2, [r2, #16]
 8007bcc:	f107 0108 	add.w	r1, r7, #8
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4798      	blx	r3
 8007bd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bd6:	e05d      	b.n	8007c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa60 	bl	80080a0 <USBD_CtlError>
            err++;
 8007be0:	7afb      	ldrb	r3, [r7, #11]
 8007be2:	3301      	adds	r3, #1
 8007be4:	72fb      	strb	r3, [r7, #11]
          break;
 8007be6:	e055      	b.n	8007c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00b      	beq.n	8007c0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	687a      	ldr	r2, [r7, #4]
 8007bfe:	7c12      	ldrb	r2, [r2, #16]
 8007c00:	f107 0108 	add.w	r1, r7, #8
 8007c04:	4610      	mov	r0, r2
 8007c06:	4798      	blx	r3
 8007c08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c0a:	e043      	b.n	8007c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fa46 	bl	80080a0 <USBD_CtlError>
            err++;
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	3301      	adds	r3, #1
 8007c18:	72fb      	strb	r3, [r7, #11]
          break;
 8007c1a:	e03b      	b.n	8007c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00b      	beq.n	8007c40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c2e:	695b      	ldr	r3, [r3, #20]
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	7c12      	ldrb	r2, [r2, #16]
 8007c34:	f107 0108 	add.w	r1, r7, #8
 8007c38:	4610      	mov	r0, r2
 8007c3a:	4798      	blx	r3
 8007c3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3e:	e029      	b.n	8007c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c40:	6839      	ldr	r1, [r7, #0]
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa2c 	bl	80080a0 <USBD_CtlError>
            err++;
 8007c48:	7afb      	ldrb	r3, [r7, #11]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4e:	e021      	b.n	8007c94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00b      	beq.n	8007c74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	7c12      	ldrb	r2, [r2, #16]
 8007c68:	f107 0108 	add.w	r1, r7, #8
 8007c6c:	4610      	mov	r0, r2
 8007c6e:	4798      	blx	r3
 8007c70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c72:	e00f      	b.n	8007c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fa12 	bl	80080a0 <USBD_CtlError>
            err++;
 8007c7c:	7afb      	ldrb	r3, [r7, #11]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	72fb      	strb	r3, [r7, #11]
          break;
 8007c82:	e007      	b.n	8007c94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa0a 	bl	80080a0 <USBD_CtlError>
          err++;
 8007c8c:	7afb      	ldrb	r3, [r7, #11]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007c92:	e038      	b.n	8007d06 <USBD_GetDescriptor+0x286>
 8007c94:	e037      	b.n	8007d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	7c1b      	ldrb	r3, [r3, #16]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d109      	bne.n	8007cb2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca6:	f107 0208 	add.w	r2, r7, #8
 8007caa:	4610      	mov	r0, r2
 8007cac:	4798      	blx	r3
 8007cae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cb0:	e029      	b.n	8007d06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007cb2:	6839      	ldr	r1, [r7, #0]
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f9f3 	bl	80080a0 <USBD_CtlError>
        err++;
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007cc0:	e021      	b.n	8007d06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	7c1b      	ldrb	r3, [r3, #16]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10d      	bne.n	8007ce6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd2:	f107 0208 	add.w	r2, r7, #8
 8007cd6:	4610      	mov	r0, r2
 8007cd8:	4798      	blx	r3
 8007cda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	2207      	movs	r2, #7
 8007ce2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ce4:	e00f      	b.n	8007d06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ce6:	6839      	ldr	r1, [r7, #0]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f9d9 	bl	80080a0 <USBD_CtlError>
        err++;
 8007cee:	7afb      	ldrb	r3, [r7, #11]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	72fb      	strb	r3, [r7, #11]
      break;
 8007cf4:	e007      	b.n	8007d06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f9d1 	bl	80080a0 <USBD_CtlError>
      err++;
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
 8007d00:	3301      	adds	r3, #1
 8007d02:	72fb      	strb	r3, [r7, #11]
      break;
 8007d04:	bf00      	nop
  }

  if (err != 0U)
 8007d06:	7afb      	ldrb	r3, [r7, #11]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d11c      	bne.n	8007d46 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007d0c:	893b      	ldrh	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d011      	beq.n	8007d36 <USBD_GetDescriptor+0x2b6>
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	88db      	ldrh	r3, [r3, #6]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00d      	beq.n	8007d36 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	88da      	ldrh	r2, [r3, #6]
 8007d1e:	893b      	ldrh	r3, [r7, #8]
 8007d20:	4293      	cmp	r3, r2
 8007d22:	bf28      	it	cs
 8007d24:	4613      	movcs	r3, r2
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d2a:	893b      	ldrh	r3, [r7, #8]
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	68f9      	ldr	r1, [r7, #12]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fa1f 	bl	8008174 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	88db      	ldrh	r3, [r3, #6]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d104      	bne.n	8007d48 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fa58 	bl	80081f4 <USBD_CtlSendStatus>
 8007d44:	e000      	b.n	8007d48 <USBD_GetDescriptor+0x2c8>
    return;
 8007d46:	bf00      	nop
    }
  }
}
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop

08007d50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	889b      	ldrh	r3, [r3, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d130      	bne.n	8007dc4 <USBD_SetAddress+0x74>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	88db      	ldrh	r3, [r3, #6]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d12c      	bne.n	8007dc4 <USBD_SetAddress+0x74>
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	885b      	ldrh	r3, [r3, #2]
 8007d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007d70:	d828      	bhi.n	8007dc4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	885b      	ldrh	r3, [r3, #2]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d104      	bne.n	8007d92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 f988 	bl	80080a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d90:	e01c      	b.n	8007dcc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	7bfa      	ldrb	r2, [r7, #15]
 8007d96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fd56 	bl	8008850 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f000 fa25 	bl	80081f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007daa:	7bfb      	ldrb	r3, [r7, #15]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2202      	movs	r2, #2
 8007db4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db8:	e008      	b.n	8007dcc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dc2:	e003      	b.n	8007dcc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f96a 	bl	80080a0 <USBD_CtlError>
  }
}
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	885b      	ldrh	r3, [r3, #2]
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	4b41      	ldr	r3, [pc, #260]	; (8007eec <USBD_SetConfig+0x118>)
 8007de6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007de8:	4b40      	ldr	r3, [pc, #256]	; (8007eec <USBD_SetConfig+0x118>)
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d904      	bls.n	8007dfa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f954 	bl	80080a0 <USBD_CtlError>
 8007df8:	e075      	b.n	8007ee6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d002      	beq.n	8007e0a <USBD_SetConfig+0x36>
 8007e04:	2b03      	cmp	r3, #3
 8007e06:	d023      	beq.n	8007e50 <USBD_SetConfig+0x7c>
 8007e08:	e062      	b.n	8007ed0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e0a:	4b38      	ldr	r3, [pc, #224]	; (8007eec <USBD_SetConfig+0x118>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01a      	beq.n	8007e48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007e12:	4b36      	ldr	r3, [pc, #216]	; (8007eec <USBD_SetConfig+0x118>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2203      	movs	r2, #3
 8007e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007e24:	4b31      	ldr	r3, [pc, #196]	; (8007eec <USBD_SetConfig+0x118>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff f9f4 	bl	8007218 <USBD_SetClassConfig>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d104      	bne.n	8007e40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 f931 	bl	80080a0 <USBD_CtlError>
            return;
 8007e3e:	e052      	b.n	8007ee6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f9d7 	bl	80081f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e46:	e04e      	b.n	8007ee6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f000 f9d3 	bl	80081f4 <USBD_CtlSendStatus>
        break;
 8007e4e:	e04a      	b.n	8007ee6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007e50:	4b26      	ldr	r3, [pc, #152]	; (8007eec <USBD_SetConfig+0x118>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d112      	bne.n	8007e7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007e60:	4b22      	ldr	r3, [pc, #136]	; (8007eec <USBD_SetConfig+0x118>)
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	461a      	mov	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007e6a:	4b20      	ldr	r3, [pc, #128]	; (8007eec <USBD_SetConfig+0x118>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f7ff f9f0 	bl	8007256 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f9bc 	bl	80081f4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007e7c:	e033      	b.n	8007ee6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007e7e:	4b1b      	ldr	r3, [pc, #108]	; (8007eec <USBD_SetConfig+0x118>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	461a      	mov	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d01d      	beq.n	8007ec8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	4619      	mov	r1, r3
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f7ff f9de 	bl	8007256 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007e9a:	4b14      	ldr	r3, [pc, #80]	; (8007eec <USBD_SetConfig+0x118>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007ea4:	4b11      	ldr	r3, [pc, #68]	; (8007eec <USBD_SetConfig+0x118>)
 8007ea6:	781b      	ldrb	r3, [r3, #0]
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f7ff f9b4 	bl	8007218 <USBD_SetClassConfig>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d104      	bne.n	8007ec0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f8f1 	bl	80080a0 <USBD_CtlError>
            return;
 8007ebe:	e012      	b.n	8007ee6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f997 	bl	80081f4 <USBD_CtlSendStatus>
        break;
 8007ec6:	e00e      	b.n	8007ee6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f993 	bl	80081f4 <USBD_CtlSendStatus>
        break;
 8007ece:	e00a      	b.n	8007ee6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f8e4 	bl	80080a0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007ed8:	4b04      	ldr	r3, [pc, #16]	; (8007eec <USBD_SetConfig+0x118>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	4619      	mov	r1, r3
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f7ff f9b9 	bl	8007256 <USBD_ClrClassConfig>
        break;
 8007ee4:	bf00      	nop
    }
  }
}
 8007ee6:	3708      	adds	r7, #8
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}
 8007eec:	20000180 	.word	0x20000180

08007ef0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	88db      	ldrh	r3, [r3, #6]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d004      	beq.n	8007f0c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 f8cb 	bl	80080a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f0a:	e021      	b.n	8007f50 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	db17      	blt.n	8007f46 <USBD_GetConfig+0x56>
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	dd02      	ble.n	8007f20 <USBD_GetConfig+0x30>
 8007f1a:	2b03      	cmp	r3, #3
 8007f1c:	d00b      	beq.n	8007f36 <USBD_GetConfig+0x46>
 8007f1e:	e012      	b.n	8007f46 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3308      	adds	r3, #8
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f920 	bl	8008174 <USBD_CtlSendData>
        break;
 8007f34:	e00c      	b.n	8007f50 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	3304      	adds	r3, #4
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 f918 	bl	8008174 <USBD_CtlSendData>
        break;
 8007f44:	e004      	b.n	8007f50 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f8a9 	bl	80080a0 <USBD_CtlError>
        break;
 8007f4e:	bf00      	nop
}
 8007f50:	bf00      	nop
 8007f52:	3708      	adds	r7, #8
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d81e      	bhi.n	8007fac <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	88db      	ldrh	r3, [r3, #6]
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d004      	beq.n	8007f80 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007f76:	6839      	ldr	r1, [r7, #0]
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f891 	bl	80080a0 <USBD_CtlError>
        break;
 8007f7e:	e01a      	b.n	8007fb6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d005      	beq.n	8007f9c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f043 0202 	orr.w	r2, r3, #2
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	330c      	adds	r3, #12
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 f8e5 	bl	8008174 <USBD_CtlSendData>
      break;
 8007faa:	e004      	b.n	8007fb6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 f876 	bl	80080a0 <USBD_CtlError>
      break;
 8007fb4:	bf00      	nop
  }
}
 8007fb6:	bf00      	nop
 8007fb8:	3708      	adds	r7, #8
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}

08007fbe <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b082      	sub	sp, #8
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	885b      	ldrh	r3, [r3, #2]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d106      	bne.n	8007fde <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f90b 	bl	80081f4 <USBD_CtlSendStatus>
  }
}
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff6:	3b01      	subs	r3, #1
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d80b      	bhi.n	8008014 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	885b      	ldrh	r3, [r3, #2]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d10c      	bne.n	800801e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2200      	movs	r2, #0
 8008008:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f8f1 	bl	80081f4 <USBD_CtlSendStatus>
      }
      break;
 8008012:	e004      	b.n	800801e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008014:	6839      	ldr	r1, [r7, #0]
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f842 	bl	80080a0 <USBD_CtlError>
      break;
 800801c:	e000      	b.n	8008020 <USBD_ClrFeature+0x3a>
      break;
 800801e:	bf00      	nop
  }
}
 8008020:	bf00      	nop
 8008022:	3708      	adds	r7, #8
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781a      	ldrb	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	785a      	ldrb	r2, [r3, #1]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	3302      	adds	r3, #2
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	b29a      	uxth	r2, r3
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	3303      	adds	r3, #3
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	b29b      	uxth	r3, r3
 8008052:	021b      	lsls	r3, r3, #8
 8008054:	b29b      	uxth	r3, r3
 8008056:	4413      	add	r3, r2
 8008058:	b29a      	uxth	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	3304      	adds	r3, #4
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	b29a      	uxth	r2, r3
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	3305      	adds	r3, #5
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	021b      	lsls	r3, r3, #8
 8008070:	b29b      	uxth	r3, r3
 8008072:	4413      	add	r3, r2
 8008074:	b29a      	uxth	r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	3306      	adds	r3, #6
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	b29a      	uxth	r2, r3
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	3307      	adds	r3, #7
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	b29b      	uxth	r3, r3
 800808a:	021b      	lsls	r3, r3, #8
 800808c:	b29b      	uxth	r3, r3
 800808e:	4413      	add	r3, r2
 8008090:	b29a      	uxth	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	80da      	strh	r2, [r3, #6]

}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	bc80      	pop	{r7}
 800809e:	4770      	bx	lr

080080a0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80080aa:	2180      	movs	r1, #128	; 0x80
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fb65 	bl	800877c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80080b2:	2100      	movs	r1, #0
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fb61 	bl	800877c <USBD_LL_StallEP>
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80080c2:	b580      	push	{r7, lr}
 80080c4:	b086      	sub	sp, #24
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	60b9      	str	r1, [r7, #8]
 80080cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d032      	beq.n	800813e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80080d8:	68f8      	ldr	r0, [r7, #12]
 80080da:	f000 f834 	bl	8008146 <USBD_GetLen>
 80080de:	4603      	mov	r3, r0
 80080e0:	3301      	adds	r3, #1
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	005b      	lsls	r3, r3, #1
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80080ec:	7dfb      	ldrb	r3, [r7, #23]
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	75fa      	strb	r2, [r7, #23]
 80080f2:	461a      	mov	r2, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4413      	add	r3, r2
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	7812      	ldrb	r2, [r2, #0]
 80080fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80080fe:	7dfb      	ldrb	r3, [r7, #23]
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	75fa      	strb	r2, [r7, #23]
 8008104:	461a      	mov	r2, r3
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	4413      	add	r3, r2
 800810a:	2203      	movs	r2, #3
 800810c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800810e:	e012      	b.n	8008136 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	1c5a      	adds	r2, r3, #1
 8008114:	60fa      	str	r2, [r7, #12]
 8008116:	7dfa      	ldrb	r2, [r7, #23]
 8008118:	1c51      	adds	r1, r2, #1
 800811a:	75f9      	strb	r1, [r7, #23]
 800811c:	4611      	mov	r1, r2
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	440a      	add	r2, r1
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	1c5a      	adds	r2, r3, #1
 800812a:	75fa      	strb	r2, [r7, #23]
 800812c:	461a      	mov	r2, r3
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4413      	add	r3, r2
 8008132:	2200      	movs	r2, #0
 8008134:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e8      	bne.n	8008110 <USBD_GetString+0x4e>
    }
  }
}
 800813e:	bf00      	nop
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}

08008146 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008146:	b480      	push	{r7}
 8008148:	b085      	sub	sp, #20
 800814a:	af00      	add	r7, sp, #0
 800814c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008152:	e005      	b.n	8008160 <USBD_GetLen+0x1a>
  {
    len++;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
 8008156:	3301      	adds	r3, #1
 8008158:	73fb      	strb	r3, [r7, #15]
    buf++;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	3301      	adds	r3, #1
 800815e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1f5      	bne.n	8008154 <USBD_GetLen+0xe>
  }

  return len;
 8008168:	7bfb      	ldrb	r3, [r7, #15]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	bc80      	pop	{r7}
 8008172:	4770      	bx	lr

08008174 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	4613      	mov	r3, r2
 8008180:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2202      	movs	r2, #2
 8008186:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800818a:	88fa      	ldrh	r2, [r7, #6]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008190:	88fa      	ldrh	r2, [r7, #6]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008196:	88fb      	ldrh	r3, [r7, #6]
 8008198:	68ba      	ldr	r2, [r7, #8]
 800819a:	2100      	movs	r1, #0
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 fb76 	bl	800888e <USBD_LL_Transmit>

  return USBD_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	4613      	mov	r3, r2
 80081b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80081ba:	88fb      	ldrh	r3, [r7, #6]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	2100      	movs	r1, #0
 80081c0:	68f8      	ldr	r0, [r7, #12]
 80081c2:	f000 fb64 	bl	800888e <USBD_LL_Transmit>

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80081de:	88fb      	ldrh	r3, [r7, #6]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	2100      	movs	r1, #0
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 fb75 	bl	80088d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2204      	movs	r2, #4
 8008200:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008204:	2300      	movs	r3, #0
 8008206:	2200      	movs	r2, #0
 8008208:	2100      	movs	r1, #0
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 fb3f 	bl	800888e <USBD_LL_Transmit>

  return USBD_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b082      	sub	sp, #8
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2205      	movs	r2, #5
 8008226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800822a:	2300      	movs	r3, #0
 800822c:	2200      	movs	r2, #0
 800822e:	2100      	movs	r1, #0
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fb4f 	bl	80088d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008244:	2200      	movs	r2, #0
 8008246:	490e      	ldr	r1, [pc, #56]	; (8008280 <MX_USB_DEVICE_Init+0x40>)
 8008248:	480e      	ldr	r0, [pc, #56]	; (8008284 <MX_USB_DEVICE_Init+0x44>)
 800824a:	f7fe ff8b 	bl	8007164 <USBD_Init>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008254:	f7f8 fa6a 	bl	800072c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008258:	490b      	ldr	r1, [pc, #44]	; (8008288 <MX_USB_DEVICE_Init+0x48>)
 800825a:	480a      	ldr	r0, [pc, #40]	; (8008284 <MX_USB_DEVICE_Init+0x44>)
 800825c:	f7fe ffad 	bl	80071ba <USBD_RegisterClass>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008266:	f7f8 fa61 	bl	800072c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800826a:	4806      	ldr	r0, [pc, #24]	; (8008284 <MX_USB_DEVICE_Init+0x44>)
 800826c:	f7fe ffbe 	bl	80071ec <USBD_Start>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d001      	beq.n	800827a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008276:	f7f8 fa59 	bl	800072c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800827a:	bf00      	nop
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	20000114 	.word	0x20000114
 8008284:	200002cc 	.word	0x200002cc
 8008288:	2000000c 	.word	0x2000000c

0800828c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	4603      	mov	r3, r0
 8008294:	6039      	str	r1, [r7, #0]
 8008296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	2212      	movs	r2, #18
 800829c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800829e:	4b03      	ldr	r3, [pc, #12]	; (80082ac <USBD_FS_DeviceDescriptor+0x20>)
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20000130 	.word	0x20000130

080082b0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	4603      	mov	r3, r0
 80082b8:	6039      	str	r1, [r7, #0]
 80082ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2204      	movs	r2, #4
 80082c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80082c2:	4b03      	ldr	r3, [pc, #12]	; (80082d0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bc80      	pop	{r7}
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	20000144 	.word	0x20000144

080082d4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	6039      	str	r1, [r7, #0]
 80082de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80082e0:	79fb      	ldrb	r3, [r7, #7]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d105      	bne.n	80082f2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	4907      	ldr	r1, [pc, #28]	; (8008308 <USBD_FS_ProductStrDescriptor+0x34>)
 80082ea:	4808      	ldr	r0, [pc, #32]	; (800830c <USBD_FS_ProductStrDescriptor+0x38>)
 80082ec:	f7ff fee9 	bl	80080c2 <USBD_GetString>
 80082f0:	e004      	b.n	80082fc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	4904      	ldr	r1, [pc, #16]	; (8008308 <USBD_FS_ProductStrDescriptor+0x34>)
 80082f6:	4805      	ldr	r0, [pc, #20]	; (800830c <USBD_FS_ProductStrDescriptor+0x38>)
 80082f8:	f7ff fee3 	bl	80080c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082fc:	4b02      	ldr	r3, [pc, #8]	; (8008308 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3708      	adds	r7, #8
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	20000590 	.word	0x20000590
 800830c:	08008a4c 	.word	0x08008a4c

08008310 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	4603      	mov	r3, r0
 8008318:	6039      	str	r1, [r7, #0]
 800831a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	4904      	ldr	r1, [pc, #16]	; (8008330 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008320:	4804      	ldr	r0, [pc, #16]	; (8008334 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008322:	f7ff fece 	bl	80080c2 <USBD_GetString>
  return USBD_StrDesc;
 8008326:	4b02      	ldr	r3, [pc, #8]	; (8008330 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	20000590 	.word	0x20000590
 8008334:	08008a64 	.word	0x08008a64

08008338 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	6039      	str	r1, [r7, #0]
 8008342:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	221a      	movs	r2, #26
 8008348:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800834a:	f000 f843 	bl	80083d4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800834e:	4b02      	ldr	r3, [pc, #8]	; (8008358 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20000148 	.word	0x20000148

0800835c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	6039      	str	r1, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d105      	bne.n	800837a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	4907      	ldr	r1, [pc, #28]	; (8008390 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008372:	4808      	ldr	r0, [pc, #32]	; (8008394 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008374:	f7ff fea5 	bl	80080c2 <USBD_GetString>
 8008378:	e004      	b.n	8008384 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	4904      	ldr	r1, [pc, #16]	; (8008390 <USBD_FS_ConfigStrDescriptor+0x34>)
 800837e:	4805      	ldr	r0, [pc, #20]	; (8008394 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008380:	f7ff fe9f 	bl	80080c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008384:	4b02      	ldr	r3, [pc, #8]	; (8008390 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008386:	4618      	mov	r0, r3
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	20000590 	.word	0x20000590
 8008394:	08008a78 	.word	0x08008a78

08008398 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	4603      	mov	r3, r0
 80083a0:	6039      	str	r1, [r7, #0]
 80083a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d105      	bne.n	80083b6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083aa:	683a      	ldr	r2, [r7, #0]
 80083ac:	4907      	ldr	r1, [pc, #28]	; (80083cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ae:	4808      	ldr	r0, [pc, #32]	; (80083d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083b0:	f7ff fe87 	bl	80080c2 <USBD_GetString>
 80083b4:	e004      	b.n	80083c0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	4904      	ldr	r1, [pc, #16]	; (80083cc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80083ba:	4805      	ldr	r0, [pc, #20]	; (80083d0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80083bc:	f7ff fe81 	bl	80080c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083c0:	4b02      	ldr	r3, [pc, #8]	; (80083cc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20000590 	.word	0x20000590
 80083d0:	08008a84 	.word	0x08008a84

080083d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80083da:	4b0f      	ldr	r3, [pc, #60]	; (8008418 <Get_SerialNum+0x44>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80083e0:	4b0e      	ldr	r3, [pc, #56]	; (800841c <Get_SerialNum+0x48>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80083e6:	4b0e      	ldr	r3, [pc, #56]	; (8008420 <Get_SerialNum+0x4c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4413      	add	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d009      	beq.n	800840e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80083fa:	2208      	movs	r2, #8
 80083fc:	4909      	ldr	r1, [pc, #36]	; (8008424 <Get_SerialNum+0x50>)
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	f000 f814 	bl	800842c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008404:	2204      	movs	r2, #4
 8008406:	4908      	ldr	r1, [pc, #32]	; (8008428 <Get_SerialNum+0x54>)
 8008408:	68b8      	ldr	r0, [r7, #8]
 800840a:	f000 f80f 	bl	800842c <IntToUnicode>
  }
}
 800840e:	bf00      	nop
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	1ffff7e8 	.word	0x1ffff7e8
 800841c:	1ffff7ec 	.word	0x1ffff7ec
 8008420:	1ffff7f0 	.word	0x1ffff7f0
 8008424:	2000014a 	.word	0x2000014a
 8008428:	2000015a 	.word	0x2000015a

0800842c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800842c:	b480      	push	{r7}
 800842e:	b087      	sub	sp, #28
 8008430:	af00      	add	r7, sp, #0
 8008432:	60f8      	str	r0, [r7, #12]
 8008434:	60b9      	str	r1, [r7, #8]
 8008436:	4613      	mov	r3, r2
 8008438:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800843a:	2300      	movs	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]
 8008442:	e027      	b.n	8008494 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	0f1b      	lsrs	r3, r3, #28
 8008448:	2b09      	cmp	r3, #9
 800844a:	d80b      	bhi.n	8008464 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	0f1b      	lsrs	r3, r3, #28
 8008450:	b2da      	uxtb	r2, r3
 8008452:	7dfb      	ldrb	r3, [r7, #23]
 8008454:	005b      	lsls	r3, r3, #1
 8008456:	4619      	mov	r1, r3
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	440b      	add	r3, r1
 800845c:	3230      	adds	r2, #48	; 0x30
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	e00a      	b.n	800847a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	0f1b      	lsrs	r3, r3, #28
 8008468:	b2da      	uxtb	r2, r3
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	4619      	mov	r1, r3
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	440b      	add	r3, r1
 8008474:	3237      	adds	r2, #55	; 0x37
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	011b      	lsls	r3, r3, #4
 800847e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008480:	7dfb      	ldrb	r3, [r7, #23]
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	3301      	adds	r3, #1
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	4413      	add	r3, r2
 800848a:	2200      	movs	r2, #0
 800848c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800848e:	7dfb      	ldrb	r3, [r7, #23]
 8008490:	3301      	adds	r3, #1
 8008492:	75fb      	strb	r3, [r7, #23]
 8008494:	7dfa      	ldrb	r2, [r7, #23]
 8008496:	79fb      	ldrb	r3, [r7, #7]
 8008498:	429a      	cmp	r2, r3
 800849a:	d3d3      	bcc.n	8008444 <IntToUnicode+0x18>
  }
}
 800849c:	bf00      	nop
 800849e:	371c      	adds	r7, #28
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bc80      	pop	{r7}
 80084a4:	4770      	bx	lr
	...

080084a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b084      	sub	sp, #16
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a0d      	ldr	r2, [pc, #52]	; (80084ec <HAL_PCD_MspInit+0x44>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d113      	bne.n	80084e2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80084ba:	4b0d      	ldr	r3, [pc, #52]	; (80084f0 <HAL_PCD_MspInit+0x48>)
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	4a0c      	ldr	r2, [pc, #48]	; (80084f0 <HAL_PCD_MspInit+0x48>)
 80084c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084c4:	61d3      	str	r3, [r2, #28]
 80084c6:	4b0a      	ldr	r3, [pc, #40]	; (80084f0 <HAL_PCD_MspInit+0x48>)
 80084c8:	69db      	ldr	r3, [r3, #28]
 80084ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084ce:	60fb      	str	r3, [r7, #12]
 80084d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80084d2:	2200      	movs	r2, #0
 80084d4:	2100      	movs	r1, #0
 80084d6:	2014      	movs	r0, #20
 80084d8:	f7f8 fc29 	bl	8000d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80084dc:	2014      	movs	r0, #20
 80084de:	f7f8 fc42 	bl	8000d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	40005c00 	.word	0x40005c00
 80084f0:	40021000 	.word	0x40021000

080084f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f7fe feb6 	bl	800727c <USBD_LL_SetupStage>
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b082      	sub	sp, #8
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	460b      	mov	r3, r1
 8008522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800852a:	78fa      	ldrb	r2, [r7, #3]
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	4613      	mov	r3, r2
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	4413      	add	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	440b      	add	r3, r1
 8008538:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	4619      	mov	r1, r3
 8008542:	f7fe fee6 	bl	8007312 <USBD_LL_DataOutStage>
}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
 8008556:	460b      	mov	r3, r1
 8008558:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008560:	78fa      	ldrb	r2, [r7, #3]
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	00db      	lsls	r3, r3, #3
 800856c:	440b      	add	r3, r1
 800856e:	333c      	adds	r3, #60	; 0x3c
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	78fb      	ldrb	r3, [r7, #3]
 8008574:	4619      	mov	r1, r3
 8008576:	f7fe ff3d 	bl	80073f4 <USBD_LL_DataInStage>
}
 800857a:	bf00      	nop
 800857c:	3708      	adds	r7, #8
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}

08008582 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008590:	4618      	mov	r0, r3
 8008592:	f7ff f84d 	bl	8007630 <USBD_LL_SOF>
}
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80085a6:	2301      	movs	r3, #1
 80085a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d001      	beq.n	80085b6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80085b2:	f7f8 f8bb 	bl	800072c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085bc:	7bfa      	ldrb	r2, [r7, #15]
 80085be:	4611      	mov	r1, r2
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fe fffd 	bl	80075c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fe ffb6 	bl	800753e <USBD_LL_Reset>
}
 80085d2:	bf00      	nop
 80085d4:	3710      	adds	r7, #16
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
	...

080085dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe fff7 	bl	80075de <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d005      	beq.n	8008604 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80085f8:	4b04      	ldr	r3, [pc, #16]	; (800860c <HAL_PCD_SuspendCallback+0x30>)
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	4a03      	ldr	r2, [pc, #12]	; (800860c <HAL_PCD_SuspendCallback+0x30>)
 80085fe:	f043 0306 	orr.w	r3, r3, #6
 8008602:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008604:	bf00      	nop
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	e000ed00 	.word	0xe000ed00

08008610 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b082      	sub	sp, #8
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800861e:	4618      	mov	r0, r3
 8008620:	f7fe fff1 	bl	8007606 <USBD_LL_Resume>
}
 8008624:	bf00      	nop
 8008626:	3708      	adds	r7, #8
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008634:	4a1f      	ldr	r2, [pc, #124]	; (80086b4 <USBD_LL_Init+0x88>)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	4a1d      	ldr	r2, [pc, #116]	; (80086b4 <USBD_LL_Init+0x88>)
 8008640:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008644:	4b1b      	ldr	r3, [pc, #108]	; (80086b4 <USBD_LL_Init+0x88>)
 8008646:	4a1c      	ldr	r2, [pc, #112]	; (80086b8 <USBD_LL_Init+0x8c>)
 8008648:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800864a:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <USBD_LL_Init+0x88>)
 800864c:	2208      	movs	r2, #8
 800864e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008650:	4b18      	ldr	r3, [pc, #96]	; (80086b4 <USBD_LL_Init+0x88>)
 8008652:	2202      	movs	r2, #2
 8008654:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008656:	4b17      	ldr	r3, [pc, #92]	; (80086b4 <USBD_LL_Init+0x88>)
 8008658:	2200      	movs	r2, #0
 800865a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800865c:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <USBD_LL_Init+0x88>)
 800865e:	2200      	movs	r2, #0
 8008660:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008662:	4b14      	ldr	r3, [pc, #80]	; (80086b4 <USBD_LL_Init+0x88>)
 8008664:	2200      	movs	r2, #0
 8008666:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008668:	4812      	ldr	r0, [pc, #72]	; (80086b4 <USBD_LL_Init+0x88>)
 800866a:	f7f8 fcf1 	bl	8001050 <HAL_PCD_Init>
 800866e:	4603      	mov	r3, r0
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008674:	f7f8 f85a 	bl	800072c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800867e:	2318      	movs	r3, #24
 8008680:	2200      	movs	r2, #0
 8008682:	2100      	movs	r1, #0
 8008684:	f7fa f94d 	bl	8002922 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800868e:	2358      	movs	r3, #88	; 0x58
 8008690:	2200      	movs	r2, #0
 8008692:	2180      	movs	r1, #128	; 0x80
 8008694:	f7fa f945 	bl	8002922 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800869e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80086a2:	2200      	movs	r2, #0
 80086a4:	2181      	movs	r1, #129	; 0x81
 80086a6:	f7fa f93c 	bl	8002922 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000790 	.word	0x20000790
 80086b8:	40005c00 	.word	0x40005c00

080086bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c4:	2300      	movs	r3, #0
 80086c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c8:	2300      	movs	r3, #0
 80086ca:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7f8 fdc7 	bl	8001266 <HAL_PCD_Start>
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	4618      	mov	r0, r3
 80086e0:	f000 f93c 	bl	800895c <USBD_Get_USB_Status>
 80086e4:	4603      	mov	r3, r0
 80086e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80086e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b084      	sub	sp, #16
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	4608      	mov	r0, r1
 80086fc:	4611      	mov	r1, r2
 80086fe:	461a      	mov	r2, r3
 8008700:	4603      	mov	r3, r0
 8008702:	70fb      	strb	r3, [r7, #3]
 8008704:	460b      	mov	r3, r1
 8008706:	70bb      	strb	r3, [r7, #2]
 8008708:	4613      	mov	r3, r2
 800870a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800871a:	78bb      	ldrb	r3, [r7, #2]
 800871c:	883a      	ldrh	r2, [r7, #0]
 800871e:	78f9      	ldrb	r1, [r7, #3]
 8008720:	f7f8 ff41 	bl	80015a6 <HAL_PCD_EP_Open>
 8008724:	4603      	mov	r3, r0
 8008726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f916 	bl	800895c <USBD_Get_USB_Status>
 8008730:	4603      	mov	r3, r0
 8008732:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008734:	7bbb      	ldrb	r3, [r7, #14]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3710      	adds	r7, #16
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b084      	sub	sp, #16
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	460b      	mov	r3, r1
 8008748:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008758:	78fa      	ldrb	r2, [r7, #3]
 800875a:	4611      	mov	r1, r2
 800875c:	4618      	mov	r0, r3
 800875e:	f7f8 ff88 	bl	8001672 <HAL_PCD_EP_Close>
 8008762:	4603      	mov	r3, r0
 8008764:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008766:	7bfb      	ldrb	r3, [r7, #15]
 8008768:	4618      	mov	r0, r3
 800876a:	f000 f8f7 	bl	800895c <USBD_Get_USB_Status>
 800876e:	4603      	mov	r3, r0
 8008770:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8008772:	7bbb      	ldrb	r3, [r7, #14]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3710      	adds	r7, #16
 8008778:	46bd      	mov	sp, r7
 800877a:	bd80      	pop	{r7, pc}

0800877c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	460b      	mov	r3, r1
 8008786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008796:	78fa      	ldrb	r2, [r7, #3]
 8008798:	4611      	mov	r1, r2
 800879a:	4618      	mov	r0, r3
 800879c:	f7f9 f831 	bl	8001802 <HAL_PCD_EP_SetStall>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 f8d8 	bl	800895c <USBD_Get_USB_Status>
 80087ac:	4603      	mov	r3, r0
 80087ae:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	460b      	mov	r3, r1
 80087c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80087d4:	78fa      	ldrb	r2, [r7, #3]
 80087d6:	4611      	mov	r1, r2
 80087d8:	4618      	mov	r0, r3
 80087da:	f7f9 f872 	bl	80018c2 <HAL_PCD_EP_ClrStall>
 80087de:	4603      	mov	r3, r0
 80087e0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e2:	7bfb      	ldrb	r3, [r7, #15]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 f8b9 	bl	800895c <USBD_Get_USB_Status>
 80087ea:	4603      	mov	r3, r0
 80087ec:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80087ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800880a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800880c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008810:	2b00      	cmp	r3, #0
 8008812:	da0c      	bge.n	800882e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008814:	78fb      	ldrb	r3, [r7, #3]
 8008816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800881a:	68f9      	ldr	r1, [r7, #12]
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	4613      	mov	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	440b      	add	r3, r1
 8008828:	3302      	adds	r3, #2
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	e00b      	b.n	8008846 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800882e:	78fb      	ldrb	r3, [r7, #3]
 8008830:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008834:	68f9      	ldr	r1, [r7, #12]
 8008836:	4613      	mov	r3, r2
 8008838:	009b      	lsls	r3, r3, #2
 800883a:	4413      	add	r3, r2
 800883c:	00db      	lsls	r3, r3, #3
 800883e:	440b      	add	r3, r1
 8008840:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008844:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008846:	4618      	mov	r0, r3
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	bc80      	pop	{r7}
 800884e:	4770      	bx	lr

08008850 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800885c:	2300      	movs	r3, #0
 800885e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008860:	2300      	movs	r3, #0
 8008862:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800886a:	78fa      	ldrb	r2, [r7, #3]
 800886c:	4611      	mov	r1, r2
 800886e:	4618      	mov	r0, r3
 8008870:	f7f8 fe74 	bl	800155c <HAL_PCD_SetAddress>
 8008874:	4603      	mov	r3, r0
 8008876:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008878:	7bfb      	ldrb	r3, [r7, #15]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 f86e 	bl	800895c <USBD_Get_USB_Status>
 8008880:	4603      	mov	r3, r0
 8008882:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008884:	7bbb      	ldrb	r3, [r7, #14]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b086      	sub	sp, #24
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	607a      	str	r2, [r7, #4]
 8008898:	461a      	mov	r2, r3
 800889a:	460b      	mov	r3, r1
 800889c:	72fb      	strb	r3, [r7, #11]
 800889e:	4613      	mov	r3, r2
 80088a0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088a6:	2300      	movs	r3, #0
 80088a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088b0:	893b      	ldrh	r3, [r7, #8]
 80088b2:	7af9      	ldrb	r1, [r7, #11]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	f7f8 ff61 	bl	800177c <HAL_PCD_EP_Transmit>
 80088ba:	4603      	mov	r3, r0
 80088bc:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80088be:	7dfb      	ldrb	r3, [r7, #23]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 f84b 	bl	800895c <USBD_Get_USB_Status>
 80088c6:	4603      	mov	r3, r0
 80088c8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80088ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b086      	sub	sp, #24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	607a      	str	r2, [r7, #4]
 80088de:	461a      	mov	r2, r3
 80088e0:	460b      	mov	r3, r1
 80088e2:	72fb      	strb	r3, [r7, #11]
 80088e4:	4613      	mov	r3, r2
 80088e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80088ec:	2300      	movs	r3, #0
 80088ee:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088f6:	893b      	ldrh	r3, [r7, #8]
 80088f8:	7af9      	ldrb	r1, [r7, #11]
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	f7f8 ff01 	bl	8001702 <HAL_PCD_EP_Receive>
 8008900:	4603      	mov	r3, r0
 8008902:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	4618      	mov	r0, r3
 8008908:	f000 f828 	bl	800895c <USBD_Get_USB_Status>
 800890c:	4603      	mov	r3, r0
 800890e:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008910:	7dbb      	ldrb	r3, [r7, #22]
}
 8008912:	4618      	mov	r0, r3
 8008914:	3718      	adds	r7, #24
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}
	...

0800891c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008924:	4b02      	ldr	r3, [pc, #8]	; (8008930 <USBD_static_malloc+0x14>)
}
 8008926:	4618      	mov	r0, r3
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	bc80      	pop	{r7}
 800892e:	4770      	bx	lr
 8008930:	20000184 	.word	0x20000184

08008934 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]

}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bc80      	pop	{r7}
 8008944:	4770      	bx	lr

08008946 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	bc80      	pop	{r7}
 800895a:	4770      	bx	lr

0800895c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	4603      	mov	r3, r0
 8008964:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008966:	2300      	movs	r3, #0
 8008968:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800896a:	79fb      	ldrb	r3, [r7, #7]
 800896c:	2b03      	cmp	r3, #3
 800896e:	d817      	bhi.n	80089a0 <USBD_Get_USB_Status+0x44>
 8008970:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <USBD_Get_USB_Status+0x1c>)
 8008972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008976:	bf00      	nop
 8008978:	08008989 	.word	0x08008989
 800897c:	0800898f 	.word	0x0800898f
 8008980:	08008995 	.word	0x08008995
 8008984:	0800899b 	.word	0x0800899b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008988:	2300      	movs	r3, #0
 800898a:	73fb      	strb	r3, [r7, #15]
    break;
 800898c:	e00b      	b.n	80089a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800898e:	2302      	movs	r3, #2
 8008990:	73fb      	strb	r3, [r7, #15]
    break;
 8008992:	e008      	b.n	80089a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008994:	2301      	movs	r3, #1
 8008996:	73fb      	strb	r3, [r7, #15]
    break;
 8008998:	e005      	b.n	80089a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800899a:	2302      	movs	r3, #2
 800899c:	73fb      	strb	r3, [r7, #15]
    break;
 800899e:	e002      	b.n	80089a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80089a0:	2302      	movs	r3, #2
 80089a2:	73fb      	strb	r3, [r7, #15]
    break;
 80089a4:	bf00      	nop
  }
  return usb_status;
 80089a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3714      	adds	r7, #20
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bc80      	pop	{r7}
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop

080089b4 <__libc_init_array>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	2500      	movs	r5, #0
 80089b8:	4e0c      	ldr	r6, [pc, #48]	; (80089ec <__libc_init_array+0x38>)
 80089ba:	4c0d      	ldr	r4, [pc, #52]	; (80089f0 <__libc_init_array+0x3c>)
 80089bc:	1ba4      	subs	r4, r4, r6
 80089be:	10a4      	asrs	r4, r4, #2
 80089c0:	42a5      	cmp	r5, r4
 80089c2:	d109      	bne.n	80089d8 <__libc_init_array+0x24>
 80089c4:	f000 f822 	bl	8008a0c <_init>
 80089c8:	2500      	movs	r5, #0
 80089ca:	4e0a      	ldr	r6, [pc, #40]	; (80089f4 <__libc_init_array+0x40>)
 80089cc:	4c0a      	ldr	r4, [pc, #40]	; (80089f8 <__libc_init_array+0x44>)
 80089ce:	1ba4      	subs	r4, r4, r6
 80089d0:	10a4      	asrs	r4, r4, #2
 80089d2:	42a5      	cmp	r5, r4
 80089d4:	d105      	bne.n	80089e2 <__libc_init_array+0x2e>
 80089d6:	bd70      	pop	{r4, r5, r6, pc}
 80089d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089dc:	4798      	blx	r3
 80089de:	3501      	adds	r5, #1
 80089e0:	e7ee      	b.n	80089c0 <__libc_init_array+0xc>
 80089e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80089e6:	4798      	blx	r3
 80089e8:	3501      	adds	r5, #1
 80089ea:	e7f2      	b.n	80089d2 <__libc_init_array+0x1e>
 80089ec:	08008aac 	.word	0x08008aac
 80089f0:	08008aac 	.word	0x08008aac
 80089f4:	08008aac 	.word	0x08008aac
 80089f8:	08008ab0 	.word	0x08008ab0

080089fc <memset>:
 80089fc:	4603      	mov	r3, r0
 80089fe:	4402      	add	r2, r0
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d100      	bne.n	8008a06 <memset+0xa>
 8008a04:	4770      	bx	lr
 8008a06:	f803 1b01 	strb.w	r1, [r3], #1
 8008a0a:	e7f9      	b.n	8008a00 <memset+0x4>

08008a0c <_init>:
 8008a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0e:	bf00      	nop
 8008a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a12:	bc08      	pop	{r3}
 8008a14:	469e      	mov	lr, r3
 8008a16:	4770      	bx	lr

08008a18 <_fini>:
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	bf00      	nop
 8008a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1e:	bc08      	pop	{r3}
 8008a20:	469e      	mov	lr, r3
 8008a22:	4770      	bx	lr
